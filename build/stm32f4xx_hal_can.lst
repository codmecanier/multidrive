ARM GAS  /tmp/ccCenVhd.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_hal_can.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.HAL_CAN_MspInit,"ax",%progbits
  18              		.align	1
  19              		.weak	HAL_CAN_MspInit
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	HAL_CAN_MspInit:
  27              	.LVL0:
  28              	.LFB134:
  29              		.file 1 "HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c"
   1:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
   2:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ******************************************************************************
   3:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @file    stm32f4xx_hal_can.c
   4:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @author  MCD Application Team
   5:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief   CAN HAL module driver.
   6:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *          This file provides firmware functions to manage the following
   7:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *          functionalities of the Controller Area Network (CAN) peripheral:
   8:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           + Initialization and de-initialization functions
   9:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           + Configuration functions
  10:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           + Control functions
  11:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           + Interrupts management
  12:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           + Callbacks functions
  13:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           + Peripheral State and Error functions
  14:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *
  15:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   @verbatim
  16:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
  17:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                         ##### How to use this driver #####
  18:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
  19:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     [..]
  20:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) Initialize the CAN low level resources by implementing the
  21:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           HAL_CAN_MspInit():
  22:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****          (++) Enable the CAN interface clock using __HAL_RCC_CANx_CLK_ENABLE()
  23:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****          (++) Configure CAN pins
  24:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****              (+++) Enable the clock for the CAN GPIOs
  25:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****              (+++) Configure CAN pins as alternate function open-drain
  26:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****          (++) In case of using interrupts (e.g. HAL_CAN_ActivateNotification())
  27:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****              (+++) Configure the CAN interrupt priority using
  28:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                    HAL_NVIC_SetPriority()
  29:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****              (+++) Enable the CAN IRQ handler using HAL_NVIC_EnableIRQ()
ARM GAS  /tmp/ccCenVhd.s 			page 2


  30:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****              (+++) In CAN IRQ handler, call HAL_CAN_IRQHandler()
  31:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  32:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) Initialize the CAN peripheral using HAL_CAN_Init() function. This
  33:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           function resorts to HAL_CAN_MspInit() for low-level initialization.
  34:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  35:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) Configure the reception filters using the following configuration
  36:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           functions:
  37:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) HAL_CAN_ConfigFilter()
  38:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  39:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) Start the CAN module using HAL_CAN_Start() function. At this level
  40:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           the node is active on the bus: it receive messages, and can send
  41:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           messages.
  42:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  43:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) To manage messages transmission, the following Tx control functions
  44:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           can be used:
  45:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) HAL_CAN_AddTxMessage() to request transmission of a new
  46:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  message.
  47:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) HAL_CAN_AbortTxRequest() to abort transmission of a pending
  48:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  message.
  49:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) HAL_CAN_GetTxMailboxesFreeLevel() to get the number of free Tx
  50:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  mailboxes.
  51:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) HAL_CAN_IsTxMessagePending() to check if a message is pending
  52:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  in a Tx mailbox.
  53:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) HAL_CAN_GetTxTimestamp() to get the timestamp of Tx message
  54:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  sent, if time triggered communication mode is enabled.
  55:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  56:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) When a message is received into the CAN Rx FIFOs, it can be retrieved
  57:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           using the HAL_CAN_GetRxMessage() function. The function
  58:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           HAL_CAN_GetRxFifoFillLevel() allows to know how many Rx message are
  59:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           stored in the Rx Fifo.
  60:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  61:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) Calling the HAL_CAN_Stop() function stops the CAN module.
  62:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  63:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) The deinitialization is achieved with HAL_CAN_DeInit() function.
  64:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  65:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  66:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       *** Polling mode operation ***
  67:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       ==============================
  68:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     [..]
  69:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) Reception:
  70:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) Monitor reception of message using HAL_CAN_GetRxFifoFillLevel()
  71:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  until at least one message is received.
  72:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) Then get the message using HAL_CAN_GetRxMessage().
  73:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  74:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) Transmission:
  75:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) Monitor the Tx mailboxes availability until at least one Tx
  76:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  mailbox is free, using HAL_CAN_GetTxMailboxesFreeLevel().
  77:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) Then request transmission of a message using
  78:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  HAL_CAN_AddTxMessage().
  79:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  80:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  81:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       *** Interrupt mode operation ***
  82:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       ================================
  83:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     [..]
  84:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) Notifications are activated using HAL_CAN_ActivateNotification()
  85:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           function. Then, the process can be controlled through the
  86:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           available user callbacks: HAL_CAN_xxxCallback(), using same APIs
ARM GAS  /tmp/ccCenVhd.s 			page 3


  87:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           HAL_CAN_GetRxMessage() and HAL_CAN_AddTxMessage().
  88:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  89:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) Notifications can be deactivated using
  90:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           HAL_CAN_DeactivateNotification() function.
  91:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  92:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) Special care should be taken for CAN_IT_RX_FIFO0_MSG_PENDING and
  93:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           CAN_IT_RX_FIFO1_MSG_PENDING notifications. These notifications trig
  94:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           the callbacks HAL_CAN_RxFIFO0MsgPendingCallback() and
  95:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           HAL_CAN_RxFIFO1MsgPendingCallback(). User has two possible options
  96:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           here.
  97:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) Directly get the Rx message in the callback, using
  98:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  HAL_CAN_GetRxMessage().
  99:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) Or deactivate the notification in the callback without
 100:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  getting the Rx message. The Rx message can then be got later
 101:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  using HAL_CAN_GetRxMessage(). Once the Rx message have been
 102:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  read, the notification can be activated again.
 103:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 104:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 105:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       *** Sleep mode ***
 106:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       ==================
 107:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     [..]
 108:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) The CAN peripheral can be put in sleep mode (low power), using
 109:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           HAL_CAN_RequestSleep(). The sleep mode will be entered as soon as the
 110:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           current CAN activity (transmission or reception of a CAN frame) will
 111:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           be completed.
 112:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 113:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) A notification can be activated to be informed when the sleep mode
 114:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           will be entered.
 115:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 116:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) It can be checked if the sleep mode is entered using
 117:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           HAL_CAN_IsSleepActive().
 118:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           Note that the CAN state (accessible from the API HAL_CAN_GetState())
 119:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           is HAL_CAN_STATE_SLEEP_PENDING as soon as the sleep mode request is
 120:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           submitted (the sleep mode is not yet entered), and become
 121:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           HAL_CAN_STATE_SLEEP_ACTIVE when the sleep mode is effective.
 122:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 123:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (#) The wake-up from sleep mode can be trigged by two ways:
 124:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) Using HAL_CAN_WakeUp(). When returning from this function,
 125:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  the sleep mode is exited (if return status is HAL_OK).
 126:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             (++) When a start of Rx CAN frame is detected by the CAN peripheral,
 127:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                  if automatic wake up mode is enabled.
 128:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 129:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *** Callback registration ***
 130:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   =============================================
 131:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 132:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   The compilation define  USE_HAL_CAN_REGISTER_CALLBACKS when set to 1
 133:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   allows the user to configure dynamically the driver callbacks.
 134:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   Use Function @ref HAL_CAN_RegisterCallback() to register an interrupt callback.
 135:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 136:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   Function @ref HAL_CAN_RegisterCallback() allows to register following callbacks:
 137:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     (+) TxMailbox0CompleteCallback   : Tx Mailbox 0 Complete Callback.
 138:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     (+) TxMailbox1CompleteCallback   : Tx Mailbox 1 Complete Callback.
 139:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     (+) TxMailbox2CompleteCallback   : Tx Mailbox 2 Complete Callback.
 140:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     (+) TxMailbox0AbortCallback      : Tx Mailbox 0 Abort Callback.
 141:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     (+) TxMailbox1AbortCallback      : Tx Mailbox 1 Abort Callback.
 142:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     (+) TxMailbox2AbortCallback      : Tx Mailbox 2 Abort Callback.
 143:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     (+) RxFifo0MsgPendingCallback    : Rx Fifo 0 Message Pending Callback.
ARM GAS  /tmp/ccCenVhd.s 			page 4


 144:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     (+) RxFifo0FullCallback          : Rx Fifo 0 Full Callback.
 145:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     (+) RxFifo1MsgPendingCallback    : Rx Fifo 1 Message Pending Callback.
 146:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     (+) RxFifo1FullCallback          : Rx Fifo 1 Full Callback.
 147:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     (+) SleepCallback                : Sleep Callback.
 148:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     (+) WakeUpFromRxMsgCallback      : Wake Up From Rx Message Callback.
 149:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     (+) ErrorCallback                : Error Callback.
 150:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     (+) MspInitCallback              : CAN MspInit.
 151:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     (+) MspDeInitCallback            : CAN MspDeInit.
 152:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   This function takes as parameters the HAL peripheral handle, the Callback ID
 153:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   and a pointer to the user callback function.
 154:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 155:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   Use function @ref HAL_CAN_UnRegisterCallback() to reset a callback to the default
 156:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   weak function.
 157:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   @ref HAL_CAN_UnRegisterCallback takes as parameters the HAL peripheral handle,
 158:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   and the Callback ID.
 159:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   This function allows to reset following callbacks:
 160:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     (+) TxMailbox0CompleteCallback   : Tx Mailbox 0 Complete Callback.
 161:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     (+) TxMailbox1CompleteCallback   : Tx Mailbox 1 Complete Callback.
 162:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     (+) TxMailbox2CompleteCallback   : Tx Mailbox 2 Complete Callback.
 163:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     (+) TxMailbox0AbortCallback      : Tx Mailbox 0 Abort Callback.
 164:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     (+) TxMailbox1AbortCallback      : Tx Mailbox 1 Abort Callback.
 165:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     (+) TxMailbox2AbortCallback      : Tx Mailbox 2 Abort Callback.
 166:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     (+) RxFifo0MsgPendingCallback    : Rx Fifo 0 Message Pending Callback.
 167:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     (+) RxFifo0FullCallback          : Rx Fifo 0 Full Callback.
 168:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     (+) RxFifo1MsgPendingCallback    : Rx Fifo 1 Message Pending Callback.
 169:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     (+) RxFifo1FullCallback          : Rx Fifo 1 Full Callback.
 170:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     (+) SleepCallback                : Sleep Callback.
 171:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     (+) WakeUpFromRxMsgCallback      : Wake Up From Rx Message Callback.
 172:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     (+) ErrorCallback                : Error Callback.
 173:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     (+) MspInitCallback              : CAN MspInit.
 174:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     (+) MspDeInitCallback            : CAN MspDeInit.
 175:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 176:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   By default, after the @ref HAL_CAN_Init() and when the state is HAL_CAN_STATE_RESET,
 177:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   all callbacks are set to the corresponding weak functions:
 178:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   example @ref HAL_CAN_ErrorCallback().
 179:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   Exception done for MspInit and MspDeInit functions that are
 180:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   reset to the legacy weak function in the @ref HAL_CAN_Init()/ @ref HAL_CAN_DeInit() only when
 181:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   these callbacks are null (not registered beforehand).
 182:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if not, MspInit or MspDeInit are not null, the @ref HAL_CAN_Init()/ @ref HAL_CAN_DeInit()
 183:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   keep and use the user MspInit/MspDeInit callbacks (registered beforehand)
 184:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 185:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   Callbacks can be registered/unregistered in HAL_CAN_STATE_READY state only.
 186:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   Exception done MspInit/MspDeInit that can be registered/unregistered
 187:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   in HAL_CAN_STATE_READY or HAL_CAN_STATE_RESET state,
 188:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   thus registered (user) MspInit/DeInit callbacks can be used during the Init/DeInit.
 189:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   In that case first register the MspInit/MspDeInit user callbacks
 190:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   using @ref HAL_CAN_RegisterCallback() before calling @ref HAL_CAN_DeInit()
 191:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   or @ref HAL_CAN_Init() function.
 192:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 193:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   When The compilation define USE_HAL_CAN_REGISTER_CALLBACKS is set to 0 or
 194:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   not defined, the callback registration feature is not available and all callbacks
 195:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   are set to the corresponding weak functions.
 196:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 197:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   @endverbatim
 198:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ******************************************************************************
 199:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @attention
 200:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *
ARM GAS  /tmp/ccCenVhd.s 			page 5


 201:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
 202:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * All rights reserved.</center></h2>
 203:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *
 204:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * This software component is licensed by ST under BSD 3-Clause license,
 205:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * the "License"; You may not use this file except in compliance with the
 206:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * License. You may obtain a copy of the License at:
 207:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *                        opensource.org/licenses/BSD-3-Clause
 208:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *
 209:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ******************************************************************************
 210:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 211:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 212:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /* Includes ------------------------------------------------------------------*/
 213:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #include "stm32f4xx_hal.h"
 214:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 215:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /** @addtogroup STM32F4xx_HAL_Driver
 216:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @{
 217:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 218:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 219:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #if defined(CAN1)
 220:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 221:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /** @defgroup CAN CAN
 222:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief CAN driver modules
 223:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @{
 224:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 225:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 226:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #ifdef HAL_CAN_MODULE_ENABLED
 227:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 228:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #ifdef HAL_CAN_LEGACY_MODULE_ENABLED
 229:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   #error "The CAN driver cannot be used with its legacy, Please enable only one CAN module at once"
 230:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #endif
 231:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 232:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /* Private typedef -----------------------------------------------------------*/
 233:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /* Private define ------------------------------------------------------------*/
 234:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /** @defgroup CAN_Private_Constants CAN Private Constants
 235:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @{
 236:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 237:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #define CAN_TIMEOUT_VALUE 10U
 238:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 239:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @}
 240:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 241:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /* Private macro -------------------------------------------------------------*/
 242:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /* Private variables ---------------------------------------------------------*/
 243:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /* Private function prototypes -----------------------------------------------*/
 244:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /* Exported functions --------------------------------------------------------*/
 245:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 246:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions CAN Exported Functions
 247:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @{
 248:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 249:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 250:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group1 Initialization and de-initialization functions
 251:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *  @brief    Initialization and Configuration functions
 252:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *
 253:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @verbatim
 254:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
 255:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****               ##### Initialization and de-initialization functions #####
 256:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
 257:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     [..]  This section provides functions allowing to:
ARM GAS  /tmp/ccCenVhd.s 			page 6


 258:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_Init                       : Initialize and configure the CAN.
 259:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_DeInit                     : De-initialize the CAN.
 260:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_MspInit                    : Initialize the CAN MSP.
 261:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_MspDeInit                  : DeInitialize the CAN MSP.
 262:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 263:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @endverbatim
 264:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @{
 265:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 266:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 267:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 268:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Initializes the CAN peripheral according to the specified
 269:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         parameters in the CAN_InitStruct.
 270:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 271:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 272:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status
 273:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 274:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
 275:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 276:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t tickstart;
 277:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 278:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check CAN handle */
 279:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan == NULL)
 280:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 281:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 282:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 283:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 284:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check the parameters */
 285:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 286:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 287:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 288:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 289:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 290:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 291:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 292:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_MODE(hcan->Init.Mode));
 293:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 294:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 295:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 296:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 297:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 298:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
 299:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_RESET)
 300:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 301:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Reset callbacks to legacy functions */
 302:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0M
 303:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0F
 304:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1M
 305:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1F
 306:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbo
 307:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbo
 308:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbo
 309:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbo
 310:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbo
 311:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbo
 312:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCal
 313:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFr
 314:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCal
ARM GAS  /tmp/ccCenVhd.s 			page 7


 315:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 316:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (hcan->MspInitCallback == NULL)
 317:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 318:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 319:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 320:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 321:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Init the low level hardware: CLOCK, NVIC */
 322:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->MspInitCallback(hcan);
 323:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 324:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 325:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #else
 326:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_RESET)
 327:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 328:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Init the low level hardware: CLOCK, NVIC */
 329:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     HAL_CAN_MspInit(hcan);
 330:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 331:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */
 332:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 333:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Exit from sleep mode */
 334:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 335:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 336:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Get tick */
 337:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   tickstart = HAL_GetTick();
 338:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 339:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check Sleep mode leave acknowledge */
 340:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 341:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 342:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 343:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 344:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Update error code */
 345:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 346:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 347:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Change CAN state */
 348:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       hcan->State = HAL_CAN_STATE_ERROR;
 349:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 350:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       return HAL_ERROR;
 351:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 352:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 353:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 354:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Request initialisation */
 355:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 356:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 357:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Get tick */
 358:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   tickstart = HAL_GetTick();
 359:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 360:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Wait initialisation acknowledge */
 361:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 362:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 363:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 364:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 365:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Update error code */
 366:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 367:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 368:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Change CAN state */
 369:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       hcan->State = HAL_CAN_STATE_ERROR;
 370:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 371:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       return HAL_ERROR;
ARM GAS  /tmp/ccCenVhd.s 			page 8


 372:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 373:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 374:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 375:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Set the time triggered communication mode */
 376:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan->Init.TimeTriggeredMode == ENABLE)
 377:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 378:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 379:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 380:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 381:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 382:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 383:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 384:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 385:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Set the automatic bus-off management */
 386:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan->Init.AutoBusOff == ENABLE)
 387:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 388:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 389:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 390:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 391:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 392:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 393:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 394:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 395:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Set the automatic wake-up mode */
 396:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan->Init.AutoWakeUp == ENABLE)
 397:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 398:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 399:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 400:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 401:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 402:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 403:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 404:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 405:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Set the automatic retransmission */
 406:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan->Init.AutoRetransmission == ENABLE)
 407:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 408:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 409:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 410:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 411:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 412:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 413:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 414:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 415:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Set the receive FIFO locked mode */
 416:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan->Init.ReceiveFifoLocked == ENABLE)
 417:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 418:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 419:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 420:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 421:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 422:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 423:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 424:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 425:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Set the transmit FIFO priority */
 426:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan->Init.TransmitFifoPriority == ENABLE)
 427:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 428:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
ARM GAS  /tmp/ccCenVhd.s 			page 9


 429:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 430:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 431:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 432:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 433:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 434:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 435:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Set the bit timing register */
 436:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 437:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                             hcan->Init.SyncJumpWidth  |
 438:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                             hcan->Init.TimeSeg1       |
 439:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                             hcan->Init.TimeSeg2       |
 440:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                             (hcan->Init.Prescaler - 1U)));
 441:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 442:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Initialize the error code */
 443:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 444:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 445:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Initialize the CAN state */
 446:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   hcan->State = HAL_CAN_STATE_READY;
 447:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 448:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Return function status */
 449:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   return HAL_OK;
 450:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 451:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 452:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 453:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Deinitializes the CAN peripheral registers to their default
 454:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         reset values.
 455:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 456:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 457:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status
 458:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 459:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
 460:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 461:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check CAN handle */
 462:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan == NULL)
 463:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 464:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 465:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 466:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 467:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check the parameters */
 468:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 469:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 470:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Stop the CAN module */
 471:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   (void)HAL_CAN_Stop(hcan);
 472:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 473:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
 474:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan->MspDeInitCallback == NULL)
 475:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 476:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->MspDeInitCallback = HAL_CAN_MspDeInit; /* Legacy weak MspDeInit */
 477:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 478:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 479:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* DeInit the low level hardware: CLOCK, NVIC */
 480:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   hcan->MspDeInitCallback(hcan);
 481:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 482:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #else
 483:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* DeInit the low level hardware: CLOCK, NVIC */
 484:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   HAL_CAN_MspDeInit(hcan);
 485:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */
ARM GAS  /tmp/ccCenVhd.s 			page 10


 486:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 487:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Reset the CAN peripheral */
 488:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 489:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 490:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Reset the CAN ErrorCode */
 491:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 492:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 493:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Change CAN state */
 494:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   hcan->State = HAL_CAN_STATE_RESET;
 495:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 496:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Return function status */
 497:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   return HAL_OK;
 498:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 499:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 500:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 501:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Initializes the CAN MSP.
 502:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 503:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 504:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
 505:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 506:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
 507:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
  30              		.loc 1 507 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
 508:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
 509:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
  35              		.loc 1 509 3 view .LVU1
 510:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 511:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 512:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_MspInit could be implemented in the user file
 513:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
 514:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
  36              		.loc 1 514 1 is_stmt 0 view .LVU2
  37 0000 7047     		bx	lr
  38              		.cfi_endproc
  39              	.LFE134:
  41              		.section	.text.HAL_CAN_Init,"ax",%progbits
  42              		.align	1
  43              		.global	HAL_CAN_Init
  44              		.syntax unified
  45              		.thumb
  46              		.thumb_func
  47              		.fpu fpv4-sp-d16
  49              	HAL_CAN_Init:
  50              	.LVL1:
  51              	.LFB132:
 275:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t tickstart;
  52              		.loc 1 275 1 is_stmt 1 view -0
  53              		.cfi_startproc
  54              		@ args = 0, pretend = 0, frame = 0
  55              		@ frame_needed = 0, uses_anonymous_args = 0
 276:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  56              		.loc 1 276 3 view .LVU4
 279:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
ARM GAS  /tmp/ccCenVhd.s 			page 11


  57              		.loc 1 279 3 view .LVU5
 279:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
  58              		.loc 1 279 6 is_stmt 0 view .LVU6
  59 0000 0028     		cmp	r0, #0
  60 0002 00F0A180 		beq	.L21
 275:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t tickstart;
  61              		.loc 1 275 1 view .LVU7
  62 0006 38B5     		push	{r3, r4, r5, lr}
  63              	.LCFI0:
  64              		.cfi_def_cfa_offset 16
  65              		.cfi_offset 3, -16
  66              		.cfi_offset 4, -12
  67              		.cfi_offset 5, -8
  68              		.cfi_offset 14, -4
  69 0008 0446     		mov	r4, r0
 285:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
  70              		.loc 1 285 3 is_stmt 1 view .LVU8
 286:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
  71              		.loc 1 286 3 view .LVU9
 287:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
  72              		.loc 1 287 3 view .LVU10
 288:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
  73              		.loc 1 288 3 view .LVU11
 289:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
  74              		.loc 1 289 3 view .LVU12
 290:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
  75              		.loc 1 290 3 view .LVU13
 291:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_MODE(hcan->Init.Mode));
  76              		.loc 1 291 3 view .LVU14
 292:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  77              		.loc 1 292 3 view .LVU15
 293:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  78              		.loc 1 293 3 view .LVU16
 294:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  79              		.loc 1 294 3 view .LVU17
 295:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
  80              		.loc 1 295 3 view .LVU18
 296:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  81              		.loc 1 296 3 view .LVU19
 326:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
  82              		.loc 1 326 3 view .LVU20
 326:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
  83              		.loc 1 326 11 is_stmt 0 view .LVU21
  84 000a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 326:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
  85              		.loc 1 326 6 view .LVU22
  86 000e D3B1     		cbz	r3, .L26
  87              	.LVL2:
  88              	.L4:
 334:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  89              		.loc 1 334 3 is_stmt 1 view .LVU23
  90 0010 2268     		ldr	r2, [r4]
  91 0012 1368     		ldr	r3, [r2]
  92 0014 23F00203 		bic	r3, r3, #2
  93 0018 1360     		str	r3, [r2]
 337:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  94              		.loc 1 337 3 view .LVU24
ARM GAS  /tmp/ccCenVhd.s 			page 12


 337:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
  95              		.loc 1 337 15 is_stmt 0 view .LVU25
  96 001a FFF7FEFF 		bl	HAL_GetTick
  97              	.LVL3:
  98 001e 0546     		mov	r5, r0
  99              	.LVL4:
 340:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 100              		.loc 1 340 3 is_stmt 1 view .LVU26
 101              	.L5:
 340:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 102              		.loc 1 340 9 view .LVU27
 340:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 103              		.loc 1 340 15 is_stmt 0 view .LVU28
 104 0020 2368     		ldr	r3, [r4]
 340:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 105              		.loc 1 340 25 view .LVU29
 106 0022 5A68     		ldr	r2, [r3, #4]
 340:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 107              		.loc 1 340 9 view .LVU30
 108 0024 12F0020F 		tst	r2, #2
 109 0028 10D0     		beq	.L27
 342:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 110              		.loc 1 342 5 is_stmt 1 view .LVU31
 342:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 111              		.loc 1 342 10 is_stmt 0 view .LVU32
 112 002a FFF7FEFF 		bl	HAL_GetTick
 113              	.LVL5:
 342:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 114              		.loc 1 342 24 view .LVU33
 115 002e 401B     		subs	r0, r0, r5
 342:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 116              		.loc 1 342 8 view .LVU34
 117 0030 0A28     		cmp	r0, #10
 118 0032 F5D9     		bls	.L5
 345:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 119              		.loc 1 345 7 is_stmt 1 view .LVU35
 345:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 120              		.loc 1 345 23 is_stmt 0 view .LVU36
 121 0034 636A     		ldr	r3, [r4, #36]
 122 0036 43F40033 		orr	r3, r3, #131072
 123 003a 6362     		str	r3, [r4, #36]
 348:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 124              		.loc 1 348 7 is_stmt 1 view .LVU37
 348:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 125              		.loc 1 348 19 is_stmt 0 view .LVU38
 126 003c 0523     		movs	r3, #5
 127 003e 84F82030 		strb	r3, [r4, #32]
 350:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 128              		.loc 1 350 7 is_stmt 1 view .LVU39
 350:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 129              		.loc 1 350 14 is_stmt 0 view .LVU40
 130 0042 0120     		movs	r0, #1
 131              	.L3:
 450:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 132              		.loc 1 450 1 view .LVU41
 133 0044 38BD     		pop	{r3, r4, r5, pc}
 134              	.LVL6:
ARM GAS  /tmp/ccCenVhd.s 			page 13


 135              	.L26:
 329:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 136              		.loc 1 329 5 is_stmt 1 view .LVU42
 137 0046 FFF7FEFF 		bl	HAL_CAN_MspInit
 138              	.LVL7:
 329:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 139              		.loc 1 329 5 is_stmt 0 view .LVU43
 140 004a E1E7     		b	.L4
 141              	.LVL8:
 142              	.L27:
 355:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 143              		.loc 1 355 3 is_stmt 1 view .LVU44
 144 004c 1A68     		ldr	r2, [r3]
 145 004e 42F00102 		orr	r2, r2, #1
 146 0052 1A60     		str	r2, [r3]
 358:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 147              		.loc 1 358 3 view .LVU45
 358:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 148              		.loc 1 358 15 is_stmt 0 view .LVU46
 149 0054 FFF7FEFF 		bl	HAL_GetTick
 150              	.LVL9:
 151 0058 0546     		mov	r5, r0
 152              	.LVL10:
 361:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 153              		.loc 1 361 3 is_stmt 1 view .LVU47
 154              	.L7:
 361:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 155              		.loc 1 361 9 view .LVU48
 361:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 156              		.loc 1 361 15 is_stmt 0 view .LVU49
 157 005a 2368     		ldr	r3, [r4]
 361:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 158              		.loc 1 361 25 view .LVU50
 159 005c 5A68     		ldr	r2, [r3, #4]
 361:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 160              		.loc 1 361 9 view .LVU51
 161 005e 12F0010F 		tst	r2, #1
 162 0062 0DD1     		bne	.L28
 363:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 163              		.loc 1 363 5 is_stmt 1 view .LVU52
 363:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 164              		.loc 1 363 10 is_stmt 0 view .LVU53
 165 0064 FFF7FEFF 		bl	HAL_GetTick
 166              	.LVL11:
 363:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 167              		.loc 1 363 24 view .LVU54
 168 0068 401B     		subs	r0, r0, r5
 363:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 169              		.loc 1 363 8 view .LVU55
 170 006a 0A28     		cmp	r0, #10
 171 006c F5D9     		bls	.L7
 366:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 172              		.loc 1 366 7 is_stmt 1 view .LVU56
 366:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 173              		.loc 1 366 23 is_stmt 0 view .LVU57
 174 006e 636A     		ldr	r3, [r4, #36]
 175 0070 43F40033 		orr	r3, r3, #131072
ARM GAS  /tmp/ccCenVhd.s 			page 14


 176 0074 6362     		str	r3, [r4, #36]
 369:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 177              		.loc 1 369 7 is_stmt 1 view .LVU58
 369:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 178              		.loc 1 369 19 is_stmt 0 view .LVU59
 179 0076 0523     		movs	r3, #5
 180 0078 84F82030 		strb	r3, [r4, #32]
 371:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 181              		.loc 1 371 7 is_stmt 1 view .LVU60
 371:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 182              		.loc 1 371 14 is_stmt 0 view .LVU61
 183 007c 0120     		movs	r0, #1
 184 007e E1E7     		b	.L3
 185              	.L28:
 376:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 186              		.loc 1 376 3 is_stmt 1 view .LVU62
 376:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 187              		.loc 1 376 17 is_stmt 0 view .LVU63
 188 0080 227E     		ldrb	r2, [r4, #24]	@ zero_extendqisi2
 376:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 189              		.loc 1 376 6 view .LVU64
 190 0082 012A     		cmp	r2, #1
 191 0084 3DD0     		beq	.L29
 382:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 192              		.loc 1 382 5 is_stmt 1 view .LVU65
 193 0086 1A68     		ldr	r2, [r3]
 194 0088 22F08002 		bic	r2, r2, #128
 195 008c 1A60     		str	r2, [r3]
 196              	.L10:
 386:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 197              		.loc 1 386 3 view .LVU66
 386:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 198              		.loc 1 386 17 is_stmt 0 view .LVU67
 199 008e 637E     		ldrb	r3, [r4, #25]	@ zero_extendqisi2
 386:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 200              		.loc 1 386 6 view .LVU68
 201 0090 012B     		cmp	r3, #1
 202 0092 3BD0     		beq	.L30
 392:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 203              		.loc 1 392 5 is_stmt 1 view .LVU69
 204 0094 2268     		ldr	r2, [r4]
 205 0096 1368     		ldr	r3, [r2]
 206 0098 23F04003 		bic	r3, r3, #64
 207 009c 1360     		str	r3, [r2]
 208              	.L12:
 396:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 209              		.loc 1 396 3 view .LVU70
 396:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 210              		.loc 1 396 17 is_stmt 0 view .LVU71
 211 009e A37E     		ldrb	r3, [r4, #26]	@ zero_extendqisi2
 396:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 212              		.loc 1 396 6 view .LVU72
 213 00a0 012B     		cmp	r3, #1
 214 00a2 39D0     		beq	.L31
 402:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 215              		.loc 1 402 5 is_stmt 1 view .LVU73
 216 00a4 2268     		ldr	r2, [r4]
ARM GAS  /tmp/ccCenVhd.s 			page 15


 217 00a6 1368     		ldr	r3, [r2]
 218 00a8 23F02003 		bic	r3, r3, #32
 219 00ac 1360     		str	r3, [r2]
 220              	.L14:
 406:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 221              		.loc 1 406 3 view .LVU74
 406:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 222              		.loc 1 406 17 is_stmt 0 view .LVU75
 223 00ae E37E     		ldrb	r3, [r4, #27]	@ zero_extendqisi2
 406:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 224              		.loc 1 406 6 view .LVU76
 225 00b0 012B     		cmp	r3, #1
 226 00b2 37D0     		beq	.L32
 412:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 227              		.loc 1 412 5 is_stmt 1 view .LVU77
 228 00b4 2268     		ldr	r2, [r4]
 229 00b6 1368     		ldr	r3, [r2]
 230 00b8 43F01003 		orr	r3, r3, #16
 231 00bc 1360     		str	r3, [r2]
 232              	.L16:
 416:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 233              		.loc 1 416 3 view .LVU78
 416:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 234              		.loc 1 416 17 is_stmt 0 view .LVU79
 235 00be 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 416:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 236              		.loc 1 416 6 view .LVU80
 237 00c0 012B     		cmp	r3, #1
 238 00c2 35D0     		beq	.L33
 422:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 239              		.loc 1 422 5 is_stmt 1 view .LVU81
 240 00c4 2268     		ldr	r2, [r4]
 241 00c6 1368     		ldr	r3, [r2]
 242 00c8 23F00803 		bic	r3, r3, #8
 243 00cc 1360     		str	r3, [r2]
 244              	.L18:
 426:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 245              		.loc 1 426 3 view .LVU82
 426:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 246              		.loc 1 426 17 is_stmt 0 view .LVU83
 247 00ce 637F     		ldrb	r3, [r4, #29]	@ zero_extendqisi2
 426:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 248              		.loc 1 426 6 view .LVU84
 249 00d0 012B     		cmp	r3, #1
 250 00d2 33D0     		beq	.L34
 432:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 251              		.loc 1 432 5 is_stmt 1 view .LVU85
 252 00d4 2268     		ldr	r2, [r4]
 253 00d6 1368     		ldr	r3, [r2]
 254 00d8 23F00403 		bic	r3, r3, #4
 255 00dc 1360     		str	r3, [r2]
 256              	.L20:
 436:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                             hcan->Init.SyncJumpWidth  |
 257              		.loc 1 436 3 view .LVU86
 258 00de A368     		ldr	r3, [r4, #8]
 259 00e0 E268     		ldr	r2, [r4, #12]
 260 00e2 1343     		orrs	r3, r3, r2
ARM GAS  /tmp/ccCenVhd.s 			page 16


 261 00e4 2269     		ldr	r2, [r4, #16]
 262 00e6 1343     		orrs	r3, r3, r2
 263 00e8 6269     		ldr	r2, [r4, #20]
 264 00ea 1343     		orrs	r3, r3, r2
 265 00ec 6268     		ldr	r2, [r4, #4]
 266 00ee 013A     		subs	r2, r2, #1
 267 00f0 2168     		ldr	r1, [r4]
 268 00f2 1343     		orrs	r3, r3, r2
 269 00f4 CB61     		str	r3, [r1, #28]
 443:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 270              		.loc 1 443 3 view .LVU87
 443:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 271              		.loc 1 443 19 is_stmt 0 view .LVU88
 272 00f6 0020     		movs	r0, #0
 273 00f8 6062     		str	r0, [r4, #36]
 446:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 274              		.loc 1 446 3 is_stmt 1 view .LVU89
 446:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 275              		.loc 1 446 15 is_stmt 0 view .LVU90
 276 00fa 0123     		movs	r3, #1
 277 00fc 84F82030 		strb	r3, [r4, #32]
 449:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 278              		.loc 1 449 3 is_stmt 1 view .LVU91
 449:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 279              		.loc 1 449 10 is_stmt 0 view .LVU92
 280 0100 A0E7     		b	.L3
 281              	.L29:
 378:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 282              		.loc 1 378 5 is_stmt 1 view .LVU93
 283 0102 1A68     		ldr	r2, [r3]
 284 0104 42F08002 		orr	r2, r2, #128
 285 0108 1A60     		str	r2, [r3]
 286 010a C0E7     		b	.L10
 287              	.L30:
 388:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 288              		.loc 1 388 5 view .LVU94
 289 010c 2268     		ldr	r2, [r4]
 290 010e 1368     		ldr	r3, [r2]
 291 0110 43F04003 		orr	r3, r3, #64
 292 0114 1360     		str	r3, [r2]
 293 0116 C2E7     		b	.L12
 294              	.L31:
 398:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 295              		.loc 1 398 5 view .LVU95
 296 0118 2268     		ldr	r2, [r4]
 297 011a 1368     		ldr	r3, [r2]
 298 011c 43F02003 		orr	r3, r3, #32
 299 0120 1360     		str	r3, [r2]
 300 0122 C4E7     		b	.L14
 301              	.L32:
 408:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 302              		.loc 1 408 5 view .LVU96
 303 0124 2268     		ldr	r2, [r4]
 304 0126 1368     		ldr	r3, [r2]
 305 0128 23F01003 		bic	r3, r3, #16
 306 012c 1360     		str	r3, [r2]
 307 012e C6E7     		b	.L16
ARM GAS  /tmp/ccCenVhd.s 			page 17


 308              	.L33:
 418:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 309              		.loc 1 418 5 view .LVU97
 310 0130 2268     		ldr	r2, [r4]
 311 0132 1368     		ldr	r3, [r2]
 312 0134 43F00803 		orr	r3, r3, #8
 313 0138 1360     		str	r3, [r2]
 314 013a C8E7     		b	.L18
 315              	.L34:
 428:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 316              		.loc 1 428 5 view .LVU98
 317 013c 2268     		ldr	r2, [r4]
 318 013e 1368     		ldr	r3, [r2]
 319 0140 43F00403 		orr	r3, r3, #4
 320 0144 1360     		str	r3, [r2]
 321 0146 CAE7     		b	.L20
 322              	.LVL12:
 323              	.L21:
 324              	.LCFI1:
 325              		.cfi_def_cfa_offset 0
 326              		.cfi_restore 3
 327              		.cfi_restore 4
 328              		.cfi_restore 5
 329              		.cfi_restore 14
 281:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 330              		.loc 1 281 12 is_stmt 0 view .LVU99
 331 0148 0120     		movs	r0, #1
 332              	.LVL13:
 450:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 333              		.loc 1 450 1 view .LVU100
 334 014a 7047     		bx	lr
 335              		.cfi_endproc
 336              	.LFE132:
 338              		.section	.text.HAL_CAN_MspDeInit,"ax",%progbits
 339              		.align	1
 340              		.weak	HAL_CAN_MspDeInit
 341              		.syntax unified
 342              		.thumb
 343              		.thumb_func
 344              		.fpu fpv4-sp-d16
 346              	HAL_CAN_MspDeInit:
 347              	.LVL14:
 348              	.LFB135:
 515:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 516:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 517:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  DeInitializes the CAN MSP.
 518:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 519:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 520:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
 521:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 522:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_MspDeInit(CAN_HandleTypeDef *hcan)
 523:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 349              		.loc 1 523 1 is_stmt 1 view -0
 350              		.cfi_startproc
 351              		@ args = 0, pretend = 0, frame = 0
 352              		@ frame_needed = 0, uses_anonymous_args = 0
 353              		@ link register save eliminated.
ARM GAS  /tmp/ccCenVhd.s 			page 18


 524:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
 525:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
 354              		.loc 1 525 3 view .LVU102
 526:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 527:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 528:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_MspDeInit could be implemented in the user file
 529:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
 530:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 355              		.loc 1 530 1 is_stmt 0 view .LVU103
 356 0000 7047     		bx	lr
 357              		.cfi_endproc
 358              	.LFE135:
 360              		.section	.text.HAL_CAN_ConfigFilter,"ax",%progbits
 361              		.align	1
 362              		.global	HAL_CAN_ConfigFilter
 363              		.syntax unified
 364              		.thumb
 365              		.thumb_func
 366              		.fpu fpv4-sp-d16
 368              	HAL_CAN_ConfigFilter:
 369              	.LVL15:
 370              	.LFB136:
 531:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 532:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
 533:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 534:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Register a CAN CallBack.
 535:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         To be used instead of the weak predefined callback
 536:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 537:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for CAN module
 538:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  CallbackID ID of the callback to be registered
 539:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         This parameter can be one of the following values:
 540:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX0_COMPLETE_CALLBACK_CB_ID Tx Mailbox 0 Complete callback 
 541:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX1_COMPLETE_CALLBACK_CB_ID Tx Mailbox 1 Complete callback 
 542:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX2_COMPLETE_CALLBACK_CB_ID Tx Mailbox 2 Complete callback 
 543:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX0_ABORT_CALLBACK_CB_ID Tx Mailbox 0 Abort callback ID
 544:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX1_ABORT_CALLBACK_CB_ID Tx Mailbox 1 Abort callback ID
 545:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX2_ABORT_CALLBACK_CB_ID Tx Mailbox 2 Abort callback ID
 546:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO0_MSG_PENDING_CALLBACK_CB_ID Rx Fifo 0 message pending callb
 547:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO0_FULL_CALLBACK_CB_ID Rx Fifo 0 full callback ID
 548:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO1_MSGPENDING_CALLBACK_CB_ID Rx Fifo 1 message pending callba
 549:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO1_FULL_CALLBACK_CB_ID Rx Fifo 1 full callback ID
 550:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           @arg @ref HAL_CAN_SLEEP_CALLBACK_CB_ID Sleep callback ID
 551:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           @arg @ref HAL_CAN_WAKEUP_FROM_RX_MSG_CALLBACK_CB_ID Wake Up from Rx message callback 
 552:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           @arg @ref HAL_CAN_ERROR_CALLBACK_CB_ID Error callback ID
 553:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           @arg @ref HAL_CAN_MSPINIT_CB_ID MspInit callback ID
 554:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           @arg @ref HAL_CAN_MSPDEINIT_CB_ID MspDeInit callback ID
 555:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  pCallback pointer to the Callback function
 556:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status
 557:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 558:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_RegisterCallback(CAN_HandleTypeDef *hcan, HAL_CAN_CallbackIDTypeDef Callb
 559:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 560:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   HAL_StatusTypeDef status = HAL_OK;
 561:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 562:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (pCallback == NULL)
 563:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 564:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update the error code */
 565:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
ARM GAS  /tmp/ccCenVhd.s 			page 19


 566:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 567:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 568:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 569:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 570:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_READY)
 571:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 572:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     switch (CallbackID)
 573:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 574:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID :
 575:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->TxMailbox0CompleteCallback = pCallback;
 576:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         break;
 577:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 578:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX1_COMPLETE_CB_ID :
 579:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->TxMailbox1CompleteCallback = pCallback;
 580:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         break;
 581:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 582:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX2_COMPLETE_CB_ID :
 583:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->TxMailbox2CompleteCallback = pCallback;
 584:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         break;
 585:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 586:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX0_ABORT_CB_ID :
 587:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->TxMailbox0AbortCallback = pCallback;
 588:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         break;
 589:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 590:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX1_ABORT_CB_ID :
 591:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->TxMailbox1AbortCallback = pCallback;
 592:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         break;
 593:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 594:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX2_ABORT_CB_ID :
 595:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->TxMailbox2AbortCallback = pCallback;
 596:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         break;
 597:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 598:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       case HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID :
 599:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->RxFifo0MsgPendingCallback = pCallback;
 600:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         break;
 601:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 602:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       case HAL_CAN_RX_FIFO0_FULL_CB_ID :
 603:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->RxFifo0FullCallback = pCallback;
 604:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         break;
 605:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 606:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       case HAL_CAN_RX_FIFO1_MSG_PENDING_CB_ID :
 607:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->RxFifo1MsgPendingCallback = pCallback;
 608:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         break;
 609:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 610:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       case HAL_CAN_RX_FIFO1_FULL_CB_ID :
 611:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->RxFifo1FullCallback = pCallback;
 612:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         break;
 613:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 614:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       case HAL_CAN_SLEEP_CB_ID :
 615:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->SleepCallback = pCallback;
 616:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         break;
 617:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 618:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       case HAL_CAN_WAKEUP_FROM_RX_MSG_CB_ID :
 619:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->WakeUpFromRxMsgCallback = pCallback;
 620:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         break;
 621:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 622:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       case HAL_CAN_ERROR_CB_ID :
ARM GAS  /tmp/ccCenVhd.s 			page 20


 623:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->ErrorCallback = pCallback;
 624:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         break;
 625:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 626:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       case HAL_CAN_MSPINIT_CB_ID :
 627:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->MspInitCallback = pCallback;
 628:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         break;
 629:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 630:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       case HAL_CAN_MSPDEINIT_CB_ID :
 631:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->MspDeInitCallback = pCallback;
 632:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         break;
 633:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 634:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       default :
 635:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Update the error code */
 636:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 637:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 638:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Return error status */
 639:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         status =  HAL_ERROR;
 640:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         break;
 641:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 642:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 643:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else if (hcan->State == HAL_CAN_STATE_RESET)
 644:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 645:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     switch (CallbackID)
 646:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 647:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       case HAL_CAN_MSPINIT_CB_ID :
 648:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->MspInitCallback = pCallback;
 649:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         break;
 650:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 651:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       case HAL_CAN_MSPDEINIT_CB_ID :
 652:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->MspDeInitCallback = pCallback;
 653:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         break;
 654:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 655:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       default :
 656:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Update the error code */
 657:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 658:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 659:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Return error status */
 660:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         status =  HAL_ERROR;
 661:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         break;
 662:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 663:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 664:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 665:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 666:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update the error code */
 667:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 668:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 669:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Return error status */
 670:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     status =  HAL_ERROR;
 671:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 672:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 673:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   return status;
 674:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 675:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 676:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 677:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Unregister a CAN CallBack.
 678:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         CAN callabck is redirected to the weak predefined callback
 679:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
ARM GAS  /tmp/ccCenVhd.s 			page 21


 680:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for CAN module
 681:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  CallbackID ID of the callback to be unregistered
 682:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         This parameter can be one of the following values:
 683:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX0_COMPLETE_CALLBACK_CB_ID Tx Mailbox 0 Complete callback 
 684:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX1_COMPLETE_CALLBACK_CB_ID Tx Mailbox 1 Complete callback 
 685:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX2_COMPLETE_CALLBACK_CB_ID Tx Mailbox 2 Complete callback 
 686:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX0_ABORT_CALLBACK_CB_ID Tx Mailbox 0 Abort callback ID
 687:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX1_ABORT_CALLBACK_CB_ID Tx Mailbox 1 Abort callback ID
 688:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           @arg @ref HAL_CAN_TX_MAILBOX2_ABORT_CALLBACK_CB_ID Tx Mailbox 2 Abort callback ID
 689:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO0_MSG_PENDING_CALLBACK_CB_ID Rx Fifo 0 message pending callb
 690:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO0_FULL_CALLBACK_CB_ID Rx Fifo 0 full callback ID
 691:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO1_MSGPENDING_CALLBACK_CB_ID Rx Fifo 1 message pending callba
 692:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           @arg @ref HAL_CAN_RX_FIFO1_FULL_CALLBACK_CB_ID Rx Fifo 1 full callback ID
 693:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           @arg @ref HAL_CAN_SLEEP_CALLBACK_CB_ID Sleep callback ID
 694:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           @arg @ref HAL_CAN_WAKEUP_FROM_RX_MSG_CALLBACK_CB_ID Wake Up from Rx message callback 
 695:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           @arg @ref HAL_CAN_ERROR_CALLBACK_CB_ID Error callback ID
 696:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           @arg @ref HAL_CAN_MSPINIT_CB_ID MspInit callback ID
 697:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *           @arg @ref HAL_CAN_MSPDEINIT_CB_ID MspDeInit callback ID
 698:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status
 699:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 700:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_UnRegisterCallback(CAN_HandleTypeDef *hcan, HAL_CAN_CallbackIDTypeDef Cal
 701:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 702:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   HAL_StatusTypeDef status = HAL_OK;
 703:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 704:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_READY)
 705:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 706:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     switch (CallbackID)
 707:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 708:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID :
 709:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->TxMailbox0CompleteCallback = HAL_CAN_TxMailbox0CompleteCallback;
 710:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         break;
 711:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 712:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX1_COMPLETE_CB_ID :
 713:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->TxMailbox1CompleteCallback = HAL_CAN_TxMailbox1CompleteCallback;
 714:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         break;
 715:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 716:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX2_COMPLETE_CB_ID :
 717:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->TxMailbox2CompleteCallback = HAL_CAN_TxMailbox2CompleteCallback;
 718:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         break;
 719:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 720:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX0_ABORT_CB_ID :
 721:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->TxMailbox0AbortCallback = HAL_CAN_TxMailbox0AbortCallback;
 722:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         break;
 723:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 724:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX1_ABORT_CB_ID :
 725:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->TxMailbox1AbortCallback = HAL_CAN_TxMailbox1AbortCallback;
 726:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         break;
 727:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 728:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       case HAL_CAN_TX_MAILBOX2_ABORT_CB_ID :
 729:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->TxMailbox2AbortCallback = HAL_CAN_TxMailbox2AbortCallback;
 730:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         break;
 731:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 732:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       case HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID :
 733:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->RxFifo0MsgPendingCallback = HAL_CAN_RxFifo0MsgPendingCallback;
 734:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         break;
 735:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 736:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       case HAL_CAN_RX_FIFO0_FULL_CB_ID :
ARM GAS  /tmp/ccCenVhd.s 			page 22


 737:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->RxFifo0FullCallback = HAL_CAN_RxFifo0FullCallback;
 738:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         break;
 739:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 740:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       case HAL_CAN_RX_FIFO1_MSG_PENDING_CB_ID :
 741:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->RxFifo1MsgPendingCallback = HAL_CAN_RxFifo1MsgPendingCallback;
 742:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         break;
 743:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 744:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       case HAL_CAN_RX_FIFO1_FULL_CB_ID :
 745:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->RxFifo1FullCallback = HAL_CAN_RxFifo1FullCallback;
 746:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         break;
 747:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 748:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       case HAL_CAN_SLEEP_CB_ID :
 749:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->SleepCallback = HAL_CAN_SleepCallback;
 750:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         break;
 751:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 752:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       case HAL_CAN_WAKEUP_FROM_RX_MSG_CB_ID :
 753:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->WakeUpFromRxMsgCallback = HAL_CAN_WakeUpFromRxMsgCallback;
 754:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         break;
 755:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 756:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       case HAL_CAN_ERROR_CB_ID :
 757:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->ErrorCallback = HAL_CAN_ErrorCallback;
 758:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         break;
 759:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 760:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       case HAL_CAN_MSPINIT_CB_ID :
 761:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->MspInitCallback = HAL_CAN_MspInit;
 762:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         break;
 763:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 764:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       case HAL_CAN_MSPDEINIT_CB_ID :
 765:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->MspDeInitCallback = HAL_CAN_MspDeInit;
 766:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         break;
 767:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 768:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       default :
 769:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Update the error code */
 770:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 771:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 772:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Return error status */
 773:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         status =  HAL_ERROR;
 774:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         break;
 775:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 776:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 777:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else if (hcan->State == HAL_CAN_STATE_RESET)
 778:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 779:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     switch (CallbackID)
 780:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 781:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       case HAL_CAN_MSPINIT_CB_ID :
 782:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->MspInitCallback = HAL_CAN_MspInit;
 783:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         break;
 784:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 785:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       case HAL_CAN_MSPDEINIT_CB_ID :
 786:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->MspDeInitCallback = HAL_CAN_MspDeInit;
 787:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         break;
 788:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 789:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       default :
 790:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Update the error code */
 791:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 792:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 793:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Return error status */
ARM GAS  /tmp/ccCenVhd.s 			page 23


 794:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         status =  HAL_ERROR;
 795:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         break;
 796:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 797:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 798:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 799:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 800:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update the error code */
 801:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 802:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 803:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Return error status */
 804:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     status =  HAL_ERROR;
 805:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 806:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 807:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   return status;
 808:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 809:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 810:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 811:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 812:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @}
 813:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 814:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 815:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group2 Configuration functions
 816:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *  @brief    Configuration functions.
 817:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *
 818:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @verbatim
 819:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
 820:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****               ##### Configuration functions #####
 821:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
 822:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     [..]  This section provides functions allowing to:
 823:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_ConfigFilter            : Configure the CAN reception filters
 824:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 825:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @endverbatim
 826:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @{
 827:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 828:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 829:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 830:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Configures the CAN reception filter according to the specified
 831:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         parameters in the CAN_FilterInitStruct.
 832:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 833:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
 834:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
 835:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         contains the filter configuration information.
 836:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
 837:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 838:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
 839:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 371              		.loc 1 839 1 is_stmt 1 view -0
 372              		.cfi_startproc
 373              		@ args = 0, pretend = 0, frame = 0
 374              		@ frame_needed = 0, uses_anonymous_args = 0
 375              		@ link register save eliminated.
 840:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t filternbrbitpos;
 376              		.loc 1 840 3 view .LVU105
 841:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   CAN_TypeDef *can_ip = hcan->Instance;
 377              		.loc 1 841 3 view .LVU106
 842:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 378              		.loc 1 842 3 view .LVU107
ARM GAS  /tmp/ccCenVhd.s 			page 24


 379              		.loc 1 842 24 is_stmt 0 view .LVU108
 380 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 381              	.LVL16:
 843:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 844:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 382              		.loc 1 844 3 is_stmt 1 view .LVU109
 383              		.loc 1 844 38 is_stmt 0 view .LVU110
 384 0004 013B     		subs	r3, r3, #1
 385              	.LVL17:
 386              		.loc 1 844 38 view .LVU111
 387 0006 DBB2     		uxtb	r3, r3
 388              		.loc 1 844 6 view .LVU112
 389 0008 012B     		cmp	r3, #1
 390 000a 05D9     		bls	.L50
 845:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
 846:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 847:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check the parameters */
 848:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdHigh));
 849:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdLow));
 850:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdHigh));
 851:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdLow));
 852:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
 853:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
 854:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
 855:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));
 856:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 857:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #if defined(CAN3)
 858:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check the CAN instance */
 859:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (hcan->Instance == CAN3)
 860:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 861:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* CAN3 is single instance with 14 dedicated filters banks */
 862:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 863:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check the parameters */
 864:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
 865:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 866:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     else
 867:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 868:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* CAN1 and CAN2 are dual instances with 28 common filters banks */
 869:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Select master instance to access the filter banks */
 870:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       can_ip = CAN1;
 871:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 872:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check the parameters */
 873:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->FilterBank));
 874:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
 875:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 876:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #elif defined(CAN2)
 877:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* CAN1 and CAN2 are dual instances with 28 common filters banks */
 878:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Select master instance to access the filter banks */
 879:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     can_ip = CAN1;
 880:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 881:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check the parameters */
 882:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->FilterBank));
 883:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
 884:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #else
 885:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* CAN1 is single instance with 14 dedicated filters banks */
 886:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 887:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check the parameters */
ARM GAS  /tmp/ccCenVhd.s 			page 25


 888:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
 889:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #endif
 890:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 891:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Initialisation mode for the filter */
 892:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 893:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 894:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #if defined(CAN3)
 895:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check the CAN instance */
 896:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (can_ip == CAN1)
 897:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 898:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Select the start filter number of CAN2 slave instance */
 899:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 900:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 901:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 902:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 903:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #elif defined(CAN2)
 904:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Select the start filter number of CAN2 slave instance */
 905:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 906:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 907:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 908:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #endif
 909:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Convert filter number into bit position */
 910:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 911:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 912:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Filter Deactivation */
 913:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 914:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 915:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Filter Scale */
 916:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 917:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 918:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* 16-bit scale for the filter */
 919:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 920:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 921:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* First 16-bit identifier and First 16-bit mask */
 922:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Or First 16-bit identifier and Second 16-bit identifier */
 923:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 924:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 925:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 926:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 927:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Second 16-bit identifier and Second 16-bit mask */
 928:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Or Third 16-bit identifier and Fourth 16-bit identifier */
 929:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 930:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 931:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 932:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 933:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 934:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 935:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 936:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* 32-bit scale for the filter */
 937:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       SET_BIT(can_ip->FS1R, filternbrbitpos);
 938:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 939:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* 32-bit identifier or First 32-bit identifier */
 940:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 941:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 942:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 943:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 944:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* 32-bit mask or Second 32-bit identifier */
ARM GAS  /tmp/ccCenVhd.s 			page 26


 945:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 946:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 947:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 948:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 949:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 950:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Filter Mode */
 951:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 952:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 953:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Id/Mask mode for the filter*/
 954:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 955:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 956:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
 957:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 958:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Identifier list mode for the filter*/
 959:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       SET_BIT(can_ip->FM1R, filternbrbitpos);
 960:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 961:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 962:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Filter FIFO assignment */
 963:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 964:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 965:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* FIFO 0 assignation for the filter */
 966:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 967:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 968:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     else
 969:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 970:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* FIFO 1 assignation for the filter */
 971:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       SET_BIT(can_ip->FFA1R, filternbrbitpos);
 972:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 973:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 974:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Filter activation */
 975:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 976:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 977:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       SET_BIT(can_ip->FA1R, filternbrbitpos);
 978:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 979:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 980:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Leave the initialisation mode for the filter */
 981:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 982:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 983:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Return function status */
 984:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_OK;
 985:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 986:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
 987:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 988:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code */
 989:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 391              		.loc 1 989 5 is_stmt 1 view .LVU113
 392              		.loc 1 989 21 is_stmt 0 view .LVU114
 393 000c 436A     		ldr	r3, [r0, #36]
 394 000e 43F48023 		orr	r3, r3, #262144
 395 0012 4362     		str	r3, [r0, #36]
 990:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 991:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 396              		.loc 1 991 5 is_stmt 1 view .LVU115
 397              		.loc 1 991 12 is_stmt 0 view .LVU116
 398 0014 0120     		movs	r0, #1
 399              	.LVL18:
 992:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
ARM GAS  /tmp/ccCenVhd.s 			page 27


 993:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 400              		.loc 1 993 1 view .LVU117
 401 0016 7047     		bx	lr
 402              	.LVL19:
 403              	.L50:
 839:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t filternbrbitpos;
 404              		.loc 1 839 1 view .LVU118
 405 0018 70B4     		push	{r4, r5, r6}
 406              	.LCFI2:
 407              		.cfi_def_cfa_offset 12
 408              		.cfi_offset 4, -12
 409              		.cfi_offset 5, -8
 410              		.cfi_offset 6, -4
 848:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdLow));
 411              		.loc 1 848 5 is_stmt 1 view .LVU119
 849:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdHigh));
 412              		.loc 1 849 5 view .LVU120
 850:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdLow));
 413              		.loc 1 850 5 view .LVU121
 851:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
 414              		.loc 1 851 5 view .LVU122
 852:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
 415              		.loc 1 852 5 view .LVU123
 853:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
 416              		.loc 1 853 5 view .LVU124
 854:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));
 417              		.loc 1 854 5 view .LVU125
 855:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 418              		.loc 1 855 5 view .LVU126
 879:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 419              		.loc 1 879 5 view .LVU127
 420              	.LVL20:
 882:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
 421              		.loc 1 882 5 view .LVU128
 883:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #else
 422              		.loc 1 883 5 view .LVU129
 892:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 423              		.loc 1 892 5 view .LVU130
 424 001a 444B     		ldr	r3, .L53
 425 001c D3F80022 		ldr	r2, [r3, #512]
 426 0020 42F00102 		orr	r2, r2, #1
 427 0024 C3F80022 		str	r2, [r3, #512]
 905:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 428              		.loc 1 905 5 view .LVU131
 429 0028 D3F80022 		ldr	r2, [r3, #512]
 430 002c 22F47C52 		bic	r2, r2, #16128
 431 0030 C3F80022 		str	r2, [r3, #512]
 906:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 432              		.loc 1 906 5 view .LVU132
 433 0034 D3F80022 		ldr	r2, [r3, #512]
 434 0038 486A     		ldr	r0, [r1, #36]
 435              	.LVL21:
 906:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 436              		.loc 1 906 5 is_stmt 0 view .LVU133
 437 003a 42EA0022 		orr	r2, r2, r0, lsl #8
 438 003e C3F80022 		str	r2, [r3, #512]
 910:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
ARM GAS  /tmp/ccCenVhd.s 			page 28


 439              		.loc 1 910 5 is_stmt 1 view .LVU134
 910:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 440              		.loc 1 910 52 is_stmt 0 view .LVU135
 441 0042 4A69     		ldr	r2, [r1, #20]
 910:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 442              		.loc 1 910 65 view .LVU136
 443 0044 02F01F02 		and	r2, r2, #31
 910:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 444              		.loc 1 910 21 view .LVU137
 445 0048 0120     		movs	r0, #1
 446 004a 00FA02F2 		lsl	r2, r0, r2
 447              	.LVL22:
 913:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 448              		.loc 1 913 5 is_stmt 1 view .LVU138
 449 004e D3F81C02 		ldr	r0, [r3, #540]
 450 0052 D443     		mvns	r4, r2
 451 0054 20EA0200 		bic	r0, r0, r2
 452 0058 C3F81C02 		str	r0, [r3, #540]
 916:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 453              		.loc 1 916 5 view .LVU139
 916:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 454              		.loc 1 916 22 is_stmt 0 view .LVU140
 455 005c CB69     		ldr	r3, [r1, #28]
 916:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 456              		.loc 1 916 8 view .LVU141
 457 005e B3B9     		cbnz	r3, .L38
 919:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 458              		.loc 1 919 7 is_stmt 1 view .LVU142
 459 0060 324B     		ldr	r3, .L53
 460 0062 D3F80C02 		ldr	r0, [r3, #524]
 461 0066 2040     		ands	r0, r0, r4
 462 0068 C3F80C02 		str	r0, [r3, #524]
 923:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 463              		.loc 1 923 7 view .LVU143
 924:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 464              		.loc 1 924 48 is_stmt 0 view .LVU144
 465 006c CE68     		ldr	r6, [r1, #12]
 925:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 466              		.loc 1 925 22 view .LVU145
 467 006e 8D88     		ldrh	r5, [r1, #4]
 923:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 468              		.loc 1 923 44 view .LVU146
 469 0070 4869     		ldr	r0, [r1, #20]
 924:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 470              		.loc 1 924 75 view .LVU147
 471 0072 45EA0645 		orr	r5, r5, r6, lsl #16
 923:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 472              		.loc 1 923 62 view .LVU148
 473 0076 4830     		adds	r0, r0, #72
 474 0078 43F83050 		str	r5, [r3, r0, lsl #3]
 929:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 475              		.loc 1 929 7 is_stmt 1 view .LVU149
 930:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 476              		.loc 1 930 48 is_stmt 0 view .LVU150
 477 007c 8E68     		ldr	r6, [r1, #8]
 931:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 478              		.loc 1 931 22 view .LVU151
ARM GAS  /tmp/ccCenVhd.s 			page 29


 479 007e 0888     		ldrh	r0, [r1]
 929:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 480              		.loc 1 929 44 view .LVU152
 481 0080 4D69     		ldr	r5, [r1, #20]
 930:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 482              		.loc 1 930 76 view .LVU153
 483 0082 40EA0640 		orr	r0, r0, r6, lsl #16
 929:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 484              		.loc 1 929 62 view .LVU154
 485 0086 4835     		adds	r5, r5, #72
 486 0088 03EBC503 		add	r3, r3, r5, lsl #3
 487 008c 5860     		str	r0, [r3, #4]
 488              	.L38:
 934:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 489              		.loc 1 934 5 is_stmt 1 view .LVU155
 934:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 490              		.loc 1 934 22 is_stmt 0 view .LVU156
 491 008e CB69     		ldr	r3, [r1, #28]
 934:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 492              		.loc 1 934 8 view .LVU157
 493 0090 012B     		cmp	r3, #1
 494 0092 1DD0     		beq	.L51
 495              	.L39:
 951:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 496              		.loc 1 951 5 is_stmt 1 view .LVU158
 951:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 497              		.loc 1 951 22 is_stmt 0 view .LVU159
 498 0094 8B69     		ldr	r3, [r1, #24]
 951:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 499              		.loc 1 951 8 view .LVU160
 500 0096 002B     		cmp	r3, #0
 501 0098 32D1     		bne	.L40
 954:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 502              		.loc 1 954 7 is_stmt 1 view .LVU161
 503 009a 2448     		ldr	r0, .L53
 504 009c D0F80432 		ldr	r3, [r0, #516]
 505 00a0 2340     		ands	r3, r3, r4
 506 00a2 C0F80432 		str	r3, [r0, #516]
 507              	.L41:
 963:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 508              		.loc 1 963 5 view .LVU162
 963:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 509              		.loc 1 963 22 is_stmt 0 view .LVU163
 510 00a6 0B69     		ldr	r3, [r1, #16]
 963:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 511              		.loc 1 963 8 view .LVU164
 512 00a8 8BBB     		cbnz	r3, .L42
 966:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 513              		.loc 1 966 7 is_stmt 1 view .LVU165
 514 00aa 204B     		ldr	r3, .L53
 515 00ac D3F81402 		ldr	r0, [r3, #532]
 516 00b0 0440     		ands	r4, r4, r0
 517 00b2 C3F81442 		str	r4, [r3, #532]
 518              	.L43:
 975:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 519              		.loc 1 975 5 view .LVU166
 975:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
ARM GAS  /tmp/ccCenVhd.s 			page 30


 520              		.loc 1 975 22 is_stmt 0 view .LVU167
 521 00b6 0B6A     		ldr	r3, [r1, #32]
 975:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 522              		.loc 1 975 8 view .LVU168
 523 00b8 012B     		cmp	r3, #1
 524 00ba 2FD0     		beq	.L52
 525              	.LVL23:
 526              	.L44:
 981:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 527              		.loc 1 981 5 is_stmt 1 view .LVU169
 528 00bc 1B4A     		ldr	r2, .L53
 529 00be D2F80032 		ldr	r3, [r2, #512]
 530 00c2 23F00103 		bic	r3, r3, #1
 531 00c6 C2F80032 		str	r3, [r2, #512]
 984:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 532              		.loc 1 984 5 view .LVU170
 984:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 533              		.loc 1 984 12 is_stmt 0 view .LVU171
 534 00ca 0020     		movs	r0, #0
 535              		.loc 1 993 1 view .LVU172
 536 00cc 70BC     		pop	{r4, r5, r6}
 537              	.LCFI3:
 538              		.cfi_remember_state
 539              		.cfi_restore 6
 540              		.cfi_restore 5
 541              		.cfi_restore 4
 542              		.cfi_def_cfa_offset 0
 543 00ce 7047     		bx	lr
 544              	.LVL24:
 545              	.L51:
 546              	.LCFI4:
 547              		.cfi_restore_state
 937:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 548              		.loc 1 937 7 is_stmt 1 view .LVU173
 549 00d0 164B     		ldr	r3, .L53
 550 00d2 D3F80C02 		ldr	r0, [r3, #524]
 551 00d6 1043     		orrs	r0, r0, r2
 552 00d8 C3F80C02 		str	r0, [r3, #524]
 940:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 553              		.loc 1 940 7 view .LVU174
 941:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 554              		.loc 1 941 48 is_stmt 0 view .LVU175
 555 00dc 0E68     		ldr	r6, [r1]
 942:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 556              		.loc 1 942 22 view .LVU176
 557 00de 8D88     		ldrh	r5, [r1, #4]
 940:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 558              		.loc 1 940 44 view .LVU177
 559 00e0 4869     		ldr	r0, [r1, #20]
 941:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 560              		.loc 1 941 72 view .LVU178
 561 00e2 45EA0645 		orr	r5, r5, r6, lsl #16
 940:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 562              		.loc 1 940 62 view .LVU179
 563 00e6 4830     		adds	r0, r0, #72
 564 00e8 43F83050 		str	r5, [r3, r0, lsl #3]
 945:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
ARM GAS  /tmp/ccCenVhd.s 			page 31


 565              		.loc 1 945 7 is_stmt 1 view .LVU180
 946:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 566              		.loc 1 946 48 is_stmt 0 view .LVU181
 567 00ec 8E68     		ldr	r6, [r1, #8]
 947:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 568              		.loc 1 947 22 view .LVU182
 569 00ee 8889     		ldrh	r0, [r1, #12]
 945:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 570              		.loc 1 945 44 view .LVU183
 571 00f0 4D69     		ldr	r5, [r1, #20]
 946:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 572              		.loc 1 946 76 view .LVU184
 573 00f2 40EA0640 		orr	r0, r0, r6, lsl #16
 945:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 574              		.loc 1 945 62 view .LVU185
 575 00f6 4835     		adds	r5, r5, #72
 576 00f8 03EBC503 		add	r3, r3, r5, lsl #3
 577 00fc 5860     		str	r0, [r3, #4]
 578 00fe C9E7     		b	.L39
 579              	.L40:
 959:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 580              		.loc 1 959 7 is_stmt 1 view .LVU186
 581 0100 0A48     		ldr	r0, .L53
 582 0102 D0F80432 		ldr	r3, [r0, #516]
 583 0106 1343     		orrs	r3, r3, r2
 584 0108 C0F80432 		str	r3, [r0, #516]
 585 010c CBE7     		b	.L41
 586              	.L42:
 971:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 587              		.loc 1 971 7 view .LVU187
 588 010e 0748     		ldr	r0, .L53
 589 0110 D0F81432 		ldr	r3, [r0, #532]
 590 0114 1343     		orrs	r3, r3, r2
 591 0116 C0F81432 		str	r3, [r0, #532]
 592 011a CCE7     		b	.L43
 593              	.L52:
 977:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 594              		.loc 1 977 7 view .LVU188
 595 011c 0349     		ldr	r1, .L53
 596              	.LVL25:
 977:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 597              		.loc 1 977 7 is_stmt 0 view .LVU189
 598 011e D1F81C32 		ldr	r3, [r1, #540]
 599 0122 1A43     		orrs	r2, r2, r3
 600              	.LVL26:
 977:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 601              		.loc 1 977 7 view .LVU190
 602 0124 C1F81C22 		str	r2, [r1, #540]
 603 0128 C8E7     		b	.L44
 604              	.L54:
 605 012a 00BF     		.align	2
 606              	.L53:
 607 012c 00640040 		.word	1073767424
 608              		.cfi_endproc
 609              	.LFE136:
 611              		.section	.text.HAL_CAN_Start,"ax",%progbits
 612              		.align	1
ARM GAS  /tmp/ccCenVhd.s 			page 32


 613              		.global	HAL_CAN_Start
 614              		.syntax unified
 615              		.thumb
 616              		.thumb_func
 617              		.fpu fpv4-sp-d16
 619              	HAL_CAN_Start:
 620              	.LVL27:
 621              	.LFB137:
 994:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 995:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
 996:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @}
 997:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
 998:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 999:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group3 Control functions
1000:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *  @brief    Control functions
1001:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *
1002:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @verbatim
1003:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
1004:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                       ##### Control functions #####
1005:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
1006:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     [..]  This section provides functions allowing to:
1007:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_Start                    : Start the CAN module
1008:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_Stop                     : Stop the CAN module
1009:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_RequestSleep             : Request sleep mode entry.
1010:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_WakeUp                   : Wake up from sleep mode.
1011:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_IsSleepActive            : Check is sleep mode is active.
1012:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_AddTxMessage             : Add a message to the Tx mailboxes
1013:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                              and activate the corresponding
1014:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                              transmission request
1015:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_AbortTxRequest           : Abort transmission request
1016:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_GetTxMailboxesFreeLevel  : Return Tx mailboxes free level
1017:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_IsTxMessagePending       : Check if a transmission request is
1018:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                              pending on the selected Tx mailbox
1019:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_GetRxMessage             : Get a CAN frame from the Rx FIFO
1020:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_GetRxFifoFillLevel       : Return Rx FIFO fill level
1021:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1022:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @endverbatim
1023:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @{
1024:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1025:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1026:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1027:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Start the CAN module.
1028:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1029:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1030:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status
1031:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1032:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
1033:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 622              		.loc 1 1033 1 is_stmt 1 view -0
 623              		.cfi_startproc
 624              		@ args = 0, pretend = 0, frame = 0
 625              		@ frame_needed = 0, uses_anonymous_args = 0
 626              		.loc 1 1033 1 is_stmt 0 view .LVU192
 627 0000 70B5     		push	{r4, r5, r6, lr}
 628              	.LCFI5:
 629              		.cfi_def_cfa_offset 16
 630              		.cfi_offset 4, -16
ARM GAS  /tmp/ccCenVhd.s 			page 33


 631              		.cfi_offset 5, -12
 632              		.cfi_offset 6, -8
 633              		.cfi_offset 14, -4
 634 0002 0446     		mov	r4, r0
1034:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t tickstart;
 635              		.loc 1 1034 3 is_stmt 1 view .LVU193
1035:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1036:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_READY)
 636              		.loc 1 1036 3 view .LVU194
 637              		.loc 1 1036 11 is_stmt 0 view .LVU195
 638 0004 90F82050 		ldrb	r5, [r0, #32]	@ zero_extendqisi2
 639 0008 EDB2     		uxtb	r5, r5
 640              		.loc 1 1036 6 view .LVU196
 641 000a 012D     		cmp	r5, #1
 642 000c 06D0     		beq	.L61
1037:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1038:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Change CAN peripheral state */
1039:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->State = HAL_CAN_STATE_LISTENING;
1040:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1041:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Request leave initialisation */
1042:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
1043:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1044:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Get tick */
1045:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     tickstart = HAL_GetTick();
1046:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1047:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Wait the acknowledge */
1048:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
1049:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1050:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check for the Timeout */
1051:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
1052:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1053:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Update error code */
1054:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
1055:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1056:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Change CAN state */
1057:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->State = HAL_CAN_STATE_ERROR;
1058:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1059:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         return HAL_ERROR;
1060:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1061:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1062:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1063:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Reset the CAN ErrorCode */
1064:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode = HAL_CAN_ERROR_NONE;
1065:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1066:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Return function status */
1067:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_OK;
1068:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1069:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
1070:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1071:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code */
1072:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 643              		.loc 1 1072 5 is_stmt 1 view .LVU197
 644              		.loc 1 1072 21 is_stmt 0 view .LVU198
 645 000e 436A     		ldr	r3, [r0, #36]
 646 0010 43F40023 		orr	r3, r3, #524288
 647 0014 4362     		str	r3, [r0, #36]
1073:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
ARM GAS  /tmp/ccCenVhd.s 			page 34


1074:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 648              		.loc 1 1074 5 is_stmt 1 view .LVU199
 649              		.loc 1 1074 12 is_stmt 0 view .LVU200
 650 0016 0125     		movs	r5, #1
 651              	.LVL28:
 652              	.L58:
1075:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1076:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 653              		.loc 1 1076 1 view .LVU201
 654 0018 2846     		mov	r0, r5
 655 001a 70BD     		pop	{r4, r5, r6, pc}
 656              	.LVL29:
 657              	.L61:
1039:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 658              		.loc 1 1039 5 is_stmt 1 view .LVU202
1039:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 659              		.loc 1 1039 17 is_stmt 0 view .LVU203
 660 001c 0223     		movs	r3, #2
 661 001e 80F82030 		strb	r3, [r0, #32]
1042:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 662              		.loc 1 1042 5 is_stmt 1 view .LVU204
 663 0022 0268     		ldr	r2, [r0]
 664 0024 1368     		ldr	r3, [r2]
 665 0026 23F00103 		bic	r3, r3, #1
 666 002a 1360     		str	r3, [r2]
1045:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 667              		.loc 1 1045 5 view .LVU205
1045:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 668              		.loc 1 1045 17 is_stmt 0 view .LVU206
 669 002c FFF7FEFF 		bl	HAL_GetTick
 670              	.LVL30:
1045:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 671              		.loc 1 1045 17 view .LVU207
 672 0030 0646     		mov	r6, r0
 673              	.LVL31:
1048:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 674              		.loc 1 1048 5 is_stmt 1 view .LVU208
 675              	.L57:
1048:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 676              		.loc 1 1048 11 view .LVU209
1048:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 677              		.loc 1 1048 17 is_stmt 0 view .LVU210
 678 0032 2368     		ldr	r3, [r4]
1048:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 679              		.loc 1 1048 27 view .LVU211
 680 0034 5B68     		ldr	r3, [r3, #4]
1048:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 681              		.loc 1 1048 11 view .LVU212
 682 0036 13F0010F 		tst	r3, #1
 683 003a 0CD0     		beq	.L62
1051:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
 684              		.loc 1 1051 7 is_stmt 1 view .LVU213
1051:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
 685              		.loc 1 1051 12 is_stmt 0 view .LVU214
 686 003c FFF7FEFF 		bl	HAL_GetTick
 687              	.LVL32:
1051:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
ARM GAS  /tmp/ccCenVhd.s 			page 35


 688              		.loc 1 1051 26 view .LVU215
 689 0040 831B     		subs	r3, r0, r6
1051:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
 690              		.loc 1 1051 10 view .LVU216
 691 0042 0A2B     		cmp	r3, #10
 692 0044 F5D9     		bls	.L57
1054:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 693              		.loc 1 1054 9 is_stmt 1 view .LVU217
1054:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 694              		.loc 1 1054 25 is_stmt 0 view .LVU218
 695 0046 636A     		ldr	r3, [r4, #36]
 696 0048 43F40033 		orr	r3, r3, #131072
 697 004c 6362     		str	r3, [r4, #36]
1057:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 698              		.loc 1 1057 9 is_stmt 1 view .LVU219
1057:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 699              		.loc 1 1057 21 is_stmt 0 view .LVU220
 700 004e 0523     		movs	r3, #5
 701 0050 84F82030 		strb	r3, [r4, #32]
1059:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
 702              		.loc 1 1059 9 is_stmt 1 view .LVU221
1059:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
 703              		.loc 1 1059 16 is_stmt 0 view .LVU222
 704 0054 E0E7     		b	.L58
 705              	.L62:
1064:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 706              		.loc 1 1064 5 is_stmt 1 view .LVU223
1064:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 707              		.loc 1 1064 21 is_stmt 0 view .LVU224
 708 0056 0025     		movs	r5, #0
 709 0058 6562     		str	r5, [r4, #36]
1067:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 710              		.loc 1 1067 5 is_stmt 1 view .LVU225
1067:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 711              		.loc 1 1067 12 is_stmt 0 view .LVU226
 712 005a DDE7     		b	.L58
 713              		.cfi_endproc
 714              	.LFE137:
 716              		.section	.text.HAL_CAN_Stop,"ax",%progbits
 717              		.align	1
 718              		.global	HAL_CAN_Stop
 719              		.syntax unified
 720              		.thumb
 721              		.thumb_func
 722              		.fpu fpv4-sp-d16
 724              	HAL_CAN_Stop:
 725              	.LVL33:
 726              	.LFB138:
1077:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1078:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1079:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Stop the CAN module and enable access to configuration registers.
1080:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1081:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1082:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status
1083:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1084:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
1085:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
ARM GAS  /tmp/ccCenVhd.s 			page 36


 727              		.loc 1 1085 1 is_stmt 1 view -0
 728              		.cfi_startproc
 729              		@ args = 0, pretend = 0, frame = 0
 730              		@ frame_needed = 0, uses_anonymous_args = 0
 731              		.loc 1 1085 1 is_stmt 0 view .LVU228
 732 0000 38B5     		push	{r3, r4, r5, lr}
 733              	.LCFI6:
 734              		.cfi_def_cfa_offset 16
 735              		.cfi_offset 3, -16
 736              		.cfi_offset 4, -12
 737              		.cfi_offset 5, -8
 738              		.cfi_offset 14, -4
 739 0002 0446     		mov	r4, r0
1086:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t tickstart;
 740              		.loc 1 1086 3 is_stmt 1 view .LVU229
1087:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1088:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_LISTENING)
 741              		.loc 1 1088 3 view .LVU230
 742              		.loc 1 1088 11 is_stmt 0 view .LVU231
 743 0004 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 744 0008 DBB2     		uxtb	r3, r3
 745              		.loc 1 1088 6 view .LVU232
 746 000a 022B     		cmp	r3, #2
 747 000c 05D0     		beq	.L69
1089:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1090:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Request initialisation */
1091:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
1092:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1093:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Get tick */
1094:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     tickstart = HAL_GetTick();
1095:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1096:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Wait the acknowledge */
1097:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
1098:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1099:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check for the Timeout */
1100:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
1101:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1102:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Update error code */
1103:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
1104:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1105:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Change CAN state */
1106:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->State = HAL_CAN_STATE_ERROR;
1107:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1108:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         return HAL_ERROR;
1109:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1110:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1111:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1112:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Exit from sleep mode */
1113:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
1114:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1115:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Change CAN peripheral state */
1116:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->State = HAL_CAN_STATE_READY;
1117:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1118:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Return function status */
1119:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_OK;
1120:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1121:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
ARM GAS  /tmp/ccCenVhd.s 			page 37


1122:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1123:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code */
1124:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 748              		.loc 1 1124 5 is_stmt 1 view .LVU233
 749              		.loc 1 1124 21 is_stmt 0 view .LVU234
 750 000e 436A     		ldr	r3, [r0, #36]
 751 0010 43F48013 		orr	r3, r3, #1048576
 752 0014 4362     		str	r3, [r0, #36]
1125:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1126:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 753              		.loc 1 1126 5 is_stmt 1 view .LVU235
 754              		.loc 1 1126 12 is_stmt 0 view .LVU236
 755 0016 0120     		movs	r0, #1
 756              	.LVL34:
 757              	.L66:
1127:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1128:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 758              		.loc 1 1128 1 view .LVU237
 759 0018 38BD     		pop	{r3, r4, r5, pc}
 760              	.LVL35:
 761              	.L69:
1091:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 762              		.loc 1 1091 5 is_stmt 1 view .LVU238
 763 001a 0268     		ldr	r2, [r0]
 764 001c 1368     		ldr	r3, [r2]
 765 001e 43F00103 		orr	r3, r3, #1
 766 0022 1360     		str	r3, [r2]
1094:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 767              		.loc 1 1094 5 view .LVU239
1094:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 768              		.loc 1 1094 17 is_stmt 0 view .LVU240
 769 0024 FFF7FEFF 		bl	HAL_GetTick
 770              	.LVL36:
1094:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 771              		.loc 1 1094 17 view .LVU241
 772 0028 0546     		mov	r5, r0
 773              	.LVL37:
1097:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 774              		.loc 1 1097 5 is_stmt 1 view .LVU242
 775              	.L65:
1097:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 776              		.loc 1 1097 11 view .LVU243
1097:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 777              		.loc 1 1097 17 is_stmt 0 view .LVU244
 778 002a 2368     		ldr	r3, [r4]
1097:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 779              		.loc 1 1097 27 view .LVU245
 780 002c 5A68     		ldr	r2, [r3, #4]
1097:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 781              		.loc 1 1097 11 view .LVU246
 782 002e 12F0010F 		tst	r2, #1
 783 0032 0DD1     		bne	.L70
1100:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
 784              		.loc 1 1100 7 is_stmt 1 view .LVU247
1100:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
 785              		.loc 1 1100 12 is_stmt 0 view .LVU248
 786 0034 FFF7FEFF 		bl	HAL_GetTick
ARM GAS  /tmp/ccCenVhd.s 			page 38


 787              	.LVL38:
1100:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
 788              		.loc 1 1100 26 view .LVU249
 789 0038 431B     		subs	r3, r0, r5
1100:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
 790              		.loc 1 1100 10 view .LVU250
 791 003a 0A2B     		cmp	r3, #10
 792 003c F5D9     		bls	.L65
1103:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 793              		.loc 1 1103 9 is_stmt 1 view .LVU251
1103:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 794              		.loc 1 1103 25 is_stmt 0 view .LVU252
 795 003e 636A     		ldr	r3, [r4, #36]
 796 0040 43F40033 		orr	r3, r3, #131072
 797 0044 6362     		str	r3, [r4, #36]
1106:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 798              		.loc 1 1106 9 is_stmt 1 view .LVU253
1106:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 799              		.loc 1 1106 21 is_stmt 0 view .LVU254
 800 0046 0523     		movs	r3, #5
 801 0048 84F82030 		strb	r3, [r4, #32]
1108:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
 802              		.loc 1 1108 9 is_stmt 1 view .LVU255
1108:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
 803              		.loc 1 1108 16 is_stmt 0 view .LVU256
 804 004c 0120     		movs	r0, #1
 805 004e E3E7     		b	.L66
 806              	.L70:
1113:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 807              		.loc 1 1113 5 is_stmt 1 view .LVU257
 808 0050 1A68     		ldr	r2, [r3]
 809 0052 22F00202 		bic	r2, r2, #2
 810 0056 1A60     		str	r2, [r3]
1116:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 811              		.loc 1 1116 5 view .LVU258
1116:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 812              		.loc 1 1116 17 is_stmt 0 view .LVU259
 813 0058 0123     		movs	r3, #1
 814 005a 84F82030 		strb	r3, [r4, #32]
1119:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 815              		.loc 1 1119 5 is_stmt 1 view .LVU260
1119:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 816              		.loc 1 1119 12 is_stmt 0 view .LVU261
 817 005e 0020     		movs	r0, #0
 818 0060 DAE7     		b	.L66
 819              		.cfi_endproc
 820              	.LFE138:
 822              		.section	.text.HAL_CAN_DeInit,"ax",%progbits
 823              		.align	1
 824              		.global	HAL_CAN_DeInit
 825              		.syntax unified
 826              		.thumb
 827              		.thumb_func
 828              		.fpu fpv4-sp-d16
 830              	HAL_CAN_DeInit:
 831              	.LVL39:
 832              	.LFB133:
ARM GAS  /tmp/ccCenVhd.s 			page 39


 460:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check CAN handle */
 833              		.loc 1 460 1 is_stmt 1 view -0
 834              		.cfi_startproc
 835              		@ args = 0, pretend = 0, frame = 0
 836              		@ frame_needed = 0, uses_anonymous_args = 0
 462:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 837              		.loc 1 462 3 view .LVU263
 462:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 838              		.loc 1 462 6 is_stmt 0 view .LVU264
 839 0000 80B1     		cbz	r0, .L73
 460:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check CAN handle */
 840              		.loc 1 460 1 view .LVU265
 841 0002 10B5     		push	{r4, lr}
 842              	.LCFI7:
 843              		.cfi_def_cfa_offset 8
 844              		.cfi_offset 4, -8
 845              		.cfi_offset 14, -4
 846 0004 0446     		mov	r4, r0
 468:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 847              		.loc 1 468 3 is_stmt 1 view .LVU266
 471:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 848              		.loc 1 471 3 view .LVU267
 471:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 849              		.loc 1 471 9 is_stmt 0 view .LVU268
 850 0006 FFF7FEFF 		bl	HAL_CAN_Stop
 851              	.LVL40:
 484:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */
 852              		.loc 1 484 3 is_stmt 1 view .LVU269
 853 000a 2046     		mov	r0, r4
 854 000c FFF7FEFF 		bl	HAL_CAN_MspDeInit
 855              	.LVL41:
 488:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 856              		.loc 1 488 3 view .LVU270
 857 0010 2268     		ldr	r2, [r4]
 858 0012 1368     		ldr	r3, [r2]
 859 0014 43F40043 		orr	r3, r3, #32768
 860 0018 1360     		str	r3, [r2]
 491:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 861              		.loc 1 491 3 view .LVU271
 491:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 862              		.loc 1 491 19 is_stmt 0 view .LVU272
 863 001a 0020     		movs	r0, #0
 864 001c 6062     		str	r0, [r4, #36]
 494:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 865              		.loc 1 494 3 is_stmt 1 view .LVU273
 494:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 866              		.loc 1 494 15 is_stmt 0 view .LVU274
 867 001e 84F82000 		strb	r0, [r4, #32]
 497:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 868              		.loc 1 497 3 is_stmt 1 view .LVU275
 498:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 869              		.loc 1 498 1 is_stmt 0 view .LVU276
 870 0022 10BD     		pop	{r4, pc}
 871              	.LVL42:
 872              	.L73:
 873              	.LCFI8:
 874              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccCenVhd.s 			page 40


 875              		.cfi_restore 4
 876              		.cfi_restore 14
 464:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 877              		.loc 1 464 12 view .LVU277
 878 0024 0120     		movs	r0, #1
 879              	.LVL43:
 498:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 880              		.loc 1 498 1 view .LVU278
 881 0026 7047     		bx	lr
 882              		.cfi_endproc
 883              	.LFE133:
 885              		.section	.text.HAL_CAN_RequestSleep,"ax",%progbits
 886              		.align	1
 887              		.global	HAL_CAN_RequestSleep
 888              		.syntax unified
 889              		.thumb
 890              		.thumb_func
 891              		.fpu fpv4-sp-d16
 893              	HAL_CAN_RequestSleep:
 894              	.LVL44:
 895              	.LFB139:
1129:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1130:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1131:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Request the sleep mode (low power) entry.
1132:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         When returning from this function, Sleep mode will be entered
1133:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         as soon as the current CAN activity (transmission or reception
1134:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         of a CAN frame) has been completed.
1135:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1136:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1137:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status.
1138:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1139:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_RequestSleep(CAN_HandleTypeDef *hcan)
1140:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 896              		.loc 1 1140 1 is_stmt 1 view -0
 897              		.cfi_startproc
 898              		@ args = 0, pretend = 0, frame = 0
 899              		@ frame_needed = 0, uses_anonymous_args = 0
 900              		@ link register save eliminated.
1141:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 901              		.loc 1 1141 3 view .LVU280
 902              		.loc 1 1141 24 is_stmt 0 view .LVU281
 903 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 904              	.LVL45:
1142:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1143:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 905              		.loc 1 1143 3 is_stmt 1 view .LVU282
 906              		.loc 1 1143 38 is_stmt 0 view .LVU283
 907 0004 013B     		subs	r3, r3, #1
 908              	.LVL46:
 909              		.loc 1 1143 38 view .LVU284
 910 0006 DBB2     		uxtb	r3, r3
 911              		.loc 1 1143 6 view .LVU285
 912 0008 012B     		cmp	r3, #1
 913 000a 05D9     		bls	.L81
1144:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1145:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1146:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Request Sleep mode */
ARM GAS  /tmp/ccCenVhd.s 			page 41


1147:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
1148:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1149:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Return function status */
1150:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_OK;
1151:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1152:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
1153:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1154:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code */
1155:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 914              		.loc 1 1155 5 is_stmt 1 view .LVU286
 915              		.loc 1 1155 21 is_stmt 0 view .LVU287
 916 000c 436A     		ldr	r3, [r0, #36]
 917 000e 43F48023 		orr	r3, r3, #262144
 918 0012 4362     		str	r3, [r0, #36]
1156:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1157:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Return function status */
1158:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 919              		.loc 1 1158 5 is_stmt 1 view .LVU288
 920              		.loc 1 1158 12 is_stmt 0 view .LVU289
 921 0014 0120     		movs	r0, #1
 922              	.LVL47:
1159:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1160:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 923              		.loc 1 1160 1 view .LVU290
 924 0016 7047     		bx	lr
 925              	.LVL48:
 926              	.L81:
1147:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 927              		.loc 1 1147 5 is_stmt 1 view .LVU291
 928 0018 0268     		ldr	r2, [r0]
 929 001a 1368     		ldr	r3, [r2]
 930 001c 43F00203 		orr	r3, r3, #2
 931 0020 1360     		str	r3, [r2]
1150:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 932              		.loc 1 1150 5 view .LVU292
1150:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 933              		.loc 1 1150 12 is_stmt 0 view .LVU293
 934 0022 0020     		movs	r0, #0
 935              	.LVL49:
1150:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 936              		.loc 1 1150 12 view .LVU294
 937 0024 7047     		bx	lr
 938              		.cfi_endproc
 939              	.LFE139:
 941              		.section	.text.HAL_CAN_WakeUp,"ax",%progbits
 942              		.align	1
 943              		.global	HAL_CAN_WakeUp
 944              		.syntax unified
 945              		.thumb
 946              		.thumb_func
 947              		.fpu fpv4-sp-d16
 949              	HAL_CAN_WakeUp:
 950              	.LVL50:
 951              	.LFB140:
1161:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1162:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1163:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Wake up from sleep mode.
ARM GAS  /tmp/ccCenVhd.s 			page 42


1164:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         When returning with HAL_OK status from this function, Sleep mode
1165:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         is exited.
1166:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1167:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1168:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status.
1169:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1170:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_WakeUp(CAN_HandleTypeDef *hcan)
1171:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 952              		.loc 1 1171 1 is_stmt 1 view -0
 953              		.cfi_startproc
 954              		@ args = 0, pretend = 0, frame = 8
 955              		@ frame_needed = 0, uses_anonymous_args = 0
 956              		@ link register save eliminated.
 957              		.loc 1 1171 1 is_stmt 0 view .LVU296
 958 0000 82B0     		sub	sp, sp, #8
 959              	.LCFI9:
 960              		.cfi_def_cfa_offset 8
1172:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   __IO uint32_t count = 0;
 961              		.loc 1 1172 3 is_stmt 1 view .LVU297
 962              		.loc 1 1172 17 is_stmt 0 view .LVU298
 963 0002 0023     		movs	r3, #0
 964 0004 0193     		str	r3, [sp, #4]
1173:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t timeout = 1000000U;
 965              		.loc 1 1173 3 is_stmt 1 view .LVU299
 966              	.LVL51:
1174:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 967              		.loc 1 1174 3 view .LVU300
 968              		.loc 1 1174 24 is_stmt 0 view .LVU301
 969 0006 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 970              	.LVL52:
1175:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1176:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 971              		.loc 1 1176 3 is_stmt 1 view .LVU302
 972              		.loc 1 1176 38 is_stmt 0 view .LVU303
 973 000a 013B     		subs	r3, r3, #1
 974              	.LVL53:
 975              		.loc 1 1176 38 view .LVU304
 976 000c DBB2     		uxtb	r3, r3
 977              		.loc 1 1176 6 view .LVU305
 978 000e 012B     		cmp	r3, #1
 979 0010 18D8     		bhi	.L83
1177:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1178:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1179:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Wake up request */
1180:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 980              		.loc 1 1180 5 is_stmt 1 view .LVU306
 981 0012 0268     		ldr	r2, [r0]
 982 0014 1368     		ldr	r3, [r2]
 983 0016 23F00203 		bic	r3, r3, #2
 984 001a 1360     		str	r3, [r2]
 985              	.L86:
1181:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1182:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Wait sleep mode is exited */
1183:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     do
 986              		.loc 1 1183 5 view .LVU307
1184:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1185:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Increment counter */
ARM GAS  /tmp/ccCenVhd.s 			page 43


1186:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       count++;
 987              		.loc 1 1186 7 view .LVU308
 988              		.loc 1 1186 12 is_stmt 0 view .LVU309
 989 001c 019B     		ldr	r3, [sp, #4]
 990 001e 0133     		adds	r3, r3, #1
 991 0020 0193     		str	r3, [sp, #4]
1187:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1188:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check if timeout is reached */
1189:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if (count > timeout)
 992              		.loc 1 1189 7 is_stmt 1 view .LVU310
 993              		.loc 1 1189 17 is_stmt 0 view .LVU311
 994 0022 019A     		ldr	r2, [sp, #4]
 995              		.loc 1 1189 10 view .LVU312
 996 0024 0B4B     		ldr	r3, .L89
 997 0026 9A42     		cmp	r2, r3
 998 0028 06D8     		bhi	.L88
1190:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1191:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Update error code */
1192:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
1193:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1194:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         return HAL_ERROR;
1195:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1196:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1197:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U);
 999              		.loc 1 1197 11 is_stmt 1 view .LVU313
 1000              		.loc 1 1197 17 is_stmt 0 view .LVU314
 1001 002a 0368     		ldr	r3, [r0]
 1002              		.loc 1 1197 27 view .LVU315
 1003 002c 5B68     		ldr	r3, [r3, #4]
 1004              		.loc 1 1197 5 view .LVU316
 1005 002e 13F0020F 		tst	r3, #2
 1006 0032 F3D1     		bne	.L86
1198:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1199:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Return function status */
1200:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_OK;
 1007              		.loc 1 1200 12 view .LVU317
 1008 0034 0020     		movs	r0, #0
 1009              	.LVL54:
 1010              		.loc 1 1200 12 view .LVU318
 1011 0036 0AE0     		b	.L85
 1012              	.LVL55:
 1013              	.L88:
1192:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 1014              		.loc 1 1192 9 is_stmt 1 view .LVU319
1192:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 1015              		.loc 1 1192 25 is_stmt 0 view .LVU320
 1016 0038 436A     		ldr	r3, [r0, #36]
 1017 003a 43F40033 		orr	r3, r3, #131072
 1018 003e 4362     		str	r3, [r0, #36]
1194:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
 1019              		.loc 1 1194 9 is_stmt 1 view .LVU321
1194:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
 1020              		.loc 1 1194 16 is_stmt 0 view .LVU322
 1021 0040 0120     		movs	r0, #1
 1022              	.LVL56:
1194:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
 1023              		.loc 1 1194 16 view .LVU323
ARM GAS  /tmp/ccCenVhd.s 			page 44


 1024 0042 04E0     		b	.L85
 1025              	.LVL57:
 1026              	.L83:
1201:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1202:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
1203:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1204:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code */
1205:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1027              		.loc 1 1205 5 is_stmt 1 view .LVU324
 1028              		.loc 1 1205 21 is_stmt 0 view .LVU325
 1029 0044 436A     		ldr	r3, [r0, #36]
 1030 0046 43F48023 		orr	r3, r3, #262144
 1031 004a 4362     		str	r3, [r0, #36]
1206:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1207:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 1032              		.loc 1 1207 5 is_stmt 1 view .LVU326
 1033              		.loc 1 1207 12 is_stmt 0 view .LVU327
 1034 004c 0120     		movs	r0, #1
 1035              	.LVL58:
 1036              	.L85:
1208:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1209:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 1037              		.loc 1 1209 1 view .LVU328
 1038 004e 02B0     		add	sp, sp, #8
 1039              	.LCFI10:
 1040              		.cfi_def_cfa_offset 0
 1041              		@ sp needed
 1042 0050 7047     		bx	lr
 1043              	.L90:
 1044 0052 00BF     		.align	2
 1045              	.L89:
 1046 0054 40420F00 		.word	1000000
 1047              		.cfi_endproc
 1048              	.LFE140:
 1050              		.section	.text.HAL_CAN_IsSleepActive,"ax",%progbits
 1051              		.align	1
 1052              		.global	HAL_CAN_IsSleepActive
 1053              		.syntax unified
 1054              		.thumb
 1055              		.thumb_func
 1056              		.fpu fpv4-sp-d16
 1058              	HAL_CAN_IsSleepActive:
 1059              	.LVL59:
 1060              	.LFB141:
1210:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1211:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1212:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Check is sleep mode is active.
1213:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1214:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1215:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval Status
1216:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *          - 0 : Sleep mode is not active.
1217:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *          - 1 : Sleep mode is active.
1218:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1219:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** uint32_t HAL_CAN_IsSleepActive(CAN_HandleTypeDef *hcan)
1220:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1061              		.loc 1 1220 1 is_stmt 1 view -0
 1062              		.cfi_startproc
ARM GAS  /tmp/ccCenVhd.s 			page 45


 1063              		@ args = 0, pretend = 0, frame = 0
 1064              		@ frame_needed = 0, uses_anonymous_args = 0
 1065              		@ link register save eliminated.
1221:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t status = 0U;
 1066              		.loc 1 1221 3 view .LVU330
1222:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1067              		.loc 1 1222 3 view .LVU331
 1068              		.loc 1 1222 24 is_stmt 0 view .LVU332
 1069 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1070              	.LVL60:
1223:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1224:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1071              		.loc 1 1224 3 is_stmt 1 view .LVU333
 1072              		.loc 1 1224 38 is_stmt 0 view .LVU334
 1073 0004 013B     		subs	r3, r3, #1
 1074              	.LVL61:
 1075              		.loc 1 1224 38 view .LVU335
 1076 0006 DBB2     		uxtb	r3, r3
 1077              		.loc 1 1224 6 view .LVU336
 1078 0008 012B     		cmp	r3, #1
 1079 000a 01D9     		bls	.L95
1221:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1080              		.loc 1 1221 12 view .LVU337
 1081 000c 0020     		movs	r0, #0
 1082              	.LVL62:
1221:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1083              		.loc 1 1221 12 view .LVU338
 1084 000e 7047     		bx	lr
 1085              	.LVL63:
 1086              	.L95:
1225:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1226:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1227:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check Sleep mode */
1228:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 1087              		.loc 1 1228 5 is_stmt 1 view .LVU339
 1088              		.loc 1 1228 14 is_stmt 0 view .LVU340
 1089 0010 0368     		ldr	r3, [r0]
 1090              		.loc 1 1228 24 view .LVU341
 1091 0012 5868     		ldr	r0, [r3, #4]
 1092              	.LVL64:
 1093              		.loc 1 1228 8 view .LVU342
 1094 0014 10F00200 		ands	r0, r0, #2
 1095 0018 00D1     		bne	.L94
 1096 001a 7047     		bx	lr
 1097              	.L94:
1229:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1230:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       status = 1U;
 1098              		.loc 1 1230 14 view .LVU343
 1099 001c 0120     		movs	r0, #1
 1100              	.LVL65:
1231:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1232:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1233:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1234:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Return function status */
1235:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   return status;
 1101              		.loc 1 1235 3 is_stmt 1 view .LVU344
1236:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
ARM GAS  /tmp/ccCenVhd.s 			page 46


 1102              		.loc 1 1236 1 is_stmt 0 view .LVU345
 1103 001e 7047     		bx	lr
 1104              		.cfi_endproc
 1105              	.LFE141:
 1107              		.section	.text.HAL_CAN_AddTxMessage,"ax",%progbits
 1108              		.align	1
 1109              		.global	HAL_CAN_AddTxMessage
 1110              		.syntax unified
 1111              		.thumb
 1112              		.thumb_func
 1113              		.fpu fpv4-sp-d16
 1115              	HAL_CAN_AddTxMessage:
 1116              	.LVL66:
 1117              	.LFB142:
1237:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1238:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1239:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Add a message to the first free Tx mailbox and activate the
1240:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         corresponding transmission request.
1241:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1242:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1243:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  pHeader pointer to a CAN_TxHeaderTypeDef structure.
1244:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  aData array containing the payload of the Tx frame.
1245:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  pTxMailbox pointer to a variable where the function will return
1246:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the TxMailbox used to store the Tx message.
1247:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
1248:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status
1249:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1250:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8
1251:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1118              		.loc 1 1251 1 is_stmt 1 view -0
 1119              		.cfi_startproc
 1120              		@ args = 0, pretend = 0, frame = 0
 1121              		@ frame_needed = 0, uses_anonymous_args = 0
 1122              		@ link register save eliminated.
 1123              		.loc 1 1251 1 is_stmt 0 view .LVU347
 1124 0000 70B4     		push	{r4, r5, r6}
 1125              	.LCFI11:
 1126              		.cfi_def_cfa_offset 12
 1127              		.cfi_offset 4, -12
 1128              		.cfi_offset 5, -8
 1129              		.cfi_offset 6, -4
1252:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t transmitmailbox;
 1130              		.loc 1 1252 3 is_stmt 1 view .LVU348
1253:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1131              		.loc 1 1253 3 view .LVU349
 1132              		.loc 1 1253 24 is_stmt 0 view .LVU350
 1133 0002 90F82040 		ldrb	r4, [r0, #32]	@ zero_extendqisi2
 1134              	.LVL67:
1254:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t tsr = READ_REG(hcan->Instance->TSR);
 1135              		.loc 1 1254 3 is_stmt 1 view .LVU351
 1136              		.loc 1 1254 18 is_stmt 0 view .LVU352
 1137 0006 0568     		ldr	r5, [r0]
 1138              		.loc 1 1254 12 view .LVU353
 1139 0008 AD68     		ldr	r5, [r5, #8]
 1140              	.LVL68:
1255:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1256:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check the parameters */
ARM GAS  /tmp/ccCenVhd.s 			page 47


1257:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_IDTYPE(pHeader->IDE));
 1141              		.loc 1 1257 3 is_stmt 1 view .LVU354
1258:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_RTR(pHeader->RTR));
 1142              		.loc 1 1258 3 view .LVU355
1259:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_DLC(pHeader->DLC));
 1143              		.loc 1 1259 3 view .LVU356
1260:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (pHeader->IDE == CAN_ID_STD)
 1144              		.loc 1 1260 3 view .LVU357
1261:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1262:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_STDID(pHeader->StdId));
1263:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1264:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
1265:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1266:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     assert_param(IS_CAN_EXTID(pHeader->ExtId));
 1145              		.loc 1 1266 5 view .LVU358
1267:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1268:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));
 1146              		.loc 1 1268 3 view .LVU359
1269:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1270:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1147              		.loc 1 1270 3 view .LVU360
 1148              		.loc 1 1270 38 is_stmt 0 view .LVU361
 1149 000a 013C     		subs	r4, r4, #1
 1150              	.LVL69:
 1151              		.loc 1 1270 38 view .LVU362
 1152 000c E4B2     		uxtb	r4, r4
 1153              		.loc 1 1270 6 view .LVU363
 1154 000e 012C     		cmp	r4, #1
 1155 0010 65D8     		bhi	.L97
1271:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1272:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1273:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check that all the Tx mailboxes are not full */
1274:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (((tsr & CAN_TSR_TME0) != 0U) ||
 1156              		.loc 1 1274 5 is_stmt 1 view .LVU364
 1157              		.loc 1 1274 8 is_stmt 0 view .LVU365
 1158 0012 15F0E05F 		tst	r5, #469762048
 1159 0016 5CD0     		beq	.L98
1275:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((tsr & CAN_TSR_TME1) != 0U) ||
1276:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         ((tsr & CAN_TSR_TME2) != 0U))
1277:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1278:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Select an empty transmit mailbox */
1279:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 1160              		.loc 1 1279 7 is_stmt 1 view .LVU366
 1161              		.loc 1 1279 23 is_stmt 0 view .LVU367
 1162 0018 C5F30164 		ubfx	r4, r5, #24, #2
 1163              	.LVL70:
1280:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1281:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check transmit mailbox value */
1282:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if (transmitmailbox > 2U)
 1164              		.loc 1 1282 7 is_stmt 1 view .LVU368
 1165              		.loc 1 1282 10 is_stmt 0 view .LVU369
 1166 001c 022C     		cmp	r4, #2
 1167 001e 05D9     		bls	.L99
1283:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1284:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Update error code */
1285:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 1168              		.loc 1 1285 9 is_stmt 1 view .LVU370
ARM GAS  /tmp/ccCenVhd.s 			page 48


 1169              		.loc 1 1285 25 is_stmt 0 view .LVU371
 1170 0020 436A     		ldr	r3, [r0, #36]
 1171              	.LVL71:
 1172              		.loc 1 1285 25 view .LVU372
 1173 0022 43F40003 		orr	r3, r3, #8388608
 1174 0026 4362     		str	r3, [r0, #36]
1286:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1287:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         return HAL_ERROR;
 1175              		.loc 1 1287 9 is_stmt 1 view .LVU373
 1176              		.loc 1 1287 16 is_stmt 0 view .LVU374
 1177 0028 0120     		movs	r0, #1
 1178              	.LVL72:
 1179              		.loc 1 1287 16 view .LVU375
 1180 002a 5DE0     		b	.L100
 1181              	.LVL73:
 1182              	.L99:
1288:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1289:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1290:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Store the Tx mailbox */
1291:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       *pTxMailbox = (uint32_t)1 << transmitmailbox;
 1183              		.loc 1 1291 7 is_stmt 1 view .LVU376
 1184              		.loc 1 1291 33 is_stmt 0 view .LVU377
 1185 002c 0125     		movs	r5, #1
 1186              	.LVL74:
 1187              		.loc 1 1291 33 view .LVU378
 1188 002e A540     		lsls	r5, r5, r4
 1189              		.loc 1 1291 19 view .LVU379
 1190 0030 1D60     		str	r5, [r3]
1292:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1293:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Set up the Id */
1294:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if (pHeader->IDE == CAN_ID_STD)
 1191              		.loc 1 1294 7 is_stmt 1 view .LVU380
 1192              		.loc 1 1294 18 is_stmt 0 view .LVU381
 1193 0032 8B68     		ldr	r3, [r1, #8]
 1194              	.LVL75:
 1195              		.loc 1 1294 10 view .LVU382
 1196 0034 002B     		cmp	r3, #0
 1197 0036 39D1     		bne	.L101
1295:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1296:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 1198              		.loc 1 1296 9 is_stmt 1 view .LVU383
 1199              		.loc 1 1296 68 is_stmt 0 view .LVU384
 1200 0038 0E68     		ldr	r6, [r1]
1297:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                                            pHeader->RTR);
 1201              		.loc 1 1297 67 view .LVU385
 1202 003a CB68     		ldr	r3, [r1, #12]
1296:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                                            pHeader->RTR);
 1203              		.loc 1 1296 13 view .LVU386
 1204 003c 0568     		ldr	r5, [r0]
1296:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                                            pHeader->RTR);
 1205              		.loc 1 1296 98 view .LVU387
 1206 003e 43EA4656 		orr	r6, r3, r6, lsl #21
1296:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                                            pHeader->RTR);
 1207              		.loc 1 1296 57 view .LVU388
 1208 0042 04F11803 		add	r3, r4, #24
 1209 0046 1B01     		lsls	r3, r3, #4
 1210 0048 EE50     		str	r6, [r5, r3]
ARM GAS  /tmp/ccCenVhd.s 			page 49


 1211              	.L102:
1298:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1299:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       else
1300:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1301:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
1302:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                                            pHeader->IDE |
1303:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                                            pHeader->RTR);
1304:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1305:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1306:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Set up the DLC */
1307:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 1212              		.loc 1 1307 7 is_stmt 1 view .LVU389
 1213              		.loc 1 1307 11 is_stmt 0 view .LVU390
 1214 004a 0368     		ldr	r3, [r0]
 1215              		.loc 1 1307 66 view .LVU391
 1216 004c 0D69     		ldr	r5, [r1, #16]
 1217              		.loc 1 1307 56 view .LVU392
 1218 004e 04F11806 		add	r6, r4, #24
 1219 0052 03EB0613 		add	r3, r3, r6, lsl #4
 1220 0056 5D60     		str	r5, [r3, #4]
1308:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1309:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Set up the Transmit Global Time mode */
1310:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if (pHeader->TransmitGlobalTime == ENABLE)
 1221              		.loc 1 1310 7 is_stmt 1 view .LVU393
 1222              		.loc 1 1310 18 is_stmt 0 view .LVU394
 1223 0058 0B7D     		ldrb	r3, [r1, #20]	@ zero_extendqisi2
 1224              		.loc 1 1310 10 view .LVU395
 1225 005a 012B     		cmp	r3, #1
 1226 005c 31D0     		beq	.L105
 1227              	.LVL76:
 1228              	.L103:
1311:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1312:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
1313:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1314:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1315:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Set up the data field */
1316:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 1229              		.loc 1 1316 7 is_stmt 1 view .LVU396
 1230 005e D179     		ldrb	r1, [r2, #7]	@ zero_extendqisi2
 1231 0060 9379     		ldrb	r3, [r2, #6]	@ zero_extendqisi2
 1232 0062 1B04     		lsls	r3, r3, #16
 1233 0064 43EA0163 		orr	r3, r3, r1, lsl #24
 1234 0068 5179     		ldrb	r1, [r2, #5]	@ zero_extendqisi2
 1235 006a 43EA0123 		orr	r3, r3, r1, lsl #8
 1236 006e 1579     		ldrb	r5, [r2, #4]	@ zero_extendqisi2
 1237 0070 0168     		ldr	r1, [r0]
 1238 0072 2B43     		orrs	r3, r3, r5
 1239 0074 01EB0411 		add	r1, r1, r4, lsl #4
 1240 0078 C1F88C31 		str	r3, [r1, #396]
1317:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                 ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
1318:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                 ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
1319:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                 ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
1320:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                 ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
1321:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 1241              		.loc 1 1321 7 view .LVU397
 1242 007c D178     		ldrb	r1, [r2, #3]	@ zero_extendqisi2
 1243 007e 9378     		ldrb	r3, [r2, #2]	@ zero_extendqisi2
ARM GAS  /tmp/ccCenVhd.s 			page 50


 1244 0080 1B04     		lsls	r3, r3, #16
 1245 0082 43EA0163 		orr	r3, r3, r1, lsl #24
 1246 0086 5178     		ldrb	r1, [r2, #1]	@ zero_extendqisi2
 1247 0088 43EA0123 		orr	r3, r3, r1, lsl #8
 1248 008c 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 1249 008e 0268     		ldr	r2, [r0]
 1250              	.LVL77:
 1251              		.loc 1 1321 7 is_stmt 0 view .LVU398
 1252 0090 0B43     		orrs	r3, r3, r1
 1253 0092 02EB0412 		add	r2, r2, r4, lsl #4
 1254 0096 C2F88831 		str	r3, [r2, #392]
1322:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                 ((uint32_t)aData[3] << CAN_TDL0R_DATA3_Pos) |
1323:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                 ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
1324:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                 ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
1325:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                 ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));
1326:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1327:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Request transmission */
1328:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 1255              		.loc 1 1328 7 is_stmt 1 view .LVU399
 1256 009a 0268     		ldr	r2, [r0]
 1257 009c 1834     		adds	r4, r4, #24
 1258              	.LVL78:
 1259              		.loc 1 1328 7 is_stmt 0 view .LVU400
 1260 009e 2401     		lsls	r4, r4, #4
 1261 00a0 1359     		ldr	r3, [r2, r4]
 1262 00a2 43F00103 		orr	r3, r3, #1
 1263 00a6 1351     		str	r3, [r2, r4]
1329:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1330:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Return function status */
1331:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       return HAL_OK;
 1264              		.loc 1 1331 7 is_stmt 1 view .LVU401
 1265              		.loc 1 1331 14 is_stmt 0 view .LVU402
 1266 00a8 0020     		movs	r0, #0
 1267              	.LVL79:
 1268              		.loc 1 1331 14 view .LVU403
 1269 00aa 1DE0     		b	.L100
 1270              	.LVL80:
 1271              	.L101:
1301:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                                            pHeader->IDE |
 1272              		.loc 1 1301 9 is_stmt 1 view .LVU404
1301:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                                            pHeader->IDE |
 1273              		.loc 1 1301 68 is_stmt 0 view .LVU405
 1274 00ac 4D68     		ldr	r5, [r1, #4]
1301:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                                            pHeader->IDE |
 1275              		.loc 1 1301 98 view .LVU406
 1276 00ae 43EAC503 		orr	r3, r3, r5, lsl #3
1303:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
 1277              		.loc 1 1303 67 view .LVU407
 1278 00b2 CD68     		ldr	r5, [r1, #12]
1301:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                                            pHeader->IDE |
 1279              		.loc 1 1301 13 view .LVU408
 1280 00b4 0668     		ldr	r6, [r0]
1302:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                                            pHeader->RTR);
 1281              		.loc 1 1302 73 view .LVU409
 1282 00b6 2B43     		orrs	r3, r3, r5
1301:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                                                            pHeader->IDE |
 1283              		.loc 1 1301 57 view .LVU410
ARM GAS  /tmp/ccCenVhd.s 			page 51


 1284 00b8 04F11805 		add	r5, r4, #24
 1285 00bc 2D01     		lsls	r5, r5, #4
 1286 00be 7351     		str	r3, [r6, r5]
 1287 00c0 C3E7     		b	.L102
 1288              	.L105:
1312:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
 1289              		.loc 1 1312 9 is_stmt 1 view .LVU411
 1290 00c2 0368     		ldr	r3, [r0]
 1291 00c4 03EB0613 		add	r3, r3, r6, lsl #4
 1292 00c8 5968     		ldr	r1, [r3, #4]
 1293              	.LVL81:
1312:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
 1294              		.loc 1 1312 9 is_stmt 0 view .LVU412
 1295 00ca 41F48071 		orr	r1, r1, #256
 1296 00ce 5960     		str	r1, [r3, #4]
 1297 00d0 C5E7     		b	.L103
 1298              	.LVL82:
 1299              	.L98:
1332:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1333:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     else
1334:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1335:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Update error code */
1336:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 1300              		.loc 1 1336 7 is_stmt 1 view .LVU413
 1301              		.loc 1 1336 23 is_stmt 0 view .LVU414
 1302 00d2 436A     		ldr	r3, [r0, #36]
 1303              	.LVL83:
 1304              		.loc 1 1336 23 view .LVU415
 1305 00d4 43F40013 		orr	r3, r3, #2097152
 1306 00d8 4362     		str	r3, [r0, #36]
1337:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1338:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       return HAL_ERROR;
 1307              		.loc 1 1338 7 is_stmt 1 view .LVU416
 1308              		.loc 1 1338 14 is_stmt 0 view .LVU417
 1309 00da 0120     		movs	r0, #1
 1310              	.LVL84:
 1311              		.loc 1 1338 14 view .LVU418
 1312 00dc 04E0     		b	.L100
 1313              	.LVL85:
 1314              	.L97:
1339:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1340:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1341:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
1342:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1343:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code */
1344:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1315              		.loc 1 1344 5 is_stmt 1 view .LVU419
 1316              		.loc 1 1344 21 is_stmt 0 view .LVU420
 1317 00de 436A     		ldr	r3, [r0, #36]
 1318              	.LVL86:
 1319              		.loc 1 1344 21 view .LVU421
 1320 00e0 43F48023 		orr	r3, r3, #262144
 1321 00e4 4362     		str	r3, [r0, #36]
1345:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1346:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 1322              		.loc 1 1346 5 is_stmt 1 view .LVU422
 1323              		.loc 1 1346 12 is_stmt 0 view .LVU423
ARM GAS  /tmp/ccCenVhd.s 			page 52


 1324 00e6 0120     		movs	r0, #1
 1325              	.LVL87:
 1326              	.L100:
1347:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1348:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 1327              		.loc 1 1348 1 view .LVU424
 1328 00e8 70BC     		pop	{r4, r5, r6}
 1329              	.LCFI12:
 1330              		.cfi_restore 6
 1331              		.cfi_restore 5
 1332              		.cfi_restore 4
 1333              		.cfi_def_cfa_offset 0
 1334 00ea 7047     		bx	lr
 1335              		.cfi_endproc
 1336              	.LFE142:
 1338              		.section	.text.HAL_CAN_AbortTxRequest,"ax",%progbits
 1339              		.align	1
 1340              		.global	HAL_CAN_AbortTxRequest
 1341              		.syntax unified
 1342              		.thumb
 1343              		.thumb_func
 1344              		.fpu fpv4-sp-d16
 1346              	HAL_CAN_AbortTxRequest:
 1347              	.LVL88:
 1348              	.LFB143:
1349:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1350:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1351:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Abort transmission requests
1352:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1353:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1354:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  TxMailboxes List of the Tx Mailboxes to abort.
1355:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
1356:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status
1357:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1358:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
1359:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1349              		.loc 1 1359 1 is_stmt 1 view -0
 1350              		.cfi_startproc
 1351              		@ args = 0, pretend = 0, frame = 0
 1352              		@ frame_needed = 0, uses_anonymous_args = 0
 1353              		@ link register save eliminated.
1360:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1354              		.loc 1 1360 3 view .LVU426
 1355              		.loc 1 1360 24 is_stmt 0 view .LVU427
 1356 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1357              	.LVL89:
1361:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1362:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check function parameters */
1363:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));
 1358              		.loc 1 1363 3 is_stmt 1 view .LVU428
1364:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1365:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1359              		.loc 1 1365 3 view .LVU429
 1360              		.loc 1 1365 38 is_stmt 0 view .LVU430
 1361 0004 013B     		subs	r3, r3, #1
 1362              	.LVL90:
 1363              		.loc 1 1365 38 view .LVU431
ARM GAS  /tmp/ccCenVhd.s 			page 53


 1364 0006 DBB2     		uxtb	r3, r3
 1365              		.loc 1 1365 6 view .LVU432
 1366 0008 012B     		cmp	r3, #1
 1367 000a 05D9     		bls	.L112
1366:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1367:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1368:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check Tx Mailbox 0 */
1369:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((TxMailboxes & CAN_TX_MAILBOX0) != 0U)
1370:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1371:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Add cancellation request for Tx Mailbox 0 */
1372:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
1373:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1374:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1375:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check Tx Mailbox 1 */
1376:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((TxMailboxes & CAN_TX_MAILBOX1) != 0U)
1377:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1378:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Add cancellation request for Tx Mailbox 1 */
1379:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
1380:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1381:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1382:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check Tx Mailbox 2 */
1383:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((TxMailboxes & CAN_TX_MAILBOX2) != 0U)
1384:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1385:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Add cancellation request for Tx Mailbox 2 */
1386:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
1387:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1388:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1389:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Return function status */
1390:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_OK;
1391:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1392:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
1393:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1394:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code */
1395:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1368              		.loc 1 1395 5 is_stmt 1 view .LVU433
 1369              		.loc 1 1395 21 is_stmt 0 view .LVU434
 1370 000c 436A     		ldr	r3, [r0, #36]
 1371 000e 43F48023 		orr	r3, r3, #262144
 1372 0012 4362     		str	r3, [r0, #36]
1396:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1397:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 1373              		.loc 1 1397 5 is_stmt 1 view .LVU435
 1374              		.loc 1 1397 12 is_stmt 0 view .LVU436
 1375 0014 0120     		movs	r0, #1
 1376              	.LVL91:
1398:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1399:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 1377              		.loc 1 1399 1 view .LVU437
 1378 0016 7047     		bx	lr
 1379              	.LVL92:
 1380              	.L112:
1369:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 1381              		.loc 1 1369 5 is_stmt 1 view .LVU438
1369:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 1382              		.loc 1 1369 8 is_stmt 0 view .LVU439
 1383 0018 11F0010F 		tst	r1, #1
 1384 001c 04D0     		beq	.L108
ARM GAS  /tmp/ccCenVhd.s 			page 54


1372:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 1385              		.loc 1 1372 7 is_stmt 1 view .LVU440
 1386 001e 0268     		ldr	r2, [r0]
 1387 0020 9368     		ldr	r3, [r2, #8]
 1388 0022 43F08003 		orr	r3, r3, #128
 1389 0026 9360     		str	r3, [r2, #8]
 1390              	.L108:
1376:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 1391              		.loc 1 1376 5 view .LVU441
1376:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 1392              		.loc 1 1376 8 is_stmt 0 view .LVU442
 1393 0028 11F0020F 		tst	r1, #2
 1394 002c 04D0     		beq	.L109
1379:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 1395              		.loc 1 1379 7 is_stmt 1 view .LVU443
 1396 002e 0268     		ldr	r2, [r0]
 1397 0030 9368     		ldr	r3, [r2, #8]
 1398 0032 43F40043 		orr	r3, r3, #32768
 1399 0036 9360     		str	r3, [r2, #8]
 1400              	.L109:
1383:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 1401              		.loc 1 1383 5 view .LVU444
1383:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 1402              		.loc 1 1383 8 is_stmt 0 view .LVU445
 1403 0038 11F0040F 		tst	r1, #4
 1404 003c 04D0     		beq	.L110
1386:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 1405              		.loc 1 1386 7 is_stmt 1 view .LVU446
 1406 003e 0268     		ldr	r2, [r0]
 1407 0040 9368     		ldr	r3, [r2, #8]
 1408 0042 43F40003 		orr	r3, r3, #8388608
 1409 0046 9360     		str	r3, [r2, #8]
 1410              	.L110:
1390:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 1411              		.loc 1 1390 5 view .LVU447
1390:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 1412              		.loc 1 1390 12 is_stmt 0 view .LVU448
 1413 0048 0020     		movs	r0, #0
 1414              	.LVL93:
1390:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 1415              		.loc 1 1390 12 view .LVU449
 1416 004a 7047     		bx	lr
 1417              		.cfi_endproc
 1418              	.LFE143:
 1420              		.section	.text.HAL_CAN_GetTxMailboxesFreeLevel,"ax",%progbits
 1421              		.align	1
 1422              		.global	HAL_CAN_GetTxMailboxesFreeLevel
 1423              		.syntax unified
 1424              		.thumb
 1425              		.thumb_func
 1426              		.fpu fpv4-sp-d16
 1428              	HAL_CAN_GetTxMailboxesFreeLevel:
 1429              	.LVL94:
 1430              	.LFB144:
1400:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1401:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1402:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Return Tx Mailboxes free level: number of free Tx Mailboxes.
ARM GAS  /tmp/ccCenVhd.s 			page 55


1403:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1404:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1405:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval Number of free Tx Mailboxes.
1406:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1407:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
1408:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1431              		.loc 1 1408 1 is_stmt 1 view -0
 1432              		.cfi_startproc
 1433              		@ args = 0, pretend = 0, frame = 0
 1434              		@ frame_needed = 0, uses_anonymous_args = 0
 1435              		@ link register save eliminated.
1409:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t freelevel = 0U;
 1436              		.loc 1 1409 3 view .LVU451
1410:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1437              		.loc 1 1410 3 view .LVU452
 1438              		.loc 1 1410 24 is_stmt 0 view .LVU453
 1439 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1440              	.LVL95:
1411:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1412:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1441              		.loc 1 1412 3 is_stmt 1 view .LVU454
 1442              		.loc 1 1412 38 is_stmt 0 view .LVU455
 1443 0004 013B     		subs	r3, r3, #1
 1444              	.LVL96:
 1445              		.loc 1 1412 38 view .LVU456
 1446 0006 DBB2     		uxtb	r3, r3
 1447              		.loc 1 1412 6 view .LVU457
 1448 0008 012B     		cmp	r3, #1
 1449 000a 01D9     		bls	.L119
1409:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1450              		.loc 1 1409 12 view .LVU458
 1451 000c 0020     		movs	r0, #0
 1452              	.LVL97:
1413:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1414:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1415:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check Tx Mailbox 0 status */
1416:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
1417:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1418:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       freelevel++;
1419:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1420:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1421:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check Tx Mailbox 1 status */
1422:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
1423:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1424:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       freelevel++;
1425:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1426:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1427:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check Tx Mailbox 2 status */
1428:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
1429:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1430:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       freelevel++;
1431:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1432:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1433:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1434:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Return Tx Mailboxes free level */
1435:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   return freelevel;
 1453              		.loc 1 1435 3 is_stmt 1 view .LVU459
ARM GAS  /tmp/ccCenVhd.s 			page 56


 1454              	.L113:
1436:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 1455              		.loc 1 1436 1 is_stmt 0 view .LVU460
 1456 000e 7047     		bx	lr
 1457              	.LVL98:
 1458              	.L119:
1416:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 1459              		.loc 1 1416 5 is_stmt 1 view .LVU461
1416:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 1460              		.loc 1 1416 14 is_stmt 0 view .LVU462
 1461 0010 0368     		ldr	r3, [r0]
1416:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 1462              		.loc 1 1416 24 view .LVU463
 1463 0012 9868     		ldr	r0, [r3, #8]
 1464              	.LVL99:
1416:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 1465              		.loc 1 1416 8 view .LVU464
 1466 0014 10F08060 		ands	r0, r0, #67108864
 1467 0018 00D0     		beq	.L115
1418:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 1468              		.loc 1 1418 16 view .LVU465
 1469 001a 0120     		movs	r0, #1
 1470              	.L115:
 1471              	.LVL100:
1422:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 1472              		.loc 1 1422 5 is_stmt 1 view .LVU466
1422:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 1473              		.loc 1 1422 24 is_stmt 0 view .LVU467
 1474 001c 9A68     		ldr	r2, [r3, #8]
1422:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 1475              		.loc 1 1422 8 view .LVU468
 1476 001e 12F0006F 		tst	r2, #134217728
 1477 0022 00D0     		beq	.L116
1424:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 1478              		.loc 1 1424 7 is_stmt 1 view .LVU469
1424:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 1479              		.loc 1 1424 16 is_stmt 0 view .LVU470
 1480 0024 0130     		adds	r0, r0, #1
 1481              	.LVL101:
 1482              	.L116:
1428:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 1483              		.loc 1 1428 5 is_stmt 1 view .LVU471
1428:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 1484              		.loc 1 1428 24 is_stmt 0 view .LVU472
 1485 0026 9B68     		ldr	r3, [r3, #8]
1428:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 1486              		.loc 1 1428 8 view .LVU473
 1487 0028 13F0805F 		tst	r3, #268435456
 1488 002c EFD0     		beq	.L113
1430:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 1489              		.loc 1 1430 7 is_stmt 1 view .LVU474
1430:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 1490              		.loc 1 1430 16 is_stmt 0 view .LVU475
 1491 002e 0130     		adds	r0, r0, #1
 1492              	.LVL102:
1430:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 1493              		.loc 1 1430 16 view .LVU476
ARM GAS  /tmp/ccCenVhd.s 			page 57


 1494 0030 7047     		bx	lr
 1495              		.cfi_endproc
 1496              	.LFE144:
 1498              		.section	.text.HAL_CAN_IsTxMessagePending,"ax",%progbits
 1499              		.align	1
 1500              		.global	HAL_CAN_IsTxMessagePending
 1501              		.syntax unified
 1502              		.thumb
 1503              		.thumb_func
 1504              		.fpu fpv4-sp-d16
 1506              	HAL_CAN_IsTxMessagePending:
 1507              	.LVL103:
 1508              	.LFB145:
1437:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1438:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1439:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Check if a transmission request is pending on the selected Tx
1440:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         Mailboxes.
1441:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1442:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1443:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  TxMailboxes List of Tx Mailboxes to check.
1444:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
1445:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval Status
1446:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *          - 0 : No pending transmission request on any selected Tx Mailboxes.
1447:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *          - 1 : Pending transmission request on at least one of the selected
1448:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *                Tx Mailbox.
1449:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1450:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
1451:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1509              		.loc 1 1451 1 is_stmt 1 view -0
 1510              		.cfi_startproc
 1511              		@ args = 0, pretend = 0, frame = 0
 1512              		@ frame_needed = 0, uses_anonymous_args = 0
 1513              		@ link register save eliminated.
1452:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t status = 0U;
 1514              		.loc 1 1452 3 view .LVU478
1453:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1515              		.loc 1 1453 3 view .LVU479
 1516              		.loc 1 1453 24 is_stmt 0 view .LVU480
 1517 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1518              	.LVL104:
1454:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1455:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check function parameters */
1456:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));
 1519              		.loc 1 1456 3 is_stmt 1 view .LVU481
1457:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1458:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1520              		.loc 1 1458 3 view .LVU482
 1521              		.loc 1 1458 38 is_stmt 0 view .LVU483
 1522 0004 013B     		subs	r3, r3, #1
 1523              	.LVL105:
 1524              		.loc 1 1458 38 view .LVU484
 1525 0006 DBB2     		uxtb	r3, r3
 1526              		.loc 1 1458 6 view .LVU485
 1527 0008 012B     		cmp	r3, #1
 1528 000a 01D9     		bls	.L124
1452:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1529              		.loc 1 1452 12 view .LVU486
ARM GAS  /tmp/ccCenVhd.s 			page 58


 1530 000c 0020     		movs	r0, #0
 1531              	.LVL106:
1452:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1532              		.loc 1 1452 12 view .LVU487
 1533 000e 7047     		bx	lr
 1534              	.LVL107:
 1535              	.L124:
1459:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1460:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1461:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check pending transmission request on the selected Tx Mailboxes */
1462:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_P
 1536              		.loc 1 1462 5 is_stmt 1 view .LVU488
 1537              		.loc 1 1462 14 is_stmt 0 view .LVU489
 1538 0010 0368     		ldr	r3, [r0]
 1539              		.loc 1 1462 24 view .LVU490
 1540 0012 9B68     		ldr	r3, [r3, #8]
 1541              		.loc 1 1462 30 view .LVU491
 1542 0014 03EA8163 		and	r3, r3, r1, lsl #26
 1543              		.loc 1 1462 8 view .LVU492
 1544 0018 B3EB816F 		cmp	r3, r1, lsl #26
 1545 001c 01D0     		beq	.L125
1463:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1464:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       status = 1U;
 1546              		.loc 1 1464 14 view .LVU493
 1547 001e 0120     		movs	r0, #1
 1548              	.LVL108:
1465:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1466:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1467:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1468:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Return status */
1469:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   return status;
 1549              		.loc 1 1469 3 is_stmt 1 view .LVU494
1470:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 1550              		.loc 1 1470 1 is_stmt 0 view .LVU495
 1551 0020 7047     		bx	lr
 1552              	.LVL109:
 1553              	.L125:
1452:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1554              		.loc 1 1452 12 view .LVU496
 1555 0022 0020     		movs	r0, #0
 1556              	.LVL110:
1452:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1557              		.loc 1 1452 12 view .LVU497
 1558 0024 7047     		bx	lr
 1559              		.cfi_endproc
 1560              	.LFE145:
 1562              		.section	.text.HAL_CAN_GetTxTimestamp,"ax",%progbits
 1563              		.align	1
 1564              		.global	HAL_CAN_GetTxTimestamp
 1565              		.syntax unified
 1566              		.thumb
 1567              		.thumb_func
 1568              		.fpu fpv4-sp-d16
 1570              	HAL_CAN_GetTxTimestamp:
 1571              	.LVL111:
 1572              	.LFB146:
1471:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
ARM GAS  /tmp/ccCenVhd.s 			page 59


1472:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1473:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Return timestamp of Tx message sent, if time triggered communication
1474:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             mode is enabled.
1475:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1476:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1477:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  TxMailbox Tx Mailbox where the timestamp of message sent will be
1478:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         read.
1479:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         This parameter can be one value of @arg CAN_Tx_Mailboxes.
1480:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval Timestamp of message sent from Tx Mailbox.
1481:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1482:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** uint32_t HAL_CAN_GetTxTimestamp(CAN_HandleTypeDef *hcan, uint32_t TxMailbox)
1483:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1573              		.loc 1 1483 1 is_stmt 1 view -0
 1574              		.cfi_startproc
 1575              		@ args = 0, pretend = 0, frame = 0
 1576              		@ frame_needed = 0, uses_anonymous_args = 0
 1577              		@ link register save eliminated.
1484:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t timestamp = 0U;
 1578              		.loc 1 1484 3 view .LVU499
1485:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t transmitmailbox;
 1579              		.loc 1 1485 3 view .LVU500
1486:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1580              		.loc 1 1486 3 view .LVU501
 1581              		.loc 1 1486 24 is_stmt 0 view .LVU502
 1582 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1583              	.LVL112:
1487:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1488:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check function parameters */
1489:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_TX_MAILBOX(TxMailbox));
 1584              		.loc 1 1489 3 is_stmt 1 view .LVU503
1490:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1491:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1585              		.loc 1 1491 3 view .LVU504
 1586              		.loc 1 1491 38 is_stmt 0 view .LVU505
 1587 0004 013B     		subs	r3, r3, #1
 1588              	.LVL113:
 1589              		.loc 1 1491 38 view .LVU506
 1590 0006 DBB2     		uxtb	r3, r3
 1591              		.loc 1 1491 6 view .LVU507
 1592 0008 012B     		cmp	r3, #1
 1593 000a 01D9     		bls	.L131
1484:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t transmitmailbox;
 1594              		.loc 1 1484 12 view .LVU508
 1595 000c 0020     		movs	r0, #0
 1596              	.LVL114:
1492:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1493:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1494:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Select the Tx mailbox */
1495:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     transmitmailbox = POSITION_VAL(TxMailbox);
1496:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1497:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Get timestamp */
1498:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     timestamp = (hcan->Instance->sTxMailBox[transmitmailbox].TDTR & CAN_TDT0R_TIME) >> CAN_TDT0R_TI
1499:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1500:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1501:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Return the timestamp */
1502:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   return timestamp;
 1597              		.loc 1 1502 3 is_stmt 1 view .LVU509
ARM GAS  /tmp/ccCenVhd.s 			page 60


1503:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 1598              		.loc 1 1503 1 is_stmt 0 view .LVU510
 1599 000e 7047     		bx	lr
 1600              	.LVL115:
 1601              	.L131:
1495:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 1602              		.loc 1 1495 5 is_stmt 1 view .LVU511
 1603              	.LBB6:
 1604              	.LBI6:
 1605              		.file 2 "CORE/cmsis_gcc.h"
   1:CORE/cmsis_gcc.h **** /**************************************************************************//**
   2:CORE/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:CORE/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:CORE/cmsis_gcc.h ****  * @version  V5.2.1
   5:CORE/cmsis_gcc.h ****  * @date     30. July 2019
   6:CORE/cmsis_gcc.h ****  ******************************************************************************/
   7:CORE/cmsis_gcc.h **** /*
   8:CORE/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:CORE/cmsis_gcc.h ****  *
  10:CORE/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:CORE/cmsis_gcc.h ****  *
  12:CORE/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:CORE/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:CORE/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:CORE/cmsis_gcc.h ****  *
  16:CORE/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:CORE/cmsis_gcc.h ****  *
  18:CORE/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:CORE/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:CORE/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:CORE/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:CORE/cmsis_gcc.h ****  * limitations under the License.
  23:CORE/cmsis_gcc.h ****  */
  24:CORE/cmsis_gcc.h **** 
  25:CORE/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:CORE/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:CORE/cmsis_gcc.h **** 
  28:CORE/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:CORE/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:CORE/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:CORE/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:CORE/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:CORE/cmsis_gcc.h **** 
  34:CORE/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:CORE/cmsis_gcc.h **** #ifndef __has_builtin
  36:CORE/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:CORE/cmsis_gcc.h **** #endif
  38:CORE/cmsis_gcc.h **** 
  39:CORE/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:CORE/cmsis_gcc.h **** #ifndef   __ASM
  41:CORE/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:CORE/cmsis_gcc.h **** #endif
  43:CORE/cmsis_gcc.h **** #ifndef   __INLINE
  44:CORE/cmsis_gcc.h ****   #define __INLINE                               inline
  45:CORE/cmsis_gcc.h **** #endif
  46:CORE/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:CORE/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
ARM GAS  /tmp/ccCenVhd.s 			page 61


  48:CORE/cmsis_gcc.h **** #endif
  49:CORE/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:CORE/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:CORE/cmsis_gcc.h **** #endif
  52:CORE/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:CORE/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:CORE/cmsis_gcc.h **** #endif
  55:CORE/cmsis_gcc.h **** #ifndef   __USED
  56:CORE/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:CORE/cmsis_gcc.h **** #endif
  58:CORE/cmsis_gcc.h **** #ifndef   __WEAK
  59:CORE/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:CORE/cmsis_gcc.h **** #endif
  61:CORE/cmsis_gcc.h **** #ifndef   __PACKED
  62:CORE/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:CORE/cmsis_gcc.h **** #endif
  64:CORE/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:CORE/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:CORE/cmsis_gcc.h **** #endif
  67:CORE/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:CORE/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:CORE/cmsis_gcc.h **** #endif
  70:CORE/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:CORE/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:CORE/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:CORE/cmsis_gcc.h **** #endif
  78:CORE/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:CORE/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:CORE/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:CORE/cmsis_gcc.h **** #endif
  86:CORE/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:CORE/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:CORE/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:CORE/cmsis_gcc.h **** #endif
  94:CORE/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:CORE/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:CORE/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:CORE/cmsis_gcc.h **** #endif
 102:CORE/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
ARM GAS  /tmp/ccCenVhd.s 			page 62


 105:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:CORE/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:CORE/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:CORE/cmsis_gcc.h **** #endif
 110:CORE/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:CORE/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:CORE/cmsis_gcc.h **** #endif
 113:CORE/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:CORE/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:CORE/cmsis_gcc.h **** #endif
 116:CORE/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:CORE/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:CORE/cmsis_gcc.h **** #endif
 119:CORE/cmsis_gcc.h **** 
 120:CORE/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:CORE/cmsis_gcc.h **** 
 122:CORE/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:CORE/cmsis_gcc.h **** 
 124:CORE/cmsis_gcc.h **** /**
 125:CORE/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:CORE/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:CORE/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:CORE/cmsis_gcc.h ****            in the used linker script.
 129:CORE/cmsis_gcc.h **** 
 130:CORE/cmsis_gcc.h ****  */
 131:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:CORE/cmsis_gcc.h **** {
 133:CORE/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:CORE/cmsis_gcc.h **** 
 135:CORE/cmsis_gcc.h ****   typedef struct {
 136:CORE/cmsis_gcc.h ****     uint32_t const* src;
 137:CORE/cmsis_gcc.h ****     uint32_t* dest;
 138:CORE/cmsis_gcc.h ****     uint32_t  wlen;
 139:CORE/cmsis_gcc.h ****   } __copy_table_t;
 140:CORE/cmsis_gcc.h **** 
 141:CORE/cmsis_gcc.h ****   typedef struct {
 142:CORE/cmsis_gcc.h ****     uint32_t* dest;
 143:CORE/cmsis_gcc.h ****     uint32_t  wlen;
 144:CORE/cmsis_gcc.h ****   } __zero_table_t;
 145:CORE/cmsis_gcc.h **** 
 146:CORE/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:CORE/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:CORE/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:CORE/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:CORE/cmsis_gcc.h **** 
 151:CORE/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:CORE/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:CORE/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:CORE/cmsis_gcc.h ****     }
 155:CORE/cmsis_gcc.h ****   }
 156:CORE/cmsis_gcc.h **** 
 157:CORE/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:CORE/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:CORE/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:CORE/cmsis_gcc.h ****     }
 161:CORE/cmsis_gcc.h ****   }
ARM GAS  /tmp/ccCenVhd.s 			page 63


 162:CORE/cmsis_gcc.h **** 
 163:CORE/cmsis_gcc.h ****   _start();
 164:CORE/cmsis_gcc.h **** }
 165:CORE/cmsis_gcc.h **** 
 166:CORE/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:CORE/cmsis_gcc.h **** #endif
 168:CORE/cmsis_gcc.h **** 
 169:CORE/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:CORE/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:CORE/cmsis_gcc.h **** #endif
 172:CORE/cmsis_gcc.h **** 
 173:CORE/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:CORE/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:CORE/cmsis_gcc.h **** #endif
 176:CORE/cmsis_gcc.h **** 
 177:CORE/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:CORE/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:CORE/cmsis_gcc.h **** #endif
 180:CORE/cmsis_gcc.h **** 
 181:CORE/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:CORE/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:CORE/cmsis_gcc.h **** #endif
 184:CORE/cmsis_gcc.h **** 
 185:CORE/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:CORE/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:CORE/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:CORE/cmsis_gcc.h ****   @{
 189:CORE/cmsis_gcc.h ****  */
 190:CORE/cmsis_gcc.h **** 
 191:CORE/cmsis_gcc.h **** /**
 192:CORE/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:CORE/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:CORE/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:CORE/cmsis_gcc.h ****  */
 196:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:CORE/cmsis_gcc.h **** {
 198:CORE/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:CORE/cmsis_gcc.h **** }
 200:CORE/cmsis_gcc.h **** 
 201:CORE/cmsis_gcc.h **** 
 202:CORE/cmsis_gcc.h **** /**
 203:CORE/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:CORE/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:CORE/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:CORE/cmsis_gcc.h ****  */
 207:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 208:CORE/cmsis_gcc.h **** {
 209:CORE/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 210:CORE/cmsis_gcc.h **** }
 211:CORE/cmsis_gcc.h **** 
 212:CORE/cmsis_gcc.h **** 
 213:CORE/cmsis_gcc.h **** /**
 214:CORE/cmsis_gcc.h ****   \brief   Get Control Register
 215:CORE/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 216:CORE/cmsis_gcc.h ****   \return               Control Register value
 217:CORE/cmsis_gcc.h ****  */
 218:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
ARM GAS  /tmp/ccCenVhd.s 			page 64


 219:CORE/cmsis_gcc.h **** {
 220:CORE/cmsis_gcc.h ****   uint32_t result;
 221:CORE/cmsis_gcc.h **** 
 222:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 223:CORE/cmsis_gcc.h ****   return(result);
 224:CORE/cmsis_gcc.h **** }
 225:CORE/cmsis_gcc.h **** 
 226:CORE/cmsis_gcc.h **** 
 227:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 228:CORE/cmsis_gcc.h **** /**
 229:CORE/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 230:CORE/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 231:CORE/cmsis_gcc.h ****   \return               non-secure Control Register value
 232:CORE/cmsis_gcc.h ****  */
 233:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 234:CORE/cmsis_gcc.h **** {
 235:CORE/cmsis_gcc.h ****   uint32_t result;
 236:CORE/cmsis_gcc.h **** 
 237:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 238:CORE/cmsis_gcc.h ****   return(result);
 239:CORE/cmsis_gcc.h **** }
 240:CORE/cmsis_gcc.h **** #endif
 241:CORE/cmsis_gcc.h **** 
 242:CORE/cmsis_gcc.h **** 
 243:CORE/cmsis_gcc.h **** /**
 244:CORE/cmsis_gcc.h ****   \brief   Set Control Register
 245:CORE/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 246:CORE/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 247:CORE/cmsis_gcc.h ****  */
 248:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 249:CORE/cmsis_gcc.h **** {
 250:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 251:CORE/cmsis_gcc.h **** }
 252:CORE/cmsis_gcc.h **** 
 253:CORE/cmsis_gcc.h **** 
 254:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 255:CORE/cmsis_gcc.h **** /**
 256:CORE/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 257:CORE/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 258:CORE/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 259:CORE/cmsis_gcc.h ****  */
 260:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 261:CORE/cmsis_gcc.h **** {
 262:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 263:CORE/cmsis_gcc.h **** }
 264:CORE/cmsis_gcc.h **** #endif
 265:CORE/cmsis_gcc.h **** 
 266:CORE/cmsis_gcc.h **** 
 267:CORE/cmsis_gcc.h **** /**
 268:CORE/cmsis_gcc.h ****   \brief   Get IPSR Register
 269:CORE/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 270:CORE/cmsis_gcc.h ****   \return               IPSR Register value
 271:CORE/cmsis_gcc.h ****  */
 272:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 273:CORE/cmsis_gcc.h **** {
 274:CORE/cmsis_gcc.h ****   uint32_t result;
 275:CORE/cmsis_gcc.h **** 
ARM GAS  /tmp/ccCenVhd.s 			page 65


 276:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 277:CORE/cmsis_gcc.h ****   return(result);
 278:CORE/cmsis_gcc.h **** }
 279:CORE/cmsis_gcc.h **** 
 280:CORE/cmsis_gcc.h **** 
 281:CORE/cmsis_gcc.h **** /**
 282:CORE/cmsis_gcc.h ****   \brief   Get APSR Register
 283:CORE/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 284:CORE/cmsis_gcc.h ****   \return               APSR Register value
 285:CORE/cmsis_gcc.h ****  */
 286:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 287:CORE/cmsis_gcc.h **** {
 288:CORE/cmsis_gcc.h ****   uint32_t result;
 289:CORE/cmsis_gcc.h **** 
 290:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 291:CORE/cmsis_gcc.h ****   return(result);
 292:CORE/cmsis_gcc.h **** }
 293:CORE/cmsis_gcc.h **** 
 294:CORE/cmsis_gcc.h **** 
 295:CORE/cmsis_gcc.h **** /**
 296:CORE/cmsis_gcc.h ****   \brief   Get xPSR Register
 297:CORE/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 298:CORE/cmsis_gcc.h ****   \return               xPSR Register value
 299:CORE/cmsis_gcc.h ****  */
 300:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 301:CORE/cmsis_gcc.h **** {
 302:CORE/cmsis_gcc.h ****   uint32_t result;
 303:CORE/cmsis_gcc.h **** 
 304:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 305:CORE/cmsis_gcc.h ****   return(result);
 306:CORE/cmsis_gcc.h **** }
 307:CORE/cmsis_gcc.h **** 
 308:CORE/cmsis_gcc.h **** 
 309:CORE/cmsis_gcc.h **** /**
 310:CORE/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 311:CORE/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 312:CORE/cmsis_gcc.h ****   \return               PSP Register value
 313:CORE/cmsis_gcc.h ****  */
 314:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 315:CORE/cmsis_gcc.h **** {
 316:CORE/cmsis_gcc.h ****   uint32_t result;
 317:CORE/cmsis_gcc.h **** 
 318:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 319:CORE/cmsis_gcc.h ****   return(result);
 320:CORE/cmsis_gcc.h **** }
 321:CORE/cmsis_gcc.h **** 
 322:CORE/cmsis_gcc.h **** 
 323:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 324:CORE/cmsis_gcc.h **** /**
 325:CORE/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 326:CORE/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 327:CORE/cmsis_gcc.h ****   \return               PSP Register value
 328:CORE/cmsis_gcc.h ****  */
 329:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 330:CORE/cmsis_gcc.h **** {
 331:CORE/cmsis_gcc.h ****   uint32_t result;
 332:CORE/cmsis_gcc.h **** 
ARM GAS  /tmp/ccCenVhd.s 			page 66


 333:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 334:CORE/cmsis_gcc.h ****   return(result);
 335:CORE/cmsis_gcc.h **** }
 336:CORE/cmsis_gcc.h **** #endif
 337:CORE/cmsis_gcc.h **** 
 338:CORE/cmsis_gcc.h **** 
 339:CORE/cmsis_gcc.h **** /**
 340:CORE/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 341:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 342:CORE/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 343:CORE/cmsis_gcc.h ****  */
 344:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 345:CORE/cmsis_gcc.h **** {
 346:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 347:CORE/cmsis_gcc.h **** }
 348:CORE/cmsis_gcc.h **** 
 349:CORE/cmsis_gcc.h **** 
 350:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:CORE/cmsis_gcc.h **** /**
 352:CORE/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 353:CORE/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 354:CORE/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 355:CORE/cmsis_gcc.h ****  */
 356:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 357:CORE/cmsis_gcc.h **** {
 358:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 359:CORE/cmsis_gcc.h **** }
 360:CORE/cmsis_gcc.h **** #endif
 361:CORE/cmsis_gcc.h **** 
 362:CORE/cmsis_gcc.h **** 
 363:CORE/cmsis_gcc.h **** /**
 364:CORE/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 365:CORE/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 366:CORE/cmsis_gcc.h ****   \return               MSP Register value
 367:CORE/cmsis_gcc.h ****  */
 368:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 369:CORE/cmsis_gcc.h **** {
 370:CORE/cmsis_gcc.h ****   uint32_t result;
 371:CORE/cmsis_gcc.h **** 
 372:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 373:CORE/cmsis_gcc.h ****   return(result);
 374:CORE/cmsis_gcc.h **** }
 375:CORE/cmsis_gcc.h **** 
 376:CORE/cmsis_gcc.h **** 
 377:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 378:CORE/cmsis_gcc.h **** /**
 379:CORE/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 380:CORE/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 381:CORE/cmsis_gcc.h ****   \return               MSP Register value
 382:CORE/cmsis_gcc.h ****  */
 383:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 384:CORE/cmsis_gcc.h **** {
 385:CORE/cmsis_gcc.h ****   uint32_t result;
 386:CORE/cmsis_gcc.h **** 
 387:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 388:CORE/cmsis_gcc.h ****   return(result);
 389:CORE/cmsis_gcc.h **** }
ARM GAS  /tmp/ccCenVhd.s 			page 67


 390:CORE/cmsis_gcc.h **** #endif
 391:CORE/cmsis_gcc.h **** 
 392:CORE/cmsis_gcc.h **** 
 393:CORE/cmsis_gcc.h **** /**
 394:CORE/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 395:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 396:CORE/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 397:CORE/cmsis_gcc.h ****  */
 398:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 399:CORE/cmsis_gcc.h **** {
 400:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 401:CORE/cmsis_gcc.h **** }
 402:CORE/cmsis_gcc.h **** 
 403:CORE/cmsis_gcc.h **** 
 404:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 405:CORE/cmsis_gcc.h **** /**
 406:CORE/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 407:CORE/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 408:CORE/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 409:CORE/cmsis_gcc.h ****  */
 410:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 411:CORE/cmsis_gcc.h **** {
 412:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 413:CORE/cmsis_gcc.h **** }
 414:CORE/cmsis_gcc.h **** #endif
 415:CORE/cmsis_gcc.h **** 
 416:CORE/cmsis_gcc.h **** 
 417:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 418:CORE/cmsis_gcc.h **** /**
 419:CORE/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 420:CORE/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 421:CORE/cmsis_gcc.h ****   \return               SP Register value
 422:CORE/cmsis_gcc.h ****  */
 423:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 424:CORE/cmsis_gcc.h **** {
 425:CORE/cmsis_gcc.h ****   uint32_t result;
 426:CORE/cmsis_gcc.h **** 
 427:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 428:CORE/cmsis_gcc.h ****   return(result);
 429:CORE/cmsis_gcc.h **** }
 430:CORE/cmsis_gcc.h **** 
 431:CORE/cmsis_gcc.h **** 
 432:CORE/cmsis_gcc.h **** /**
 433:CORE/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 434:CORE/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 435:CORE/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 436:CORE/cmsis_gcc.h ****  */
 437:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 438:CORE/cmsis_gcc.h **** {
 439:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 440:CORE/cmsis_gcc.h **** }
 441:CORE/cmsis_gcc.h **** #endif
 442:CORE/cmsis_gcc.h **** 
 443:CORE/cmsis_gcc.h **** 
 444:CORE/cmsis_gcc.h **** /**
 445:CORE/cmsis_gcc.h ****   \brief   Get Priority Mask
 446:CORE/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
ARM GAS  /tmp/ccCenVhd.s 			page 68


 447:CORE/cmsis_gcc.h ****   \return               Priority Mask value
 448:CORE/cmsis_gcc.h ****  */
 449:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 450:CORE/cmsis_gcc.h **** {
 451:CORE/cmsis_gcc.h ****   uint32_t result;
 452:CORE/cmsis_gcc.h **** 
 453:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 454:CORE/cmsis_gcc.h ****   return(result);
 455:CORE/cmsis_gcc.h **** }
 456:CORE/cmsis_gcc.h **** 
 457:CORE/cmsis_gcc.h **** 
 458:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 459:CORE/cmsis_gcc.h **** /**
 460:CORE/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 461:CORE/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 462:CORE/cmsis_gcc.h ****   \return               Priority Mask value
 463:CORE/cmsis_gcc.h ****  */
 464:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 465:CORE/cmsis_gcc.h **** {
 466:CORE/cmsis_gcc.h ****   uint32_t result;
 467:CORE/cmsis_gcc.h **** 
 468:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) );
 469:CORE/cmsis_gcc.h ****   return(result);
 470:CORE/cmsis_gcc.h **** }
 471:CORE/cmsis_gcc.h **** #endif
 472:CORE/cmsis_gcc.h **** 
 473:CORE/cmsis_gcc.h **** 
 474:CORE/cmsis_gcc.h **** /**
 475:CORE/cmsis_gcc.h ****   \brief   Set Priority Mask
 476:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 477:CORE/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 478:CORE/cmsis_gcc.h ****  */
 479:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 480:CORE/cmsis_gcc.h **** {
 481:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 482:CORE/cmsis_gcc.h **** }
 483:CORE/cmsis_gcc.h **** 
 484:CORE/cmsis_gcc.h **** 
 485:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 486:CORE/cmsis_gcc.h **** /**
 487:CORE/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 488:CORE/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 489:CORE/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 490:CORE/cmsis_gcc.h ****  */
 491:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 492:CORE/cmsis_gcc.h **** {
 493:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 494:CORE/cmsis_gcc.h **** }
 495:CORE/cmsis_gcc.h **** #endif
 496:CORE/cmsis_gcc.h **** 
 497:CORE/cmsis_gcc.h **** 
 498:CORE/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 499:CORE/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 500:CORE/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 501:CORE/cmsis_gcc.h **** /**
 502:CORE/cmsis_gcc.h ****   \brief   Enable FIQ
 503:CORE/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
ARM GAS  /tmp/ccCenVhd.s 			page 69


 504:CORE/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 505:CORE/cmsis_gcc.h ****  */
 506:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 507:CORE/cmsis_gcc.h **** {
 508:CORE/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 509:CORE/cmsis_gcc.h **** }
 510:CORE/cmsis_gcc.h **** 
 511:CORE/cmsis_gcc.h **** 
 512:CORE/cmsis_gcc.h **** /**
 513:CORE/cmsis_gcc.h ****   \brief   Disable FIQ
 514:CORE/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 515:CORE/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 516:CORE/cmsis_gcc.h ****  */
 517:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 518:CORE/cmsis_gcc.h **** {
 519:CORE/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 520:CORE/cmsis_gcc.h **** }
 521:CORE/cmsis_gcc.h **** 
 522:CORE/cmsis_gcc.h **** 
 523:CORE/cmsis_gcc.h **** /**
 524:CORE/cmsis_gcc.h ****   \brief   Get Base Priority
 525:CORE/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 526:CORE/cmsis_gcc.h ****   \return               Base Priority register value
 527:CORE/cmsis_gcc.h ****  */
 528:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 529:CORE/cmsis_gcc.h **** {
 530:CORE/cmsis_gcc.h ****   uint32_t result;
 531:CORE/cmsis_gcc.h **** 
 532:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 533:CORE/cmsis_gcc.h ****   return(result);
 534:CORE/cmsis_gcc.h **** }
 535:CORE/cmsis_gcc.h **** 
 536:CORE/cmsis_gcc.h **** 
 537:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 538:CORE/cmsis_gcc.h **** /**
 539:CORE/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 540:CORE/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 541:CORE/cmsis_gcc.h ****   \return               Base Priority register value
 542:CORE/cmsis_gcc.h ****  */
 543:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 544:CORE/cmsis_gcc.h **** {
 545:CORE/cmsis_gcc.h ****   uint32_t result;
 546:CORE/cmsis_gcc.h **** 
 547:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 548:CORE/cmsis_gcc.h ****   return(result);
 549:CORE/cmsis_gcc.h **** }
 550:CORE/cmsis_gcc.h **** #endif
 551:CORE/cmsis_gcc.h **** 
 552:CORE/cmsis_gcc.h **** 
 553:CORE/cmsis_gcc.h **** /**
 554:CORE/cmsis_gcc.h ****   \brief   Set Base Priority
 555:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 556:CORE/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 557:CORE/cmsis_gcc.h ****  */
 558:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 559:CORE/cmsis_gcc.h **** {
 560:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
ARM GAS  /tmp/ccCenVhd.s 			page 70


 561:CORE/cmsis_gcc.h **** }
 562:CORE/cmsis_gcc.h **** 
 563:CORE/cmsis_gcc.h **** 
 564:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 565:CORE/cmsis_gcc.h **** /**
 566:CORE/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 567:CORE/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 568:CORE/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 569:CORE/cmsis_gcc.h ****  */
 570:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 571:CORE/cmsis_gcc.h **** {
 572:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 573:CORE/cmsis_gcc.h **** }
 574:CORE/cmsis_gcc.h **** #endif
 575:CORE/cmsis_gcc.h **** 
 576:CORE/cmsis_gcc.h **** 
 577:CORE/cmsis_gcc.h **** /**
 578:CORE/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 579:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 580:CORE/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 581:CORE/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 582:CORE/cmsis_gcc.h ****  */
 583:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 584:CORE/cmsis_gcc.h **** {
 585:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 586:CORE/cmsis_gcc.h **** }
 587:CORE/cmsis_gcc.h **** 
 588:CORE/cmsis_gcc.h **** 
 589:CORE/cmsis_gcc.h **** /**
 590:CORE/cmsis_gcc.h ****   \brief   Get Fault Mask
 591:CORE/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 592:CORE/cmsis_gcc.h ****   \return               Fault Mask register value
 593:CORE/cmsis_gcc.h ****  */
 594:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 595:CORE/cmsis_gcc.h **** {
 596:CORE/cmsis_gcc.h ****   uint32_t result;
 597:CORE/cmsis_gcc.h **** 
 598:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 599:CORE/cmsis_gcc.h ****   return(result);
 600:CORE/cmsis_gcc.h **** }
 601:CORE/cmsis_gcc.h **** 
 602:CORE/cmsis_gcc.h **** 
 603:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 604:CORE/cmsis_gcc.h **** /**
 605:CORE/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 606:CORE/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 607:CORE/cmsis_gcc.h ****   \return               Fault Mask register value
 608:CORE/cmsis_gcc.h ****  */
 609:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 610:CORE/cmsis_gcc.h **** {
 611:CORE/cmsis_gcc.h ****   uint32_t result;
 612:CORE/cmsis_gcc.h **** 
 613:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 614:CORE/cmsis_gcc.h ****   return(result);
 615:CORE/cmsis_gcc.h **** }
 616:CORE/cmsis_gcc.h **** #endif
 617:CORE/cmsis_gcc.h **** 
ARM GAS  /tmp/ccCenVhd.s 			page 71


 618:CORE/cmsis_gcc.h **** 
 619:CORE/cmsis_gcc.h **** /**
 620:CORE/cmsis_gcc.h ****   \brief   Set Fault Mask
 621:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 622:CORE/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 623:CORE/cmsis_gcc.h ****  */
 624:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 625:CORE/cmsis_gcc.h **** {
 626:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 627:CORE/cmsis_gcc.h **** }
 628:CORE/cmsis_gcc.h **** 
 629:CORE/cmsis_gcc.h **** 
 630:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 631:CORE/cmsis_gcc.h **** /**
 632:CORE/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 633:CORE/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 634:CORE/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 635:CORE/cmsis_gcc.h ****  */
 636:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 637:CORE/cmsis_gcc.h **** {
 638:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 639:CORE/cmsis_gcc.h **** }
 640:CORE/cmsis_gcc.h **** #endif
 641:CORE/cmsis_gcc.h **** 
 642:CORE/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 643:CORE/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 644:CORE/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 645:CORE/cmsis_gcc.h **** 
 646:CORE/cmsis_gcc.h **** 
 647:CORE/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 648:CORE/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 649:CORE/cmsis_gcc.h **** 
 650:CORE/cmsis_gcc.h **** /**
 651:CORE/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 652:CORE/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:CORE/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 654:CORE/cmsis_gcc.h ****   mode.
 655:CORE/cmsis_gcc.h **** 
 656:CORE/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 657:CORE/cmsis_gcc.h ****   \return               PSPLIM Register value
 658:CORE/cmsis_gcc.h ****  */
 659:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 660:CORE/cmsis_gcc.h **** {
 661:CORE/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 662:CORE/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 663:CORE/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 664:CORE/cmsis_gcc.h ****   return 0U;
 665:CORE/cmsis_gcc.h **** #else
 666:CORE/cmsis_gcc.h ****   uint32_t result;
 667:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 668:CORE/cmsis_gcc.h ****   return result;
 669:CORE/cmsis_gcc.h **** #endif
 670:CORE/cmsis_gcc.h **** }
 671:CORE/cmsis_gcc.h **** 
 672:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 673:CORE/cmsis_gcc.h **** /**
 674:CORE/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
ARM GAS  /tmp/ccCenVhd.s 			page 72


 675:CORE/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 676:CORE/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 677:CORE/cmsis_gcc.h **** 
 678:CORE/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 679:CORE/cmsis_gcc.h ****   \return               PSPLIM Register value
 680:CORE/cmsis_gcc.h ****  */
 681:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 682:CORE/cmsis_gcc.h **** {
 683:CORE/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 684:CORE/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 685:CORE/cmsis_gcc.h ****   return 0U;
 686:CORE/cmsis_gcc.h **** #else
 687:CORE/cmsis_gcc.h ****   uint32_t result;
 688:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 689:CORE/cmsis_gcc.h ****   return result;
 690:CORE/cmsis_gcc.h **** #endif
 691:CORE/cmsis_gcc.h **** }
 692:CORE/cmsis_gcc.h **** #endif
 693:CORE/cmsis_gcc.h **** 
 694:CORE/cmsis_gcc.h **** 
 695:CORE/cmsis_gcc.h **** /**
 696:CORE/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 697:CORE/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 698:CORE/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 699:CORE/cmsis_gcc.h ****   mode.
 700:CORE/cmsis_gcc.h **** 
 701:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 702:CORE/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 703:CORE/cmsis_gcc.h ****  */
 704:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 705:CORE/cmsis_gcc.h **** {
 706:CORE/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 707:CORE/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 708:CORE/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 709:CORE/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 710:CORE/cmsis_gcc.h **** #else
 711:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 712:CORE/cmsis_gcc.h **** #endif
 713:CORE/cmsis_gcc.h **** }
 714:CORE/cmsis_gcc.h **** 
 715:CORE/cmsis_gcc.h **** 
 716:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 717:CORE/cmsis_gcc.h **** /**
 718:CORE/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 719:CORE/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 720:CORE/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 721:CORE/cmsis_gcc.h **** 
 722:CORE/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 723:CORE/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 724:CORE/cmsis_gcc.h ****  */
 725:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 726:CORE/cmsis_gcc.h **** {
 727:CORE/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 728:CORE/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 729:CORE/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 730:CORE/cmsis_gcc.h **** #else
 731:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
ARM GAS  /tmp/ccCenVhd.s 			page 73


 732:CORE/cmsis_gcc.h **** #endif
 733:CORE/cmsis_gcc.h **** }
 734:CORE/cmsis_gcc.h **** #endif
 735:CORE/cmsis_gcc.h **** 
 736:CORE/cmsis_gcc.h **** 
 737:CORE/cmsis_gcc.h **** /**
 738:CORE/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 739:CORE/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 740:CORE/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 741:CORE/cmsis_gcc.h ****   mode.
 742:CORE/cmsis_gcc.h **** 
 743:CORE/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 744:CORE/cmsis_gcc.h ****   \return               MSPLIM Register value
 745:CORE/cmsis_gcc.h ****  */
 746:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 747:CORE/cmsis_gcc.h **** {
 748:CORE/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 749:CORE/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 750:CORE/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 751:CORE/cmsis_gcc.h ****   return 0U;
 752:CORE/cmsis_gcc.h **** #else
 753:CORE/cmsis_gcc.h ****   uint32_t result;
 754:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 755:CORE/cmsis_gcc.h ****   return result;
 756:CORE/cmsis_gcc.h **** #endif
 757:CORE/cmsis_gcc.h **** }
 758:CORE/cmsis_gcc.h **** 
 759:CORE/cmsis_gcc.h **** 
 760:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 761:CORE/cmsis_gcc.h **** /**
 762:CORE/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 763:CORE/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 764:CORE/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 765:CORE/cmsis_gcc.h **** 
 766:CORE/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 767:CORE/cmsis_gcc.h ****   \return               MSPLIM Register value
 768:CORE/cmsis_gcc.h ****  */
 769:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 770:CORE/cmsis_gcc.h **** {
 771:CORE/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 772:CORE/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 773:CORE/cmsis_gcc.h ****   return 0U;
 774:CORE/cmsis_gcc.h **** #else
 775:CORE/cmsis_gcc.h ****   uint32_t result;
 776:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 777:CORE/cmsis_gcc.h ****   return result;
 778:CORE/cmsis_gcc.h **** #endif
 779:CORE/cmsis_gcc.h **** }
 780:CORE/cmsis_gcc.h **** #endif
 781:CORE/cmsis_gcc.h **** 
 782:CORE/cmsis_gcc.h **** 
 783:CORE/cmsis_gcc.h **** /**
 784:CORE/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 785:CORE/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 786:CORE/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 787:CORE/cmsis_gcc.h ****   mode.
 788:CORE/cmsis_gcc.h **** 
ARM GAS  /tmp/ccCenVhd.s 			page 74


 789:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 790:CORE/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 791:CORE/cmsis_gcc.h ****  */
 792:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 793:CORE/cmsis_gcc.h **** {
 794:CORE/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 795:CORE/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 796:CORE/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 797:CORE/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 798:CORE/cmsis_gcc.h **** #else
 799:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 800:CORE/cmsis_gcc.h **** #endif
 801:CORE/cmsis_gcc.h **** }
 802:CORE/cmsis_gcc.h **** 
 803:CORE/cmsis_gcc.h **** 
 804:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 805:CORE/cmsis_gcc.h **** /**
 806:CORE/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 807:CORE/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 808:CORE/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 809:CORE/cmsis_gcc.h **** 
 810:CORE/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 811:CORE/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 812:CORE/cmsis_gcc.h ****  */
 813:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 814:CORE/cmsis_gcc.h **** {
 815:CORE/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 816:CORE/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 817:CORE/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 818:CORE/cmsis_gcc.h **** #else
 819:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 820:CORE/cmsis_gcc.h **** #endif
 821:CORE/cmsis_gcc.h **** }
 822:CORE/cmsis_gcc.h **** #endif
 823:CORE/cmsis_gcc.h **** 
 824:CORE/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 825:CORE/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 826:CORE/cmsis_gcc.h **** 
 827:CORE/cmsis_gcc.h **** 
 828:CORE/cmsis_gcc.h **** /**
 829:CORE/cmsis_gcc.h ****   \brief   Get FPSCR
 830:CORE/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 831:CORE/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 832:CORE/cmsis_gcc.h ****  */
 833:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 834:CORE/cmsis_gcc.h **** {
 835:CORE/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 836:CORE/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 837:CORE/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr)
 838:CORE/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 839:CORE/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 840:CORE/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 841:CORE/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 842:CORE/cmsis_gcc.h **** #else
 843:CORE/cmsis_gcc.h ****   uint32_t result;
 844:CORE/cmsis_gcc.h **** 
 845:CORE/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
ARM GAS  /tmp/ccCenVhd.s 			page 75


 846:CORE/cmsis_gcc.h ****   return(result);
 847:CORE/cmsis_gcc.h **** #endif
 848:CORE/cmsis_gcc.h **** #else
 849:CORE/cmsis_gcc.h ****   return(0U);
 850:CORE/cmsis_gcc.h **** #endif
 851:CORE/cmsis_gcc.h **** }
 852:CORE/cmsis_gcc.h **** 
 853:CORE/cmsis_gcc.h **** 
 854:CORE/cmsis_gcc.h **** /**
 855:CORE/cmsis_gcc.h ****   \brief   Set FPSCR
 856:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 857:CORE/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 858:CORE/cmsis_gcc.h ****  */
 859:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 860:CORE/cmsis_gcc.h **** {
 861:CORE/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 862:CORE/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 863:CORE/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 864:CORE/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 865:CORE/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 866:CORE/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 867:CORE/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 868:CORE/cmsis_gcc.h **** #else
 869:CORE/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 870:CORE/cmsis_gcc.h **** #endif
 871:CORE/cmsis_gcc.h **** #else
 872:CORE/cmsis_gcc.h ****   (void)fpscr;
 873:CORE/cmsis_gcc.h **** #endif
 874:CORE/cmsis_gcc.h **** }
 875:CORE/cmsis_gcc.h **** 
 876:CORE/cmsis_gcc.h **** 
 877:CORE/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 878:CORE/cmsis_gcc.h **** 
 879:CORE/cmsis_gcc.h **** 
 880:CORE/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 881:CORE/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 882:CORE/cmsis_gcc.h ****   Access to dedicated instructions
 883:CORE/cmsis_gcc.h ****   @{
 884:CORE/cmsis_gcc.h **** */
 885:CORE/cmsis_gcc.h **** 
 886:CORE/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 887:CORE/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 888:CORE/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 889:CORE/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 890:CORE/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 891:CORE/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 892:CORE/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 893:CORE/cmsis_gcc.h **** #else
 894:CORE/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 895:CORE/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 896:CORE/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 897:CORE/cmsis_gcc.h **** #endif
 898:CORE/cmsis_gcc.h **** 
 899:CORE/cmsis_gcc.h **** /**
 900:CORE/cmsis_gcc.h ****   \brief   No Operation
 901:CORE/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 902:CORE/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccCenVhd.s 			page 76


 903:CORE/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 904:CORE/cmsis_gcc.h **** 
 905:CORE/cmsis_gcc.h **** /**
 906:CORE/cmsis_gcc.h ****   \brief   Wait For Interrupt
 907:CORE/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 908:CORE/cmsis_gcc.h ****  */
 909:CORE/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 910:CORE/cmsis_gcc.h **** 
 911:CORE/cmsis_gcc.h **** 
 912:CORE/cmsis_gcc.h **** /**
 913:CORE/cmsis_gcc.h ****   \brief   Wait For Event
 914:CORE/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 915:CORE/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 916:CORE/cmsis_gcc.h ****  */
 917:CORE/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 918:CORE/cmsis_gcc.h **** 
 919:CORE/cmsis_gcc.h **** 
 920:CORE/cmsis_gcc.h **** /**
 921:CORE/cmsis_gcc.h ****   \brief   Send Event
 922:CORE/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 923:CORE/cmsis_gcc.h ****  */
 924:CORE/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 925:CORE/cmsis_gcc.h **** 
 926:CORE/cmsis_gcc.h **** 
 927:CORE/cmsis_gcc.h **** /**
 928:CORE/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 929:CORE/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 930:CORE/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 931:CORE/cmsis_gcc.h ****            after the instruction has been completed.
 932:CORE/cmsis_gcc.h ****  */
 933:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 934:CORE/cmsis_gcc.h **** {
 935:CORE/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 936:CORE/cmsis_gcc.h **** }
 937:CORE/cmsis_gcc.h **** 
 938:CORE/cmsis_gcc.h **** 
 939:CORE/cmsis_gcc.h **** /**
 940:CORE/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 941:CORE/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 942:CORE/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 943:CORE/cmsis_gcc.h ****  */
 944:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 945:CORE/cmsis_gcc.h **** {
 946:CORE/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 947:CORE/cmsis_gcc.h **** }
 948:CORE/cmsis_gcc.h **** 
 949:CORE/cmsis_gcc.h **** 
 950:CORE/cmsis_gcc.h **** /**
 951:CORE/cmsis_gcc.h ****   \brief   Data Memory Barrier
 952:CORE/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 953:CORE/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 954:CORE/cmsis_gcc.h ****  */
 955:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 956:CORE/cmsis_gcc.h **** {
 957:CORE/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 958:CORE/cmsis_gcc.h **** }
 959:CORE/cmsis_gcc.h **** 
ARM GAS  /tmp/ccCenVhd.s 			page 77


 960:CORE/cmsis_gcc.h **** 
 961:CORE/cmsis_gcc.h **** /**
 962:CORE/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 963:CORE/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 964:CORE/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 965:CORE/cmsis_gcc.h ****   \return               Reversed value
 966:CORE/cmsis_gcc.h ****  */
 967:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 968:CORE/cmsis_gcc.h **** {
 969:CORE/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 970:CORE/cmsis_gcc.h ****   return __builtin_bswap32(value);
 971:CORE/cmsis_gcc.h **** #else
 972:CORE/cmsis_gcc.h ****   uint32_t result;
 973:CORE/cmsis_gcc.h **** 
 974:CORE/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 975:CORE/cmsis_gcc.h ****   return result;
 976:CORE/cmsis_gcc.h **** #endif
 977:CORE/cmsis_gcc.h **** }
 978:CORE/cmsis_gcc.h **** 
 979:CORE/cmsis_gcc.h **** 
 980:CORE/cmsis_gcc.h **** /**
 981:CORE/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 982:CORE/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 983:CORE/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 984:CORE/cmsis_gcc.h ****   \return               Reversed value
 985:CORE/cmsis_gcc.h ****  */
 986:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 987:CORE/cmsis_gcc.h **** {
 988:CORE/cmsis_gcc.h ****   uint32_t result;
 989:CORE/cmsis_gcc.h **** 
 990:CORE/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 991:CORE/cmsis_gcc.h ****   return result;
 992:CORE/cmsis_gcc.h **** }
 993:CORE/cmsis_gcc.h **** 
 994:CORE/cmsis_gcc.h **** 
 995:CORE/cmsis_gcc.h **** /**
 996:CORE/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 997:CORE/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 998:CORE/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 999:CORE/cmsis_gcc.h ****   \return               Reversed value
1000:CORE/cmsis_gcc.h ****  */
1001:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
1002:CORE/cmsis_gcc.h **** {
1003:CORE/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
1004:CORE/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
1005:CORE/cmsis_gcc.h **** #else
1006:CORE/cmsis_gcc.h ****   int16_t result;
1007:CORE/cmsis_gcc.h **** 
1008:CORE/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
1009:CORE/cmsis_gcc.h ****   return result;
1010:CORE/cmsis_gcc.h **** #endif
1011:CORE/cmsis_gcc.h **** }
1012:CORE/cmsis_gcc.h **** 
1013:CORE/cmsis_gcc.h **** 
1014:CORE/cmsis_gcc.h **** /**
1015:CORE/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
1016:CORE/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
ARM GAS  /tmp/ccCenVhd.s 			page 78


1017:CORE/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
1018:CORE/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
1019:CORE/cmsis_gcc.h ****   \return               Rotated value
1020:CORE/cmsis_gcc.h ****  */
1021:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
1022:CORE/cmsis_gcc.h **** {
1023:CORE/cmsis_gcc.h ****   op2 %= 32U;
1024:CORE/cmsis_gcc.h ****   if (op2 == 0U)
1025:CORE/cmsis_gcc.h ****   {
1026:CORE/cmsis_gcc.h ****     return op1;
1027:CORE/cmsis_gcc.h ****   }
1028:CORE/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
1029:CORE/cmsis_gcc.h **** }
1030:CORE/cmsis_gcc.h **** 
1031:CORE/cmsis_gcc.h **** 
1032:CORE/cmsis_gcc.h **** /**
1033:CORE/cmsis_gcc.h ****   \brief   Breakpoint
1034:CORE/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
1035:CORE/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
1036:CORE/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
1037:CORE/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
1038:CORE/cmsis_gcc.h ****  */
1039:CORE/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
1040:CORE/cmsis_gcc.h **** 
1041:CORE/cmsis_gcc.h **** 
1042:CORE/cmsis_gcc.h **** /**
1043:CORE/cmsis_gcc.h ****   \brief   Reverse bit order of value
1044:CORE/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
1045:CORE/cmsis_gcc.h ****   \param [in]    value  Value to reverse
1046:CORE/cmsis_gcc.h ****   \return               Reversed value
1047:CORE/cmsis_gcc.h ****  */
1048:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 1606              		.loc 2 1048 31 view .LVU512
 1607              	.LBB7:
1049:CORE/cmsis_gcc.h **** {
1050:CORE/cmsis_gcc.h ****   uint32_t result;
 1608              		.loc 2 1050 3 view .LVU513
1051:CORE/cmsis_gcc.h **** 
1052:CORE/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
1053:CORE/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
1054:CORE/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
1055:CORE/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 1609              		.loc 2 1055 4 view .LVU514
 1610              		.syntax unified
 1611              	@ 1055 "CORE/cmsis_gcc.h" 1
 1612 0010 91FAA1F1 		rbit r1, r1
 1613              	@ 0 "" 2
 1614              	.LVL116:
1056:CORE/cmsis_gcc.h **** #else
1057:CORE/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
1058:CORE/cmsis_gcc.h **** 
1059:CORE/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
1060:CORE/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
1061:CORE/cmsis_gcc.h ****   {
1062:CORE/cmsis_gcc.h ****     result <<= 1U;
1063:CORE/cmsis_gcc.h ****     result |= value & 1U;
1064:CORE/cmsis_gcc.h ****     s--;
ARM GAS  /tmp/ccCenVhd.s 			page 79


1065:CORE/cmsis_gcc.h ****   }
1066:CORE/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
1067:CORE/cmsis_gcc.h **** #endif
1068:CORE/cmsis_gcc.h ****   return result;
 1615              		.loc 2 1068 3 view .LVU515
 1616              		.loc 2 1068 3 is_stmt 0 view .LVU516
 1617              		.thumb
 1618              		.syntax unified
 1619              	.LBE7:
 1620              	.LBE6:
 1621              	.LBB8:
 1622              	.LBI8:
1069:CORE/cmsis_gcc.h **** }
1070:CORE/cmsis_gcc.h **** 
1071:CORE/cmsis_gcc.h **** 
1072:CORE/cmsis_gcc.h **** /**
1073:CORE/cmsis_gcc.h ****   \brief   Count leading zeros
1074:CORE/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
1075:CORE/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
1076:CORE/cmsis_gcc.h ****   \return             number of leading zeros in value
1077:CORE/cmsis_gcc.h ****  */
1078:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 1623              		.loc 2 1078 30 is_stmt 1 view .LVU517
 1624              	.LBB9:
1079:CORE/cmsis_gcc.h **** {
1080:CORE/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
1081:CORE/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
1082:CORE/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
1083:CORE/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
1084:CORE/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
1085:CORE/cmsis_gcc.h ****      is non-zero".
1086:CORE/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
1087:CORE/cmsis_gcc.h ****      single CLZ instruction.
1088:CORE/cmsis_gcc.h ****    */
1089:CORE/cmsis_gcc.h ****   if (value == 0U)
 1625              		.loc 2 1089 3 view .LVU518
 1626              		.loc 2 1089 6 is_stmt 0 view .LVU519
 1627 0014 41B1     		cbz	r1, .L130
1090:CORE/cmsis_gcc.h ****   {
1091:CORE/cmsis_gcc.h ****     return 32U;
1092:CORE/cmsis_gcc.h ****   }
1093:CORE/cmsis_gcc.h ****   return __builtin_clz(value);
 1628              		.loc 2 1093 3 is_stmt 1 view .LVU520
 1629              		.loc 2 1093 10 is_stmt 0 view .LVU521
 1630 0016 B1FA81F1 		clz	r1, r1
 1631              	.LVL117:
 1632              	.L128:
 1633              		.loc 2 1093 10 view .LVU522
 1634              	.LBE9:
 1635              	.LBE8:
1498:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 1636              		.loc 1 1498 5 is_stmt 1 view .LVU523
1498:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 1637              		.loc 1 1498 22 is_stmt 0 view .LVU524
 1638 001a 0368     		ldr	r3, [r0]
1498:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 1639              		.loc 1 1498 61 view .LVU525
ARM GAS  /tmp/ccCenVhd.s 			page 80


 1640 001c 1831     		adds	r1, r1, #24
 1641              	.LVL118:
1498:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 1642              		.loc 1 1498 61 view .LVU526
 1643 001e 03EB0111 		add	r1, r3, r1, lsl #4
 1644              	.LVL119:
1498:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 1645              		.loc 1 1498 61 view .LVU527
 1646 0022 4868     		ldr	r0, [r1, #4]
 1647              	.LVL120:
1498:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 1648              		.loc 1 1498 85 view .LVU528
 1649 0024 000C     		lsrs	r0, r0, #16
 1650              	.LVL121:
1498:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 1651              		.loc 1 1498 85 view .LVU529
 1652 0026 7047     		bx	lr
 1653              	.LVL122:
 1654              	.L130:
 1655              	.LBB11:
 1656              	.LBB10:
1091:CORE/cmsis_gcc.h ****   }
 1657              		.loc 2 1091 12 view .LVU530
 1658 0028 2021     		movs	r1, #32
 1659              	.LVL123:
1091:CORE/cmsis_gcc.h ****   }
 1660              		.loc 2 1091 12 view .LVU531
 1661 002a F6E7     		b	.L128
 1662              	.LBE10:
 1663              	.LBE11:
 1664              		.cfi_endproc
 1665              	.LFE146:
 1667              		.section	.text.HAL_CAN_GetRxMessage,"ax",%progbits
 1668              		.align	1
 1669              		.global	HAL_CAN_GetRxMessage
 1670              		.syntax unified
 1671              		.thumb
 1672              		.thumb_func
 1673              		.fpu fpv4-sp-d16
 1675              	HAL_CAN_GetRxMessage:
 1676              	.LVL124:
 1677              	.LFB147:
1504:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1505:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1506:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Get an CAN frame from the Rx FIFO zone into the message RAM.
1507:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1508:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1509:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  RxFifo Fifo number of the received message to be read.
1510:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         This parameter can be a value of @arg CAN_receive_FIFO_number.
1511:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  pHeader pointer to a CAN_RxHeaderTypeDef structure where the header
1512:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         of the Rx frame will be stored.
1513:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  aData array where the payload of the Rx frame will be stored.
1514:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status
1515:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1516:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDe
1517:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1678              		.loc 1 1517 1 is_stmt 1 view -0
ARM GAS  /tmp/ccCenVhd.s 			page 81


 1679              		.cfi_startproc
 1680              		@ args = 0, pretend = 0, frame = 0
 1681              		@ frame_needed = 0, uses_anonymous_args = 0
 1682              		@ link register save eliminated.
 1683              		.loc 1 1517 1 is_stmt 0 view .LVU533
 1684 0000 30B4     		push	{r4, r5}
 1685              	.LCFI13:
 1686              		.cfi_def_cfa_offset 8
 1687              		.cfi_offset 4, -8
 1688              		.cfi_offset 5, -4
1518:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1689              		.loc 1 1518 3 is_stmt 1 view .LVU534
 1690              		.loc 1 1518 24 is_stmt 0 view .LVU535
 1691 0002 90F82040 		ldrb	r4, [r0, #32]	@ zero_extendqisi2
 1692              	.LVL125:
1519:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1520:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_RX_FIFO(RxFifo));
 1693              		.loc 1 1520 3 is_stmt 1 view .LVU536
1521:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1522:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1694              		.loc 1 1522 3 view .LVU537
 1695              		.loc 1 1522 38 is_stmt 0 view .LVU538
 1696 0006 013C     		subs	r4, r4, #1
 1697              	.LVL126:
 1698              		.loc 1 1522 38 view .LVU539
 1699 0008 E4B2     		uxtb	r4, r4
 1700              		.loc 1 1522 6 view .LVU540
 1701 000a 012C     		cmp	r4, #1
 1702 000c 00F29180 		bhi	.L133
1523:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1524:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1525:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check the Rx FIFO */
1526:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 1703              		.loc 1 1526 5 is_stmt 1 view .LVU541
 1704              		.loc 1 1526 8 is_stmt 0 view .LVU542
 1705 0010 51B9     		cbnz	r1, .L134
1527:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1528:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check that the Rx FIFO 0 is not empty */
1529:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 1706              		.loc 1 1529 7 is_stmt 1 view .LVU543
 1707              		.loc 1 1529 16 is_stmt 0 view .LVU544
 1708 0012 0468     		ldr	r4, [r0]
 1709              		.loc 1 1529 26 view .LVU545
 1710 0014 E468     		ldr	r4, [r4, #12]
 1711              		.loc 1 1529 10 view .LVU546
 1712 0016 14F0030F 		tst	r4, #3
 1713 001a 10D1     		bne	.L135
1530:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1531:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Update error code */
1532:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 1714              		.loc 1 1532 9 is_stmt 1 view .LVU547
 1715              		.loc 1 1532 25 is_stmt 0 view .LVU548
 1716 001c 436A     		ldr	r3, [r0, #36]
 1717              	.LVL127:
 1718              		.loc 1 1532 25 view .LVU549
 1719 001e 43F40013 		orr	r3, r3, #2097152
 1720 0022 4362     		str	r3, [r0, #36]
ARM GAS  /tmp/ccCenVhd.s 			page 82


1533:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1534:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         return HAL_ERROR;
 1721              		.loc 1 1534 9 is_stmt 1 view .LVU550
 1722              		.loc 1 1534 16 is_stmt 0 view .LVU551
 1723 0024 0120     		movs	r0, #1
 1724              	.LVL128:
 1725              		.loc 1 1534 16 view .LVU552
 1726 0026 89E0     		b	.L136
 1727              	.LVL129:
 1728              	.L134:
1535:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1536:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1537:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     else /* Rx element is assigned to Rx FIFO 1 */
1538:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1539:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check that the Rx FIFO 1 is not empty */
1540:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 1729              		.loc 1 1540 7 is_stmt 1 view .LVU553
 1730              		.loc 1 1540 16 is_stmt 0 view .LVU554
 1731 0028 0468     		ldr	r4, [r0]
 1732              		.loc 1 1540 26 view .LVU555
 1733 002a 2469     		ldr	r4, [r4, #16]
 1734              		.loc 1 1540 10 view .LVU556
 1735 002c 14F0030F 		tst	r4, #3
 1736 0030 05D1     		bne	.L135
1541:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1542:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Update error code */
1543:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 1737              		.loc 1 1543 9 is_stmt 1 view .LVU557
 1738              		.loc 1 1543 25 is_stmt 0 view .LVU558
 1739 0032 436A     		ldr	r3, [r0, #36]
 1740              	.LVL130:
 1741              		.loc 1 1543 25 view .LVU559
 1742 0034 43F40013 		orr	r3, r3, #2097152
 1743 0038 4362     		str	r3, [r0, #36]
1544:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1545:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         return HAL_ERROR;
 1744              		.loc 1 1545 9 is_stmt 1 view .LVU560
 1745              		.loc 1 1545 16 is_stmt 0 view .LVU561
 1746 003a 0120     		movs	r0, #1
 1747              	.LVL131:
 1748              		.loc 1 1545 16 view .LVU562
 1749 003c 7EE0     		b	.L136
 1750              	.LVL132:
 1751              	.L135:
1546:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1547:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1548:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1549:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Get the header */
1550:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 1752              		.loc 1 1550 5 is_stmt 1 view .LVU563
 1753              		.loc 1 1550 39 is_stmt 0 view .LVU564
 1754 003e 0568     		ldr	r5, [r0]
 1755              		.loc 1 1550 71 view .LVU565
 1756 0040 01F11B04 		add	r4, r1, #27
 1757 0044 2401     		lsls	r4, r4, #4
 1758 0046 2C59     		ldr	r4, [r5, r4]
 1759              		.loc 1 1550 33 view .LVU566
ARM GAS  /tmp/ccCenVhd.s 			page 83


 1760 0048 04F00404 		and	r4, r4, #4
 1761              		.loc 1 1550 18 view .LVU567
 1762 004c 9460     		str	r4, [r2, #8]
1551:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (pHeader->IDE == CAN_ID_STD)
 1763              		.loc 1 1551 5 is_stmt 1 view .LVU568
 1764              		.loc 1 1551 8 is_stmt 0 view .LVU569
 1765 004e 002C     		cmp	r4, #0
 1766 0050 61D1     		bne	.L137
1552:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1553:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_
 1767              		.loc 1 1553 7 is_stmt 1 view .LVU570
 1768              		.loc 1 1553 45 is_stmt 0 view .LVU571
 1769 0052 0568     		ldr	r5, [r0]
 1770              		.loc 1 1553 77 view .LVU572
 1771 0054 01F11B04 		add	r4, r1, #27
 1772 0058 2401     		lsls	r4, r4, #4
 1773 005a 2C59     		ldr	r4, [r5, r4]
 1774              		.loc 1 1553 83 view .LVU573
 1775 005c 640D     		lsrs	r4, r4, #21
 1776              		.loc 1 1553 22 view .LVU574
 1777 005e 1460     		str	r4, [r2]
 1778              	.L138:
1554:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1555:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     else
1556:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1557:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR)
1558:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1559:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 1779              		.loc 1 1559 5 is_stmt 1 view .LVU575
 1780              		.loc 1 1559 40 is_stmt 0 view .LVU576
 1781 0060 0568     		ldr	r5, [r0]
 1782              		.loc 1 1559 72 view .LVU577
 1783 0062 01F11B04 		add	r4, r1, #27
 1784 0066 2401     		lsls	r4, r4, #4
 1785 0068 2D59     		ldr	r5, [r5, r4]
 1786              		.loc 1 1559 78 view .LVU578
 1787 006a C5F34005 		ubfx	r5, r5, #1, #1
 1788              		.loc 1 1559 18 view .LVU579
 1789 006e D560     		str	r5, [r2, #12]
1560:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos
 1790              		.loc 1 1560 5 is_stmt 1 view .LVU580
 1791              		.loc 1 1560 41 is_stmt 0 view .LVU581
 1792 0070 0568     		ldr	r5, [r0]
 1793              		.loc 1 1560 73 view .LVU582
 1794 0072 2544     		add	r5, r5, r4
 1795 0074 6D68     		ldr	r5, [r5, #4]
 1796              		.loc 1 1560 80 view .LVU583
 1797 0076 05F00F05 		and	r5, r5, #15
 1798              		.loc 1 1560 18 view .LVU584
 1799 007a 1561     		str	r5, [r2, #16]
1561:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_
 1800              		.loc 1 1561 5 is_stmt 1 view .LVU585
 1801              		.loc 1 1561 54 is_stmt 0 view .LVU586
 1802 007c 0568     		ldr	r5, [r0]
 1803              		.loc 1 1561 86 view .LVU587
 1804 007e 2544     		add	r5, r5, r4
 1805 0080 6D68     		ldr	r5, [r5, #4]
ARM GAS  /tmp/ccCenVhd.s 			page 84


 1806              		.loc 1 1561 93 view .LVU588
 1807 0082 C5F30725 		ubfx	r5, r5, #8, #8
 1808              		.loc 1 1561 31 view .LVU589
 1809 0086 9561     		str	r5, [r2, #24]
1562:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_
 1810              		.loc 1 1562 5 is_stmt 1 view .LVU590
 1811              		.loc 1 1562 48 is_stmt 0 view .LVU591
 1812 0088 0568     		ldr	r5, [r0]
 1813              		.loc 1 1562 80 view .LVU592
 1814 008a 2C44     		add	r4, r4, r5
 1815 008c 6468     		ldr	r4, [r4, #4]
 1816              		.loc 1 1562 87 view .LVU593
 1817 008e 240C     		lsrs	r4, r4, #16
 1818              		.loc 1 1562 24 view .LVU594
 1819 0090 5461     		str	r4, [r2, #20]
1563:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1564:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Get the data */
1565:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
 1820              		.loc 1 1565 5 is_stmt 1 view .LVU595
 1821              		.loc 1 1565 49 is_stmt 0 view .LVU596
 1822 0092 0268     		ldr	r2, [r0]
 1823              	.LVL133:
 1824              		.loc 1 1565 81 view .LVU597
 1825 0094 02EB0112 		add	r2, r2, r1, lsl #4
 1826 0098 D2F8B821 		ldr	r2, [r2, #440]
 1827              		.loc 1 1565 14 view .LVU598
 1828 009c 1A70     		strb	r2, [r3]
1566:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
 1829              		.loc 1 1566 5 is_stmt 1 view .LVU599
 1830              		.loc 1 1566 49 is_stmt 0 view .LVU600
 1831 009e 0268     		ldr	r2, [r0]
 1832              		.loc 1 1566 81 view .LVU601
 1833 00a0 02EB0112 		add	r2, r2, r1, lsl #4
 1834 00a4 D2F8B821 		ldr	r2, [r2, #440]
 1835              		.loc 1 1566 16 view .LVU602
 1836 00a8 C2F30722 		ubfx	r2, r2, #8, #8
 1837              		.loc 1 1566 14 view .LVU603
 1838 00ac 5A70     		strb	r2, [r3, #1]
1567:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
 1839              		.loc 1 1567 5 is_stmt 1 view .LVU604
 1840              		.loc 1 1567 49 is_stmt 0 view .LVU605
 1841 00ae 0268     		ldr	r2, [r0]
 1842              		.loc 1 1567 81 view .LVU606
 1843 00b0 02EB0112 		add	r2, r2, r1, lsl #4
 1844 00b4 D2F8B821 		ldr	r2, [r2, #440]
 1845              		.loc 1 1567 16 view .LVU607
 1846 00b8 C2F30742 		ubfx	r2, r2, #16, #8
 1847              		.loc 1 1567 14 view .LVU608
 1848 00bc 9A70     		strb	r2, [r3, #2]
1568:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
 1849              		.loc 1 1568 5 is_stmt 1 view .LVU609
 1850              		.loc 1 1568 49 is_stmt 0 view .LVU610
 1851 00be 0268     		ldr	r2, [r0]
 1852              		.loc 1 1568 81 view .LVU611
 1853 00c0 02EB0112 		add	r2, r2, r1, lsl #4
 1854 00c4 D2F8B821 		ldr	r2, [r2, #440]
 1855              		.loc 1 1568 16 view .LVU612
ARM GAS  /tmp/ccCenVhd.s 			page 85


 1856 00c8 120E     		lsrs	r2, r2, #24
 1857              		.loc 1 1568 14 view .LVU613
 1858 00ca DA70     		strb	r2, [r3, #3]
1569:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
 1859              		.loc 1 1569 5 is_stmt 1 view .LVU614
 1860              		.loc 1 1569 49 is_stmt 0 view .LVU615
 1861 00cc 0268     		ldr	r2, [r0]
 1862              		.loc 1 1569 81 view .LVU616
 1863 00ce 02EB0112 		add	r2, r2, r1, lsl #4
 1864 00d2 D2F8BC21 		ldr	r2, [r2, #444]
 1865              		.loc 1 1569 14 view .LVU617
 1866 00d6 1A71     		strb	r2, [r3, #4]
1570:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
 1867              		.loc 1 1570 5 is_stmt 1 view .LVU618
 1868              		.loc 1 1570 49 is_stmt 0 view .LVU619
 1869 00d8 0268     		ldr	r2, [r0]
 1870              		.loc 1 1570 81 view .LVU620
 1871 00da 02EB0112 		add	r2, r2, r1, lsl #4
 1872 00de D2F8BC21 		ldr	r2, [r2, #444]
 1873              		.loc 1 1570 16 view .LVU621
 1874 00e2 C2F30722 		ubfx	r2, r2, #8, #8
 1875              		.loc 1 1570 14 view .LVU622
 1876 00e6 5A71     		strb	r2, [r3, #5]
1571:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
 1877              		.loc 1 1571 5 is_stmt 1 view .LVU623
 1878              		.loc 1 1571 49 is_stmt 0 view .LVU624
 1879 00e8 0268     		ldr	r2, [r0]
 1880              		.loc 1 1571 81 view .LVU625
 1881 00ea 02EB0112 		add	r2, r2, r1, lsl #4
 1882 00ee D2F8BC21 		ldr	r2, [r2, #444]
 1883              		.loc 1 1571 16 view .LVU626
 1884 00f2 C2F30742 		ubfx	r2, r2, #16, #8
 1885              		.loc 1 1571 14 view .LVU627
 1886 00f6 9A71     		strb	r2, [r3, #6]
1572:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
 1887              		.loc 1 1572 5 is_stmt 1 view .LVU628
 1888              		.loc 1 1572 49 is_stmt 0 view .LVU629
 1889 00f8 0268     		ldr	r2, [r0]
 1890              		.loc 1 1572 81 view .LVU630
 1891 00fa 02EB0112 		add	r2, r2, r1, lsl #4
 1892 00fe D2F8BC21 		ldr	r2, [r2, #444]
 1893              		.loc 1 1572 16 view .LVU631
 1894 0102 120E     		lsrs	r2, r2, #24
 1895              		.loc 1 1572 14 view .LVU632
 1896 0104 DA71     		strb	r2, [r3, #7]
1573:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1574:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Release the FIFO */
1575:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 1897              		.loc 1 1575 5 is_stmt 1 view .LVU633
 1898              		.loc 1 1575 8 is_stmt 0 view .LVU634
 1899 0106 71B9     		cbnz	r1, .L139
1576:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1577:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Release RX FIFO 0 */
1578:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 1900              		.loc 1 1578 7 is_stmt 1 view .LVU635
 1901 0108 0268     		ldr	r2, [r0]
 1902 010a D368     		ldr	r3, [r2, #12]
ARM GAS  /tmp/ccCenVhd.s 			page 86


 1903              	.LVL134:
 1904              		.loc 1 1578 7 is_stmt 0 view .LVU636
 1905 010c 43F02003 		orr	r3, r3, #32
 1906 0110 D360     		str	r3, [r2, #12]
 1907              	.L140:
1579:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1580:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     else /* Rx element is assigned to Rx FIFO 1 */
1581:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1582:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Release RX FIFO 1 */
1583:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
1584:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1585:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1586:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Return function status */
1587:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_OK;
 1908              		.loc 1 1587 5 is_stmt 1 view .LVU637
 1909              		.loc 1 1587 12 is_stmt 0 view .LVU638
 1910 0112 0020     		movs	r0, #0
 1911              	.LVL135:
 1912              		.loc 1 1587 12 view .LVU639
 1913 0114 12E0     		b	.L136
 1914              	.LVL136:
 1915              	.L137:
1557:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 1916              		.loc 1 1557 7 is_stmt 1 view .LVU640
1557:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 1917              		.loc 1 1557 63 is_stmt 0 view .LVU641
 1918 0116 0568     		ldr	r5, [r0]
1557:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 1919              		.loc 1 1557 95 view .LVU642
 1920 0118 01F11B04 		add	r4, r1, #27
 1921 011c 2401     		lsls	r4, r4, #4
 1922 011e 2C59     		ldr	r4, [r5, r4]
1557:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 1923              		.loc 1 1557 101 view .LVU643
 1924 0120 E408     		lsrs	r4, r4, #3
1557:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 1925              		.loc 1 1557 22 view .LVU644
 1926 0122 5460     		str	r4, [r2, #4]
 1927 0124 9CE7     		b	.L138
 1928              	.LVL137:
 1929              	.L139:
1583:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 1930              		.loc 1 1583 7 is_stmt 1 view .LVU645
 1931 0126 0268     		ldr	r2, [r0]
 1932 0128 1369     		ldr	r3, [r2, #16]
 1933              	.LVL138:
1583:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 1934              		.loc 1 1583 7 is_stmt 0 view .LVU646
 1935 012a 43F02003 		orr	r3, r3, #32
 1936 012e 1361     		str	r3, [r2, #16]
 1937 0130 EFE7     		b	.L140
 1938              	.LVL139:
 1939              	.L133:
1588:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1589:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
1590:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1591:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code */
ARM GAS  /tmp/ccCenVhd.s 			page 87


1592:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1940              		.loc 1 1592 5 is_stmt 1 view .LVU647
 1941              		.loc 1 1592 21 is_stmt 0 view .LVU648
 1942 0132 436A     		ldr	r3, [r0, #36]
 1943              	.LVL140:
 1944              		.loc 1 1592 21 view .LVU649
 1945 0134 43F48023 		orr	r3, r3, #262144
 1946 0138 4362     		str	r3, [r0, #36]
1593:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1594:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 1947              		.loc 1 1594 5 is_stmt 1 view .LVU650
 1948              		.loc 1 1594 12 is_stmt 0 view .LVU651
 1949 013a 0120     		movs	r0, #1
 1950              	.LVL141:
 1951              	.L136:
1595:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1596:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 1952              		.loc 1 1596 1 view .LVU652
 1953 013c 30BC     		pop	{r4, r5}
 1954              	.LCFI14:
 1955              		.cfi_restore 5
 1956              		.cfi_restore 4
 1957              		.cfi_def_cfa_offset 0
 1958 013e 7047     		bx	lr
 1959              		.cfi_endproc
 1960              	.LFE147:
 1962              		.section	.text.HAL_CAN_GetRxFifoFillLevel,"ax",%progbits
 1963              		.align	1
 1964              		.global	HAL_CAN_GetRxFifoFillLevel
 1965              		.syntax unified
 1966              		.thumb
 1967              		.thumb_func
 1968              		.fpu fpv4-sp-d16
 1970              	HAL_CAN_GetRxFifoFillLevel:
 1971              	.LVL142:
 1972              	.LFB148:
1597:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1598:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1599:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Return Rx FIFO fill level.
1600:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1601:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1602:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  RxFifo Rx FIFO.
1603:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         This parameter can be a value of @arg CAN_receive_FIFO_number.
1604:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval Number of messages available in Rx FIFO.
1605:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1606:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
1607:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 1973              		.loc 1 1607 1 is_stmt 1 view -0
 1974              		.cfi_startproc
 1975              		@ args = 0, pretend = 0, frame = 0
 1976              		@ frame_needed = 0, uses_anonymous_args = 0
 1977              		@ link register save eliminated.
1608:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t filllevel = 0U;
 1978              		.loc 1 1608 3 view .LVU654
1609:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1979              		.loc 1 1609 3 view .LVU655
 1980              		.loc 1 1609 24 is_stmt 0 view .LVU656
ARM GAS  /tmp/ccCenVhd.s 			page 88


 1981 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1982              	.LVL143:
1610:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1611:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check function parameters */
1612:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_RX_FIFO(RxFifo));
 1983              		.loc 1 1612 3 is_stmt 1 view .LVU657
1613:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1614:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1984              		.loc 1 1614 3 view .LVU658
 1985              		.loc 1 1614 38 is_stmt 0 view .LVU659
 1986 0004 013B     		subs	r3, r3, #1
 1987              	.LVL144:
 1988              		.loc 1 1614 38 view .LVU660
 1989 0006 DBB2     		uxtb	r3, r3
 1990              		.loc 1 1614 6 view .LVU661
 1991 0008 012B     		cmp	r3, #1
 1992 000a 01D9     		bls	.L146
1608:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1993              		.loc 1 1608 12 view .LVU662
 1994 000c 0020     		movs	r0, #0
 1995              	.LVL145:
1615:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1616:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1617:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if (RxFifo == CAN_RX_FIFO0)
1618:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1619:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
1620:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1621:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     else /* RxFifo == CAN_RX_FIFO1 */
1622:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1623:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
1624:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1625:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1626:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1627:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Return Rx FIFO fill level */
1628:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   return filllevel;
 1996              		.loc 1 1628 3 is_stmt 1 view .LVU663
1629:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 1997              		.loc 1 1629 1 is_stmt 0 view .LVU664
 1998 000e 7047     		bx	lr
 1999              	.LVL146:
 2000              	.L146:
1617:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2001              		.loc 1 1617 5 is_stmt 1 view .LVU665
1617:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2002              		.loc 1 1617 8 is_stmt 0 view .LVU666
 2003 0010 21B9     		cbnz	r1, .L144
1619:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 2004              		.loc 1 1619 7 is_stmt 1 view .LVU667
1619:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 2005              		.loc 1 1619 23 is_stmt 0 view .LVU668
 2006 0012 0368     		ldr	r3, [r0]
1619:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 2007              		.loc 1 1619 33 view .LVU669
 2008 0014 D868     		ldr	r0, [r3, #12]
 2009              	.LVL147:
1619:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 2010              		.loc 1 1619 17 view .LVU670
ARM GAS  /tmp/ccCenVhd.s 			page 89


 2011 0016 00F00300 		and	r0, r0, #3
 2012              	.LVL148:
1619:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 2013              		.loc 1 1619 17 view .LVU671
 2014 001a 7047     		bx	lr
 2015              	.LVL149:
 2016              	.L144:
1623:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 2017              		.loc 1 1623 7 is_stmt 1 view .LVU672
1623:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 2018              		.loc 1 1623 23 is_stmt 0 view .LVU673
 2019 001c 0368     		ldr	r3, [r0]
1623:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 2020              		.loc 1 1623 33 view .LVU674
 2021 001e 1869     		ldr	r0, [r3, #16]
 2022              	.LVL150:
1623:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 2023              		.loc 1 1623 17 view .LVU675
 2024 0020 00F00300 		and	r0, r0, #3
 2025              	.LVL151:
1623:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 2026              		.loc 1 1623 17 view .LVU676
 2027 0024 7047     		bx	lr
 2028              		.cfi_endproc
 2029              	.LFE148:
 2031              		.section	.text.HAL_CAN_ActivateNotification,"ax",%progbits
 2032              		.align	1
 2033              		.global	HAL_CAN_ActivateNotification
 2034              		.syntax unified
 2035              		.thumb
 2036              		.thumb_func
 2037              		.fpu fpv4-sp-d16
 2039              	HAL_CAN_ActivateNotification:
 2040              	.LVL152:
 2041              	.LFB149:
1630:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1631:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1632:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @}
1633:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1634:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1635:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group4 Interrupts management
1636:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *  @brief    Interrupts management
1637:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *
1638:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @verbatim
1639:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
1640:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                        ##### Interrupts management #####
1641:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
1642:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     [..]  This section provides functions allowing to:
1643:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_ActivateNotification      : Enable interrupts
1644:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_DeactivateNotification    : Disable interrupts
1645:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_IRQHandler                : Handles CAN interrupt request
1646:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1647:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @endverbatim
1648:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @{
1649:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1650:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1651:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
ARM GAS  /tmp/ccCenVhd.s 			page 90


1652:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Enable interrupts.
1653:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1654:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1655:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  ActiveITs indicates which interrupts will be enabled.
1656:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Interrupts.
1657:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status
1658:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1659:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
1660:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 2042              		.loc 1 1660 1 is_stmt 1 view -0
 2043              		.cfi_startproc
 2044              		@ args = 0, pretend = 0, frame = 0
 2045              		@ frame_needed = 0, uses_anonymous_args = 0
 2046              		@ link register save eliminated.
1661:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 2047              		.loc 1 1661 3 view .LVU678
 2048              		.loc 1 1661 24 is_stmt 0 view .LVU679
 2049 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 2050              	.LVL153:
1662:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1663:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check function parameters */
1664:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_IT(ActiveITs));
 2051              		.loc 1 1664 3 is_stmt 1 view .LVU680
1665:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1666:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 2052              		.loc 1 1666 3 view .LVU681
 2053              		.loc 1 1666 38 is_stmt 0 view .LVU682
 2054 0004 013B     		subs	r3, r3, #1
 2055              	.LVL154:
 2056              		.loc 1 1666 38 view .LVU683
 2057 0006 DBB2     		uxtb	r3, r3
 2058              		.loc 1 1666 6 view .LVU684
 2059 0008 012B     		cmp	r3, #1
 2060 000a 05D9     		bls	.L150
1667:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1668:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1669:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Enable the selected interrupts */
1670:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
1671:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1672:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Return function status */
1673:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_OK;
1674:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1675:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
1676:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1677:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code */
1678:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 2061              		.loc 1 1678 5 is_stmt 1 view .LVU685
 2062              		.loc 1 1678 21 is_stmt 0 view .LVU686
 2063 000c 436A     		ldr	r3, [r0, #36]
 2064 000e 43F48023 		orr	r3, r3, #262144
 2065 0012 4362     		str	r3, [r0, #36]
1679:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1680:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 2066              		.loc 1 1680 5 is_stmt 1 view .LVU687
 2067              		.loc 1 1680 12 is_stmt 0 view .LVU688
 2068 0014 0120     		movs	r0, #1
 2069              	.LVL155:
ARM GAS  /tmp/ccCenVhd.s 			page 91


1681:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1682:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 2070              		.loc 1 1682 1 view .LVU689
 2071 0016 7047     		bx	lr
 2072              	.LVL156:
 2073              	.L150:
1670:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2074              		.loc 1 1670 5 is_stmt 1 view .LVU690
 2075 0018 0268     		ldr	r2, [r0]
 2076 001a 5369     		ldr	r3, [r2, #20]
 2077 001c 1943     		orrs	r1, r1, r3
 2078              	.LVL157:
1670:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2079              		.loc 1 1670 5 is_stmt 0 view .LVU691
 2080 001e 5161     		str	r1, [r2, #20]
1673:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 2081              		.loc 1 1673 5 is_stmt 1 view .LVU692
1673:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 2082              		.loc 1 1673 12 is_stmt 0 view .LVU693
 2083 0020 0020     		movs	r0, #0
 2084              	.LVL158:
1673:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 2085              		.loc 1 1673 12 view .LVU694
 2086 0022 7047     		bx	lr
 2087              		.cfi_endproc
 2088              	.LFE149:
 2090              		.section	.text.HAL_CAN_DeactivateNotification,"ax",%progbits
 2091              		.align	1
 2092              		.global	HAL_CAN_DeactivateNotification
 2093              		.syntax unified
 2094              		.thumb
 2095              		.thumb_func
 2096              		.fpu fpv4-sp-d16
 2098              	HAL_CAN_DeactivateNotification:
 2099              	.LVL159:
 2100              	.LFB150:
1683:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1684:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1685:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Disable interrupts.
1686:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1687:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1688:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  InactiveITs indicates which interrupts will be disabled.
1689:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Interrupts.
1690:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status
1691:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1692:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
1693:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 2101              		.loc 1 1693 1 is_stmt 1 view -0
 2102              		.cfi_startproc
 2103              		@ args = 0, pretend = 0, frame = 0
 2104              		@ frame_needed = 0, uses_anonymous_args = 0
 2105              		@ link register save eliminated.
1694:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 2106              		.loc 1 1694 3 view .LVU696
 2107              		.loc 1 1694 24 is_stmt 0 view .LVU697
 2108 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 2109              	.LVL160:
ARM GAS  /tmp/ccCenVhd.s 			page 92


1695:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1696:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Check function parameters */
1697:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   assert_param(IS_CAN_IT(InactiveITs));
 2110              		.loc 1 1697 3 is_stmt 1 view .LVU698
1698:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1699:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 2111              		.loc 1 1699 3 view .LVU699
 2112              		.loc 1 1699 38 is_stmt 0 view .LVU700
 2113 0004 013B     		subs	r3, r3, #1
 2114              	.LVL161:
 2115              		.loc 1 1699 38 view .LVU701
 2116 0006 DBB2     		uxtb	r3, r3
 2117              		.loc 1 1699 6 view .LVU702
 2118 0008 012B     		cmp	r3, #1
 2119 000a 05D9     		bls	.L154
1700:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1701:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1702:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Disable the selected interrupts */
1703:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
1704:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1705:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Return function status */
1706:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_OK;
1707:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1708:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
1709:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1710:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code */
1711:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 2120              		.loc 1 1711 5 is_stmt 1 view .LVU703
 2121              		.loc 1 1711 21 is_stmt 0 view .LVU704
 2122 000c 436A     		ldr	r3, [r0, #36]
 2123 000e 43F48023 		orr	r3, r3, #262144
 2124 0012 4362     		str	r3, [r0, #36]
1712:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1713:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     return HAL_ERROR;
 2125              		.loc 1 1713 5 is_stmt 1 view .LVU705
 2126              		.loc 1 1713 12 is_stmt 0 view .LVU706
 2127 0014 0120     		movs	r0, #1
 2128              	.LVL162:
1714:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1715:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 2129              		.loc 1 1715 1 view .LVU707
 2130 0016 7047     		bx	lr
 2131              	.LVL163:
 2132              	.L154:
1703:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2133              		.loc 1 1703 5 is_stmt 1 view .LVU708
 2134 0018 0268     		ldr	r2, [r0]
 2135 001a 5369     		ldr	r3, [r2, #20]
 2136 001c 23EA0101 		bic	r1, r3, r1
 2137              	.LVL164:
1703:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2138              		.loc 1 1703 5 is_stmt 0 view .LVU709
 2139 0020 5161     		str	r1, [r2, #20]
1706:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 2140              		.loc 1 1706 5 is_stmt 1 view .LVU710
1706:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 2141              		.loc 1 1706 12 is_stmt 0 view .LVU711
ARM GAS  /tmp/ccCenVhd.s 			page 93


 2142 0022 0020     		movs	r0, #0
 2143              	.LVL165:
1706:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 2144              		.loc 1 1706 12 view .LVU712
 2145 0024 7047     		bx	lr
 2146              		.cfi_endproc
 2147              	.LFE150:
 2149              		.section	.text.HAL_CAN_TxMailbox0CompleteCallback,"ax",%progbits
 2150              		.align	1
 2151              		.weak	HAL_CAN_TxMailbox0CompleteCallback
 2152              		.syntax unified
 2153              		.thumb
 2154              		.thumb_func
 2155              		.fpu fpv4-sp-d16
 2157              	HAL_CAN_TxMailbox0CompleteCallback:
 2158              	.LVL166:
 2159              	.LFB152:
1716:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1717:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
1718:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Handles CAN interrupt request
1719:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1720:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
1721:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
1722:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
1723:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
1724:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
1725:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t errorcode = HAL_CAN_ERROR_NONE;
1726:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t interrupts = READ_REG(hcan->Instance->IER);
1727:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t msrflags = READ_REG(hcan->Instance->MSR);
1728:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
1729:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
1730:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
1731:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t esrflags = READ_REG(hcan->Instance->ESR);
1732:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1733:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Transmit Mailbox empty interrupt management *****************************/
1734:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
1735:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1736:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Transmit Mailbox 0 management *****************************************/
1737:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((tsrflags & CAN_TSR_RQCP0) != 0U)
1738:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1739:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
1740:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
1741:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1742:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if ((tsrflags & CAN_TSR_TXOK0) != 0U)
1743:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1744:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Transmission Mailbox 0 complete callback */
1745:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1746:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Call registered callback*/
1747:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->TxMailbox0CompleteCallback(hcan);
1748:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #else
1749:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Call weak (surcharged) callback */
1750:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         HAL_CAN_TxMailbox0CompleteCallback(hcan);
1751:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1752:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1753:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       else
1754:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1755:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         if ((tsrflags & CAN_TSR_ALST0) != 0U)
ARM GAS  /tmp/ccCenVhd.s 			page 94


1756:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
1757:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Update error code */
1758:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_ALST0;
1759:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
1760:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         else if ((tsrflags & CAN_TSR_TERR0) != 0U)
1761:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
1762:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Update error code */
1763:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_TERR0;
1764:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
1765:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         else
1766:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
1767:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Transmission Mailbox 0 abort callback */
1768:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1769:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Call registered callback*/
1770:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           hcan->TxMailbox0AbortCallback(hcan);
1771:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #else
1772:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Call weak (surcharged) callback */
1773:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           HAL_CAN_TxMailbox0AbortCallback(hcan);
1774:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1775:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
1776:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1777:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1778:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1779:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Transmit Mailbox 1 management *****************************************/
1780:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((tsrflags & CAN_TSR_RQCP1) != 0U)
1781:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1782:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
1783:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
1784:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1785:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if ((tsrflags & CAN_TSR_TXOK1) != 0U)
1786:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1787:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Transmission Mailbox 1 complete callback */
1788:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1789:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Call registered callback*/
1790:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->TxMailbox1CompleteCallback(hcan);
1791:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #else
1792:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Call weak (surcharged) callback */
1793:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         HAL_CAN_TxMailbox1CompleteCallback(hcan);
1794:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1795:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1796:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       else
1797:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1798:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         if ((tsrflags & CAN_TSR_ALST1) != 0U)
1799:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
1800:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Update error code */
1801:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_ALST1;
1802:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
1803:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         else if ((tsrflags & CAN_TSR_TERR1) != 0U)
1804:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
1805:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Update error code */
1806:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_TERR1;
1807:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
1808:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         else
1809:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
1810:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Transmission Mailbox 1 abort callback */
1811:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1812:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Call registered callback*/
ARM GAS  /tmp/ccCenVhd.s 			page 95


1813:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           hcan->TxMailbox1AbortCallback(hcan);
1814:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #else
1815:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Call weak (surcharged) callback */
1816:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           HAL_CAN_TxMailbox1AbortCallback(hcan);
1817:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1818:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
1819:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1820:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1821:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1822:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Transmit Mailbox 2 management *****************************************/
1823:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((tsrflags & CAN_TSR_RQCP2) != 0U)
1824:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1825:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
1826:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
1827:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1828:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if ((tsrflags & CAN_TSR_TXOK2) != 0U)
1829:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1830:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Transmission Mailbox 2 complete callback */
1831:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1832:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Call registered callback*/
1833:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         hcan->TxMailbox2CompleteCallback(hcan);
1834:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #else
1835:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Call weak (surcharged) callback */
1836:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         HAL_CAN_TxMailbox2CompleteCallback(hcan);
1837:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1838:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1839:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       else
1840:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
1841:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         if ((tsrflags & CAN_TSR_ALST2) != 0U)
1842:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
1843:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Update error code */
1844:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_ALST2;
1845:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
1846:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         else if ((tsrflags & CAN_TSR_TERR2) != 0U)
1847:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
1848:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Update error code */
1849:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_TERR2;
1850:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
1851:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         else
1852:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
1853:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Transmission Mailbox 2 abort callback */
1854:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1855:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Call registered callback*/
1856:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           hcan->TxMailbox2AbortCallback(hcan);
1857:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #else
1858:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           /* Call weak (surcharged) callback */
1859:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           HAL_CAN_TxMailbox2AbortCallback(hcan);
1860:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1861:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
1862:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
1863:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1864:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1865:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1866:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Receive FIFO 0 overrun interrupt management *****************************/
1867:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
1868:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1869:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
ARM GAS  /tmp/ccCenVhd.s 			page 96


1870:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1871:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Set CAN error code to Rx Fifo 0 overrun error */
1872:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       errorcode |= HAL_CAN_ERROR_RX_FOV0;
1873:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1874:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Clear FIFO0 Overrun Flag */
1875:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
1876:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1877:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1878:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1879:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Receive FIFO 0 full interrupt management ********************************/
1880:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
1881:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1882:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
1883:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1884:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Clear FIFO 0 full Flag */
1885:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
1886:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1887:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Receive FIFO 0 full Callback */
1888:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1889:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Call registered callback*/
1890:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       hcan->RxFifo0FullCallback(hcan);
1891:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #else
1892:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Call weak (surcharged) callback */
1893:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       HAL_CAN_RxFifo0FullCallback(hcan);
1894:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1895:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1896:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1897:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1898:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Receive FIFO 0 message pending interrupt management *********************/
1899:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
1900:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1901:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check if message is still pending */
1902:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
1903:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1904:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Receive FIFO 0 mesage pending Callback */
1905:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1906:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Call registered callback*/
1907:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       hcan->RxFifo0MsgPendingCallback(hcan);
1908:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #else
1909:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Call weak (surcharged) callback */
1910:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       HAL_CAN_RxFifo0MsgPendingCallback(hcan);
1911:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1912:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1913:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1914:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1915:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Receive FIFO 1 overrun interrupt management *****************************/
1916:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
1917:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1918:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
1919:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1920:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Set CAN error code to Rx Fifo 1 overrun error */
1921:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       errorcode |= HAL_CAN_ERROR_RX_FOV1;
1922:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1923:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Clear FIFO1 Overrun Flag */
1924:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
1925:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1926:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
ARM GAS  /tmp/ccCenVhd.s 			page 97


1927:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1928:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Receive FIFO 1 full interrupt management ********************************/
1929:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
1930:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1931:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
1932:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1933:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Clear FIFO 1 full Flag */
1934:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
1935:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1936:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Receive FIFO 1 full Callback */
1937:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1938:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Call registered callback*/
1939:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       hcan->RxFifo1FullCallback(hcan);
1940:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #else
1941:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Call weak (surcharged) callback */
1942:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       HAL_CAN_RxFifo1FullCallback(hcan);
1943:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1944:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1945:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1946:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1947:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Receive FIFO 1 message pending interrupt management *********************/
1948:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
1949:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1950:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check if message is still pending */
1951:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
1952:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1953:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Receive FIFO 1 mesage pending Callback */
1954:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1955:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Call registered callback*/
1956:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       hcan->RxFifo1MsgPendingCallback(hcan);
1957:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #else
1958:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Call weak (surcharged) callback */
1959:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       HAL_CAN_RxFifo1MsgPendingCallback(hcan);
1960:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1961:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1962:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1963:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1964:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Sleep interrupt management *********************************************/
1965:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
1966:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1967:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((msrflags & CAN_MSR_SLAKI) != 0U)
1968:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1969:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Clear Sleep interrupt Flag */
1970:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
1971:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1972:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Sleep Callback */
1973:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1974:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Call registered callback*/
1975:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       hcan->SleepCallback(hcan);
1976:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #else
1977:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Call weak (surcharged) callback */
1978:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       HAL_CAN_SleepCallback(hcan);
1979:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1980:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
1981:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
1982:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1983:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* WakeUp interrupt management *********************************************/
ARM GAS  /tmp/ccCenVhd.s 			page 98


1984:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((interrupts & CAN_IT_WAKEUP) != 0U)
1985:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
1986:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((msrflags & CAN_MSR_WKUI) != 0U)
1987:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
1988:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Clear WakeUp Flag */
1989:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
1990:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
1991:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* WakeUp Callback */
1992:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
1993:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Call registered callback*/
1994:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       hcan->WakeUpFromRxMsgCallback(hcan);
1995:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #else
1996:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Call weak (surcharged) callback */
1997:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       HAL_CAN_WakeUpFromRxMsgCallback(hcan);
1998:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
1999:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
2000:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
2001:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
2002:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Error interrupts management *********************************************/
2003:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((interrupts & CAN_IT_ERROR) != 0U)
2004:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
2005:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((msrflags & CAN_MSR_ERRI) != 0U)
2006:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
2007:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check Error Warning Flag */
2008:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
2009:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_EWGF) != 0U))
2010:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
2011:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Set CAN error code to Error Warning */
2012:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         errorcode |= HAL_CAN_ERROR_EWG;
2013:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
2014:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* No need for clear of Error Warning Flag as read-only */
2015:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
2016:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
2017:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check Error Passive Flag */
2018:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
2019:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_EPVF) != 0U))
2020:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
2021:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Set CAN error code to Error Passive */
2022:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         errorcode |= HAL_CAN_ERROR_EPV;
2023:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
2024:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* No need for clear of Error Passive Flag as read-only */
2025:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
2026:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
2027:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check Bus-off Flag */
2028:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
2029:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_BOFF) != 0U))
2030:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
2031:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Set CAN error code to Bus-Off */
2032:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         errorcode |= HAL_CAN_ERROR_BOF;
2033:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
2034:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* No need for clear of Error Bus-Off as read-only */
2035:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
2036:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
2037:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Check Last Error Code Flag */
2038:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
2039:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != 0U))
2040:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
ARM GAS  /tmp/ccCenVhd.s 			page 99


2041:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         switch (esrflags & CAN_ESR_LEC)
2042:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
2043:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           case (CAN_ESR_LEC_0):
2044:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             /* Set CAN error code to Stuff error */
2045:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_STF;
2046:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
2047:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           case (CAN_ESR_LEC_1):
2048:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             /* Set CAN error code to Form error */
2049:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_FOR;
2050:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
2051:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           case (CAN_ESR_LEC_1 | CAN_ESR_LEC_0):
2052:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             /* Set CAN error code to Acknowledgement error */
2053:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_ACK;
2054:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
2055:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           case (CAN_ESR_LEC_2):
2056:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             /* Set CAN error code to Bit recessive error */
2057:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_BR;
2058:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
2059:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_0):
2060:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             /* Set CAN error code to Bit Dominant error */
2061:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_BD;
2062:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
2063:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
2064:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             /* Set CAN error code to CRC error */
2065:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_CRC;
2066:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
2067:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           default:
2068:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
2069:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
2070:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
2071:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         /* Clear Last error code Flag */
2072:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
2073:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
2074:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
2075:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
2076:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Clear ERRI Flag */
2077:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
2078:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
2079:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
2080:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Call the Error call Back in case of Errors */
2081:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if (errorcode != HAL_CAN_ERROR_NONE)
2082:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
2083:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code in handle */
2084:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= errorcode;
2085:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
2086:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Call Error callback function */
2087:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #if USE_HAL_CAN_REGISTER_CALLBACKS == 1
2088:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Call registered callback*/
2089:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCallback(hcan);
2090:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #else
2091:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Call weak (surcharged) callback */
2092:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     HAL_CAN_ErrorCallback(hcan);
2093:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
2094:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
2095:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
2096:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
2097:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
ARM GAS  /tmp/ccCenVhd.s 			page 100


2098:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @}
2099:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
2100:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
2101:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group5 Callback functions
2102:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *  @brief   CAN Callback functions
2103:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *
2104:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @verbatim
2105:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
2106:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****                           ##### Callback functions #####
2107:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
2108:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     [..]
2109:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     This subsection provides the following callback functions:
2110:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_TxMailbox0CompleteCallback
2111:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_TxMailbox1CompleteCallback
2112:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_TxMailbox2CompleteCallback
2113:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_TxMailbox0AbortCallback
2114:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_TxMailbox1AbortCallback
2115:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_TxMailbox2AbortCallback
2116:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_RxFifo0MsgPendingCallback
2117:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_RxFifo0FullCallback
2118:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_RxFifo1MsgPendingCallback
2119:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_RxFifo1FullCallback
2120:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_SleepCallback
2121:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_WakeUpFromRxMsgCallback
2122:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_ErrorCallback
2123:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
2124:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @endverbatim
2125:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @{
2126:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
2127:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
2128:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
2129:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Transmission Mailbox 0 complete callback.
2130:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2131:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2132:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
2133:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
2134:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
2135:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 2160              		.loc 1 2135 1 is_stmt 1 view -0
 2161              		.cfi_startproc
 2162              		@ args = 0, pretend = 0, frame = 0
 2163              		@ frame_needed = 0, uses_anonymous_args = 0
 2164              		@ link register save eliminated.
2136:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2137:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
 2165              		.loc 1 2137 3 view .LVU714
2138:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
2139:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2140:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
2141:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             user file
2142:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
2143:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 2166              		.loc 1 2143 1 is_stmt 0 view .LVU715
 2167 0000 7047     		bx	lr
 2168              		.cfi_endproc
 2169              	.LFE152:
 2171              		.section	.text.HAL_CAN_TxMailbox1CompleteCallback,"ax",%progbits
ARM GAS  /tmp/ccCenVhd.s 			page 101


 2172              		.align	1
 2173              		.weak	HAL_CAN_TxMailbox1CompleteCallback
 2174              		.syntax unified
 2175              		.thumb
 2176              		.thumb_func
 2177              		.fpu fpv4-sp-d16
 2179              	HAL_CAN_TxMailbox1CompleteCallback:
 2180              	.LVL167:
 2181              	.LFB153:
2144:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
2145:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
2146:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Transmission Mailbox 1 complete callback.
2147:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2148:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2149:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
2150:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
2151:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
2152:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 2182              		.loc 1 2152 1 is_stmt 1 view -0
 2183              		.cfi_startproc
 2184              		@ args = 0, pretend = 0, frame = 0
 2185              		@ frame_needed = 0, uses_anonymous_args = 0
 2186              		@ link register save eliminated.
2153:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2154:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
 2187              		.loc 1 2154 3 view .LVU717
2155:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
2156:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2157:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
2158:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             user file
2159:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
2160:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 2188              		.loc 1 2160 1 is_stmt 0 view .LVU718
 2189 0000 7047     		bx	lr
 2190              		.cfi_endproc
 2191              	.LFE153:
 2193              		.section	.text.HAL_CAN_TxMailbox2CompleteCallback,"ax",%progbits
 2194              		.align	1
 2195              		.weak	HAL_CAN_TxMailbox2CompleteCallback
 2196              		.syntax unified
 2197              		.thumb
 2198              		.thumb_func
 2199              		.fpu fpv4-sp-d16
 2201              	HAL_CAN_TxMailbox2CompleteCallback:
 2202              	.LVL168:
 2203              	.LFB154:
2161:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
2162:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
2163:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Transmission Mailbox 2 complete callback.
2164:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2165:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2166:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
2167:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
2168:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
2169:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 2204              		.loc 1 2169 1 is_stmt 1 view -0
 2205              		.cfi_startproc
ARM GAS  /tmp/ccCenVhd.s 			page 102


 2206              		@ args = 0, pretend = 0, frame = 0
 2207              		@ frame_needed = 0, uses_anonymous_args = 0
 2208              		@ link register save eliminated.
2170:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2171:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
 2209              		.loc 1 2171 3 view .LVU720
2172:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
2173:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2174:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
2175:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             user file
2176:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
2177:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 2210              		.loc 1 2177 1 is_stmt 0 view .LVU721
 2211 0000 7047     		bx	lr
 2212              		.cfi_endproc
 2213              	.LFE154:
 2215              		.section	.text.HAL_CAN_TxMailbox0AbortCallback,"ax",%progbits
 2216              		.align	1
 2217              		.weak	HAL_CAN_TxMailbox0AbortCallback
 2218              		.syntax unified
 2219              		.thumb
 2220              		.thumb_func
 2221              		.fpu fpv4-sp-d16
 2223              	HAL_CAN_TxMailbox0AbortCallback:
 2224              	.LVL169:
 2225              	.LFB155:
2178:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
2179:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
2180:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Transmission Mailbox 0 Cancellation callback.
2181:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
2182:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2183:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
2184:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
2185:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
2186:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 2226              		.loc 1 2186 1 is_stmt 1 view -0
 2227              		.cfi_startproc
 2228              		@ args = 0, pretend = 0, frame = 0
 2229              		@ frame_needed = 0, uses_anonymous_args = 0
 2230              		@ link register save eliminated.
2187:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2188:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
 2231              		.loc 1 2188 3 view .LVU723
2189:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
2190:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2191:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
2192:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             user file
2193:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
2194:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 2232              		.loc 1 2194 1 is_stmt 0 view .LVU724
 2233 0000 7047     		bx	lr
 2234              		.cfi_endproc
 2235              	.LFE155:
 2237              		.section	.text.HAL_CAN_TxMailbox1AbortCallback,"ax",%progbits
 2238              		.align	1
 2239              		.weak	HAL_CAN_TxMailbox1AbortCallback
 2240              		.syntax unified
ARM GAS  /tmp/ccCenVhd.s 			page 103


 2241              		.thumb
 2242              		.thumb_func
 2243              		.fpu fpv4-sp-d16
 2245              	HAL_CAN_TxMailbox1AbortCallback:
 2246              	.LVL170:
 2247              	.LFB156:
2195:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
2196:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
2197:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Transmission Mailbox 1 Cancellation callback.
2198:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
2199:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2200:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
2201:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
2202:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
2203:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 2248              		.loc 1 2203 1 is_stmt 1 view -0
 2249              		.cfi_startproc
 2250              		@ args = 0, pretend = 0, frame = 0
 2251              		@ frame_needed = 0, uses_anonymous_args = 0
 2252              		@ link register save eliminated.
2204:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2205:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
 2253              		.loc 1 2205 3 view .LVU726
2206:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
2207:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2208:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
2209:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             user file
2210:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
2211:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 2254              		.loc 1 2211 1 is_stmt 0 view .LVU727
 2255 0000 7047     		bx	lr
 2256              		.cfi_endproc
 2257              	.LFE156:
 2259              		.section	.text.HAL_CAN_TxMailbox2AbortCallback,"ax",%progbits
 2260              		.align	1
 2261              		.weak	HAL_CAN_TxMailbox2AbortCallback
 2262              		.syntax unified
 2263              		.thumb
 2264              		.thumb_func
 2265              		.fpu fpv4-sp-d16
 2267              	HAL_CAN_TxMailbox2AbortCallback:
 2268              	.LVL171:
 2269              	.LFB157:
2212:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
2213:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
2214:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Transmission Mailbox 2 Cancellation callback.
2215:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
2216:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2217:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
2218:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
2219:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
2220:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 2270              		.loc 1 2220 1 is_stmt 1 view -0
 2271              		.cfi_startproc
 2272              		@ args = 0, pretend = 0, frame = 0
 2273              		@ frame_needed = 0, uses_anonymous_args = 0
 2274              		@ link register save eliminated.
ARM GAS  /tmp/ccCenVhd.s 			page 104


2221:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2222:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
 2275              		.loc 1 2222 3 view .LVU729
2223:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
2224:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2225:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
2226:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             user file
2227:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
2228:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 2276              		.loc 1 2228 1 is_stmt 0 view .LVU730
 2277 0000 7047     		bx	lr
 2278              		.cfi_endproc
 2279              	.LFE157:
 2281              		.section	.text.HAL_CAN_RxFifo0MsgPendingCallback,"ax",%progbits
 2282              		.align	1
 2283              		.weak	HAL_CAN_RxFifo0MsgPendingCallback
 2284              		.syntax unified
 2285              		.thumb
 2286              		.thumb_func
 2287              		.fpu fpv4-sp-d16
 2289              	HAL_CAN_RxFifo0MsgPendingCallback:
 2290              	.LVL172:
 2291              	.LFB158:
2229:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
2230:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
2231:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Rx FIFO 0 message pending callback.
2232:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2233:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2234:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
2235:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
2236:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
2237:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 2292              		.loc 1 2237 1 is_stmt 1 view -0
 2293              		.cfi_startproc
 2294              		@ args = 0, pretend = 0, frame = 0
 2295              		@ frame_needed = 0, uses_anonymous_args = 0
 2296              		@ link register save eliminated.
2238:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2239:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
 2297              		.loc 1 2239 3 view .LVU732
2240:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
2241:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2242:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
2243:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             user file
2244:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
2245:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 2298              		.loc 1 2245 1 is_stmt 0 view .LVU733
 2299 0000 7047     		bx	lr
 2300              		.cfi_endproc
 2301              	.LFE158:
 2303              		.section	.text.HAL_CAN_RxFifo0FullCallback,"ax",%progbits
 2304              		.align	1
 2305              		.weak	HAL_CAN_RxFifo0FullCallback
 2306              		.syntax unified
 2307              		.thumb
 2308              		.thumb_func
 2309              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccCenVhd.s 			page 105


 2311              	HAL_CAN_RxFifo0FullCallback:
 2312              	.LVL173:
 2313              	.LFB159:
2246:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
2247:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
2248:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Rx FIFO 0 full callback.
2249:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2250:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2251:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
2252:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
2253:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
2254:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 2314              		.loc 1 2254 1 is_stmt 1 view -0
 2315              		.cfi_startproc
 2316              		@ args = 0, pretend = 0, frame = 0
 2317              		@ frame_needed = 0, uses_anonymous_args = 0
 2318              		@ link register save eliminated.
2255:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2256:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
 2319              		.loc 1 2256 3 view .LVU735
2257:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
2258:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2259:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_RxFifo0FullCallback could be implemented in the user
2260:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             file
2261:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
2262:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 2320              		.loc 1 2262 1 is_stmt 0 view .LVU736
 2321 0000 7047     		bx	lr
 2322              		.cfi_endproc
 2323              	.LFE159:
 2325              		.section	.text.HAL_CAN_RxFifo1MsgPendingCallback,"ax",%progbits
 2326              		.align	1
 2327              		.weak	HAL_CAN_RxFifo1MsgPendingCallback
 2328              		.syntax unified
 2329              		.thumb
 2330              		.thumb_func
 2331              		.fpu fpv4-sp-d16
 2333              	HAL_CAN_RxFifo1MsgPendingCallback:
 2334              	.LVL174:
 2335              	.LFB160:
2263:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
2264:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
2265:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Rx FIFO 1 message pending callback.
2266:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2267:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2268:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
2269:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
2270:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
2271:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 2336              		.loc 1 2271 1 is_stmt 1 view -0
 2337              		.cfi_startproc
 2338              		@ args = 0, pretend = 0, frame = 0
 2339              		@ frame_needed = 0, uses_anonymous_args = 0
 2340              		@ link register save eliminated.
2272:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2273:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
 2341              		.loc 1 2273 3 view .LVU738
ARM GAS  /tmp/ccCenVhd.s 			page 106


2274:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
2275:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2276:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
2277:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             user file
2278:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
2279:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 2342              		.loc 1 2279 1 is_stmt 0 view .LVU739
 2343 0000 7047     		bx	lr
 2344              		.cfi_endproc
 2345              	.LFE160:
 2347              		.section	.text.HAL_CAN_RxFifo1FullCallback,"ax",%progbits
 2348              		.align	1
 2349              		.weak	HAL_CAN_RxFifo1FullCallback
 2350              		.syntax unified
 2351              		.thumb
 2352              		.thumb_func
 2353              		.fpu fpv4-sp-d16
 2355              	HAL_CAN_RxFifo1FullCallback:
 2356              	.LVL175:
 2357              	.LFB161:
2280:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
2281:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
2282:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Rx FIFO 1 full callback.
2283:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2284:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2285:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
2286:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
2287:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
2288:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 2358              		.loc 1 2288 1 is_stmt 1 view -0
 2359              		.cfi_startproc
 2360              		@ args = 0, pretend = 0, frame = 0
 2361              		@ frame_needed = 0, uses_anonymous_args = 0
 2362              		@ link register save eliminated.
2289:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2290:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
 2363              		.loc 1 2290 3 view .LVU741
2291:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
2292:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2293:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_RxFifo1FullCallback could be implemented in the user
2294:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             file
2295:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
2296:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 2364              		.loc 1 2296 1 is_stmt 0 view .LVU742
 2365 0000 7047     		bx	lr
 2366              		.cfi_endproc
 2367              	.LFE161:
 2369              		.section	.text.HAL_CAN_SleepCallback,"ax",%progbits
 2370              		.align	1
 2371              		.weak	HAL_CAN_SleepCallback
 2372              		.syntax unified
 2373              		.thumb
 2374              		.thumb_func
 2375              		.fpu fpv4-sp-d16
 2377              	HAL_CAN_SleepCallback:
 2378              	.LVL176:
 2379              	.LFB162:
ARM GAS  /tmp/ccCenVhd.s 			page 107


2297:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
2298:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
2299:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Sleep callback.
2300:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2301:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2302:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
2303:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
2304:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
2305:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 2380              		.loc 1 2305 1 is_stmt 1 view -0
 2381              		.cfi_startproc
 2382              		@ args = 0, pretend = 0, frame = 0
 2383              		@ frame_needed = 0, uses_anonymous_args = 0
 2384              		@ link register save eliminated.
2306:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2307:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
 2385              		.loc 1 2307 3 view .LVU744
2308:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
2309:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2310:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_SleepCallback could be implemented in the user file
2311:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
2312:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 2386              		.loc 1 2312 1 is_stmt 0 view .LVU745
 2387 0000 7047     		bx	lr
 2388              		.cfi_endproc
 2389              	.LFE162:
 2391              		.section	.text.HAL_CAN_WakeUpFromRxMsgCallback,"ax",%progbits
 2392              		.align	1
 2393              		.weak	HAL_CAN_WakeUpFromRxMsgCallback
 2394              		.syntax unified
 2395              		.thumb
 2396              		.thumb_func
 2397              		.fpu fpv4-sp-d16
 2399              	HAL_CAN_WakeUpFromRxMsgCallback:
 2400              	.LVL177:
 2401              	.LFB163:
2313:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
2314:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
2315:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  WakeUp from Rx message callback.
2316:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2317:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2318:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
2319:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
2320:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
2321:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 2402              		.loc 1 2321 1 is_stmt 1 view -0
 2403              		.cfi_startproc
 2404              		@ args = 0, pretend = 0, frame = 0
 2405              		@ frame_needed = 0, uses_anonymous_args = 0
 2406              		@ link register save eliminated.
2322:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2323:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
 2407              		.loc 1 2323 3 view .LVU747
2324:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
2325:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2326:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
2327:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             user file
ARM GAS  /tmp/ccCenVhd.s 			page 108


2328:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
2329:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 2408              		.loc 1 2329 1 is_stmt 0 view .LVU748
 2409 0000 7047     		bx	lr
 2410              		.cfi_endproc
 2411              	.LFE163:
 2413              		.section	.text.HAL_CAN_ErrorCallback,"ax",%progbits
 2414              		.align	1
 2415              		.weak	HAL_CAN_ErrorCallback
 2416              		.syntax unified
 2417              		.thumb
 2418              		.thumb_func
 2419              		.fpu fpv4-sp-d16
 2421              	HAL_CAN_ErrorCallback:
 2422              	.LVL178:
 2423              	.LFB164:
2330:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
2331:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
2332:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Error CAN callback.
2333:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2334:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2335:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval None
2336:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
2337:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** __weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
2338:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 2424              		.loc 1 2338 1 is_stmt 1 view -0
 2425              		.cfi_startproc
 2426              		@ args = 0, pretend = 0, frame = 0
 2427              		@ frame_needed = 0, uses_anonymous_args = 0
 2428              		@ link register save eliminated.
2339:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
2340:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   UNUSED(hcan);
 2429              		.loc 1 2340 3 view .LVU750
2341:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
2342:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
2343:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             the HAL_CAN_ErrorCallback could be implemented in the user file
2344:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****    */
2345:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 2430              		.loc 1 2345 1 is_stmt 0 view .LVU751
 2431 0000 7047     		bx	lr
 2432              		.cfi_endproc
 2433              	.LFE164:
 2435              		.section	.text.HAL_CAN_IRQHandler,"ax",%progbits
 2436              		.align	1
 2437              		.global	HAL_CAN_IRQHandler
 2438              		.syntax unified
 2439              		.thumb
 2440              		.thumb_func
 2441              		.fpu fpv4-sp-d16
 2443              	HAL_CAN_IRQHandler:
 2444              	.LVL179:
 2445              	.LFB151:
1724:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t errorcode = HAL_CAN_ERROR_NONE;
 2446              		.loc 1 1724 1 is_stmt 1 view -0
 2447              		.cfi_startproc
 2448              		@ args = 0, pretend = 0, frame = 0
 2449              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccCenVhd.s 			page 109


1724:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t errorcode = HAL_CAN_ERROR_NONE;
 2450              		.loc 1 1724 1 is_stmt 0 view .LVU753
 2451 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2452              	.LCFI15:
 2453              		.cfi_def_cfa_offset 40
 2454              		.cfi_offset 3, -40
 2455              		.cfi_offset 4, -36
 2456              		.cfi_offset 5, -32
 2457              		.cfi_offset 6, -28
 2458              		.cfi_offset 7, -24
 2459              		.cfi_offset 8, -20
 2460              		.cfi_offset 9, -16
 2461              		.cfi_offset 10, -12
 2462              		.cfi_offset 11, -8
 2463              		.cfi_offset 14, -4
 2464 0004 0546     		mov	r5, r0
1725:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t interrupts = READ_REG(hcan->Instance->IER);
 2465              		.loc 1 1725 3 is_stmt 1 view .LVU754
 2466              	.LVL180:
1726:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 2467              		.loc 1 1726 3 view .LVU755
1726:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 2468              		.loc 1 1726 25 is_stmt 0 view .LVU756
 2469 0006 0368     		ldr	r3, [r0]
1726:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 2470              		.loc 1 1726 12 view .LVU757
 2471 0008 5C69     		ldr	r4, [r3, #20]
 2472              	.LVL181:
1727:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 2473              		.loc 1 1727 3 is_stmt 1 view .LVU758
1727:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 2474              		.loc 1 1727 12 is_stmt 0 view .LVU759
 2475 000a D3F80480 		ldr	r8, [r3, #4]
 2476              	.LVL182:
1728:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 2477              		.loc 1 1728 3 is_stmt 1 view .LVU760
1728:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 2478              		.loc 1 1728 12 is_stmt 0 view .LVU761
 2479 000e 9F68     		ldr	r7, [r3, #8]
 2480              	.LVL183:
1729:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 2481              		.loc 1 1729 3 is_stmt 1 view .LVU762
1729:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 2482              		.loc 1 1729 12 is_stmt 0 view .LVU763
 2483 0010 D3F80CB0 		ldr	fp, [r3, #12]
 2484              	.LVL184:
1730:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 2485              		.loc 1 1730 3 is_stmt 1 view .LVU764
1730:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 2486              		.loc 1 1730 12 is_stmt 0 view .LVU765
 2487 0014 D3F810A0 		ldr	r10, [r3, #16]
 2488              	.LVL185:
1731:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2489              		.loc 1 1731 3 is_stmt 1 view .LVU766
1731:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2490              		.loc 1 1731 12 is_stmt 0 view .LVU767
 2491 0018 D3F81890 		ldr	r9, [r3, #24]
ARM GAS  /tmp/ccCenVhd.s 			page 110


 2492              	.LVL186:
1734:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 2493              		.loc 1 1734 3 is_stmt 1 view .LVU768
1734:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 2494              		.loc 1 1734 6 is_stmt 0 view .LVU769
 2495 001c 14F00106 		ands	r6, r4, #1
 2496 0020 3BD0     		beq	.L169
1737:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2497              		.loc 1 1737 5 is_stmt 1 view .LVU770
1737:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2498              		.loc 1 1737 8 is_stmt 0 view .LVU771
 2499 0022 17F00106 		ands	r6, r7, #1
 2500 0026 16D0     		beq	.L170
1740:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2501              		.loc 1 1740 7 is_stmt 1 view .LVU772
 2502 0028 0122     		movs	r2, #1
 2503 002a 9A60     		str	r2, [r3, #8]
1742:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
 2504              		.loc 1 1742 7 view .LVU773
1742:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
 2505              		.loc 1 1742 10 is_stmt 0 view .LVU774
 2506 002c 17F0020F 		tst	r7, #2
 2507 0030 08D1     		bne	.L204
1755:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
 2508              		.loc 1 1755 9 is_stmt 1 view .LVU775
1755:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
 2509              		.loc 1 1755 12 is_stmt 0 view .LVU776
 2510 0032 17F0040F 		tst	r7, #4
 2511 0036 0CD1     		bne	.L201
1760:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
 2512              		.loc 1 1760 14 is_stmt 1 view .LVU777
1760:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
 2513              		.loc 1 1760 17 is_stmt 0 view .LVU778
 2514 0038 17F00806 		ands	r6, r7, #8
 2515 003c 06D0     		beq	.L205
1763:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
 2516              		.loc 1 1763 21 view .LVU779
 2517 003e 4FF48056 		mov	r6, #4096
 2518 0042 08E0     		b	.L170
 2519              	.L204:
1750:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2520              		.loc 1 1750 9 is_stmt 1 view .LVU780
 2521 0044 FFF7FEFF 		bl	HAL_CAN_TxMailbox0CompleteCallback
 2522              	.LVL187:
1725:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   uint32_t interrupts = READ_REG(hcan->Instance->IER);
 2523              		.loc 1 1725 12 is_stmt 0 view .LVU781
 2524 0048 0026     		movs	r6, #0
 2525 004a 04E0     		b	.L170
 2526              	.LVL188:
 2527              	.L205:
1773:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2528              		.loc 1 1773 11 is_stmt 1 view .LVU782
 2529 004c FFF7FEFF 		bl	HAL_CAN_TxMailbox0AbortCallback
 2530              	.LVL189:
1773:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2531              		.loc 1 1773 11 is_stmt 0 view .LVU783
 2532 0050 01E0     		b	.L170
ARM GAS  /tmp/ccCenVhd.s 			page 111


 2533              	.LVL190:
 2534              	.L201:
1758:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
 2535              		.loc 1 1758 21 view .LVU784
 2536 0052 4FF40066 		mov	r6, #2048
 2537              	.LVL191:
 2538              	.L170:
1780:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2539              		.loc 1 1780 5 is_stmt 1 view .LVU785
1780:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2540              		.loc 1 1780 8 is_stmt 0 view .LVU786
 2541 0056 17F4807F 		tst	r7, #256
 2542 005a 0DD0     		beq	.L172
1783:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2543              		.loc 1 1783 7 is_stmt 1 view .LVU787
 2544 005c 2B68     		ldr	r3, [r5]
 2545 005e 4FF48072 		mov	r2, #256
 2546 0062 9A60     		str	r2, [r3, #8]
1785:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
 2547              		.loc 1 1785 7 view .LVU788
1785:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
 2548              		.loc 1 1785 10 is_stmt 0 view .LVU789
 2549 0064 17F4007F 		tst	r7, #512
 2550 0068 40F08680 		bne	.L206
1798:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
 2551              		.loc 1 1798 9 is_stmt 1 view .LVU790
1798:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
 2552              		.loc 1 1798 12 is_stmt 0 view .LVU791
 2553 006c 17F4806F 		tst	r7, #1024
 2554 0070 00F08680 		beq	.L174
1801:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
 2555              		.loc 1 1801 11 is_stmt 1 view .LVU792
1801:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
 2556              		.loc 1 1801 21 is_stmt 0 view .LVU793
 2557 0074 46F40056 		orr	r6, r6, #8192
 2558              	.LVL192:
 2559              	.L172:
1823:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2560              		.loc 1 1823 5 is_stmt 1 view .LVU794
1823:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2561              		.loc 1 1823 8 is_stmt 0 view .LVU795
 2562 0078 17F4803F 		tst	r7, #65536
 2563 007c 0DD0     		beq	.L169
1826:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2564              		.loc 1 1826 7 is_stmt 1 view .LVU796
 2565 007e 2B68     		ldr	r3, [r5]
 2566 0080 4FF48032 		mov	r2, #65536
 2567 0084 9A60     		str	r2, [r3, #8]
1828:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
 2568              		.loc 1 1828 7 view .LVU797
1828:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       {
 2569              		.loc 1 1828 10 is_stmt 0 view .LVU798
 2570 0086 17F4003F 		tst	r7, #131072
 2571 008a 40F08380 		bne	.L207
1841:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
 2572              		.loc 1 1841 9 is_stmt 1 view .LVU799
1841:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
ARM GAS  /tmp/ccCenVhd.s 			page 112


 2573              		.loc 1 1841 12 is_stmt 0 view .LVU800
 2574 008e 17F4802F 		tst	r7, #262144
 2575 0092 00F08380 		beq	.L177
1844:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
 2576              		.loc 1 1844 11 is_stmt 1 view .LVU801
1844:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
 2577              		.loc 1 1844 21 is_stmt 0 view .LVU802
 2578 0096 46F40046 		orr	r6, r6, #32768
 2579              	.LVL193:
 2580              	.L169:
1867:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 2581              		.loc 1 1867 3 is_stmt 1 view .LVU803
1867:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 2582              		.loc 1 1867 6 is_stmt 0 view .LVU804
 2583 009a 14F0080F 		tst	r4, #8
 2584 009e 07D0     		beq	.L179
1869:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2585              		.loc 1 1869 5 is_stmt 1 view .LVU805
1869:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2586              		.loc 1 1869 8 is_stmt 0 view .LVU806
 2587 00a0 1BF0100F 		tst	fp, #16
 2588 00a4 04D0     		beq	.L179
1872:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2589              		.loc 1 1872 7 is_stmt 1 view .LVU807
1872:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2590              		.loc 1 1872 17 is_stmt 0 view .LVU808
 2591 00a6 46F40076 		orr	r6, r6, #512
 2592              	.LVL194:
1875:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 2593              		.loc 1 1875 7 is_stmt 1 view .LVU809
 2594 00aa 2B68     		ldr	r3, [r5]
 2595 00ac 1022     		movs	r2, #16
 2596 00ae DA60     		str	r2, [r3, #12]
 2597              	.L179:
1880:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 2598              		.loc 1 1880 3 view .LVU810
1880:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 2599              		.loc 1 1880 6 is_stmt 0 view .LVU811
 2600 00b0 14F0040F 		tst	r4, #4
 2601 00b4 02D0     		beq	.L180
1882:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2602              		.loc 1 1882 5 is_stmt 1 view .LVU812
1882:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2603              		.loc 1 1882 8 is_stmt 0 view .LVU813
 2604 00b6 1BF0080F 		tst	fp, #8
 2605 00ba 79D1     		bne	.L208
 2606              	.L180:
1899:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 2607              		.loc 1 1899 3 is_stmt 1 view .LVU814
1899:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 2608              		.loc 1 1899 6 is_stmt 0 view .LVU815
 2609 00bc 14F0020F 		tst	r4, #2
 2610 00c0 04D0     		beq	.L181
1902:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2611              		.loc 1 1902 5 is_stmt 1 view .LVU816
1902:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2612              		.loc 1 1902 14 is_stmt 0 view .LVU817
ARM GAS  /tmp/ccCenVhd.s 			page 113


 2613 00c2 2B68     		ldr	r3, [r5]
1902:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2614              		.loc 1 1902 24 view .LVU818
 2615 00c4 DB68     		ldr	r3, [r3, #12]
1902:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2616              		.loc 1 1902 8 view .LVU819
 2617 00c6 13F0030F 		tst	r3, #3
 2618 00ca 78D1     		bne	.L209
 2619              	.L181:
1916:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 2620              		.loc 1 1916 3 is_stmt 1 view .LVU820
1916:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 2621              		.loc 1 1916 6 is_stmt 0 view .LVU821
 2622 00cc 14F0400F 		tst	r4, #64
 2623 00d0 07D0     		beq	.L182
1918:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2624              		.loc 1 1918 5 is_stmt 1 view .LVU822
1918:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2625              		.loc 1 1918 8 is_stmt 0 view .LVU823
 2626 00d2 1AF0100F 		tst	r10, #16
 2627 00d6 04D0     		beq	.L182
1921:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2628              		.loc 1 1921 7 is_stmt 1 view .LVU824
1921:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2629              		.loc 1 1921 17 is_stmt 0 view .LVU825
 2630 00d8 46F48066 		orr	r6, r6, #1024
 2631              	.LVL195:
1924:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 2632              		.loc 1 1924 7 is_stmt 1 view .LVU826
 2633 00dc 2B68     		ldr	r3, [r5]
 2634 00de 1022     		movs	r2, #16
 2635 00e0 1A61     		str	r2, [r3, #16]
 2636              	.L182:
1929:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 2637              		.loc 1 1929 3 view .LVU827
1929:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 2638              		.loc 1 1929 6 is_stmt 0 view .LVU828
 2639 00e2 14F0200F 		tst	r4, #32
 2640 00e6 02D0     		beq	.L183
1931:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2641              		.loc 1 1931 5 is_stmt 1 view .LVU829
1931:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2642              		.loc 1 1931 8 is_stmt 0 view .LVU830
 2643 00e8 1AF0080F 		tst	r10, #8
 2644 00ec 6BD1     		bne	.L210
 2645              	.L183:
1948:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 2646              		.loc 1 1948 3 is_stmt 1 view .LVU831
1948:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 2647              		.loc 1 1948 6 is_stmt 0 view .LVU832
 2648 00ee 14F0100F 		tst	r4, #16
 2649 00f2 04D0     		beq	.L184
1951:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2650              		.loc 1 1951 5 is_stmt 1 view .LVU833
1951:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2651              		.loc 1 1951 14 is_stmt 0 view .LVU834
 2652 00f4 2B68     		ldr	r3, [r5]
ARM GAS  /tmp/ccCenVhd.s 			page 114


1951:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2653              		.loc 1 1951 24 view .LVU835
 2654 00f6 1B69     		ldr	r3, [r3, #16]
1951:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2655              		.loc 1 1951 8 view .LVU836
 2656 00f8 13F0030F 		tst	r3, #3
 2657 00fc 6AD1     		bne	.L211
 2658              	.L184:
1965:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 2659              		.loc 1 1965 3 is_stmt 1 view .LVU837
1965:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 2660              		.loc 1 1965 6 is_stmt 0 view .LVU838
 2661 00fe 14F4003F 		tst	r4, #131072
 2662 0102 02D0     		beq	.L185
1967:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2663              		.loc 1 1967 5 is_stmt 1 view .LVU839
1967:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2664              		.loc 1 1967 8 is_stmt 0 view .LVU840
 2665 0104 18F0100F 		tst	r8, #16
 2666 0108 68D1     		bne	.L212
 2667              	.L185:
1984:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 2668              		.loc 1 1984 3 is_stmt 1 view .LVU841
1984:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 2669              		.loc 1 1984 6 is_stmt 0 view .LVU842
 2670 010a 14F4803F 		tst	r4, #65536
 2671 010e 02D0     		beq	.L186
1986:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2672              		.loc 1 1986 5 is_stmt 1 view .LVU843
1986:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2673              		.loc 1 1986 8 is_stmt 0 view .LVU844
 2674 0110 18F0080F 		tst	r8, #8
 2675 0114 69D1     		bne	.L213
 2676              	.L186:
2003:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 2677              		.loc 1 2003 3 is_stmt 1 view .LVU845
2003:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 2678              		.loc 1 2003 6 is_stmt 0 view .LVU846
 2679 0116 14F4004F 		tst	r4, #32768
 2680 011a 7AD0     		beq	.L187
2005:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2681              		.loc 1 2005 5 is_stmt 1 view .LVU847
2005:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2682              		.loc 1 2005 8 is_stmt 0 view .LVU848
 2683 011c 18F0040F 		tst	r8, #4
 2684 0120 74D0     		beq	.L188
2008:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_EWGF) != 0U))
 2685              		.loc 1 2008 7 is_stmt 1 view .LVU849
2008:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_EWGF) != 0U))
 2686              		.loc 1 2008 10 is_stmt 0 view .LVU850
 2687 0122 14F4807F 		tst	r4, #256
 2688 0126 04D0     		beq	.L189
2008:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_EWGF) != 0U))
 2689              		.loc 1 2008 55 discriminator 1 view .LVU851
 2690 0128 19F0010F 		tst	r9, #1
 2691 012c 01D0     		beq	.L189
2012:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
ARM GAS  /tmp/ccCenVhd.s 			page 115


 2692              		.loc 1 2012 9 is_stmt 1 view .LVU852
2012:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2693              		.loc 1 2012 19 is_stmt 0 view .LVU853
 2694 012e 46F00106 		orr	r6, r6, #1
 2695              	.LVL196:
 2696              	.L189:
2018:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_EPVF) != 0U))
 2697              		.loc 1 2018 7 is_stmt 1 view .LVU854
2018:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_EPVF) != 0U))
 2698              		.loc 1 2018 10 is_stmt 0 view .LVU855
 2699 0132 14F4007F 		tst	r4, #512
 2700 0136 04D0     		beq	.L190
2018:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_EPVF) != 0U))
 2701              		.loc 1 2018 55 discriminator 1 view .LVU856
 2702 0138 19F0020F 		tst	r9, #2
 2703 013c 01D0     		beq	.L190
2022:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2704              		.loc 1 2022 9 is_stmt 1 view .LVU857
2022:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2705              		.loc 1 2022 19 is_stmt 0 view .LVU858
 2706 013e 46F00206 		orr	r6, r6, #2
 2707              	.LVL197:
 2708              	.L190:
2028:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_BOFF) != 0U))
 2709              		.loc 1 2028 7 is_stmt 1 view .LVU859
2028:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_BOFF) != 0U))
 2710              		.loc 1 2028 10 is_stmt 0 view .LVU860
 2711 0142 14F4806F 		tst	r4, #1024
 2712 0146 04D0     		beq	.L191
2028:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_BOFF) != 0U))
 2713              		.loc 1 2028 48 discriminator 1 view .LVU861
 2714 0148 19F0040F 		tst	r9, #4
 2715 014c 01D0     		beq	.L191
2032:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2716              		.loc 1 2032 9 is_stmt 1 view .LVU862
2032:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2717              		.loc 1 2032 19 is_stmt 0 view .LVU863
 2718 014e 46F00406 		orr	r6, r6, #4
 2719              	.LVL198:
 2720              	.L191:
2038:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != 0U))
 2721              		.loc 1 2038 7 is_stmt 1 view .LVU864
2038:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != 0U))
 2722              		.loc 1 2038 10 is_stmt 0 view .LVU865
 2723 0152 14F4006F 		tst	r4, #2048
 2724 0156 59D0     		beq	.L188
2038:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != 0U))
 2725              		.loc 1 2038 57 discriminator 1 view .LVU866
 2726 0158 19F07009 		ands	r9, r9, #112
 2727              	.LVL199:
2038:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != 0U))
 2728              		.loc 1 2038 57 discriminator 1 view .LVU867
 2729 015c 56D0     		beq	.L188
2041:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
 2730              		.loc 1 2041 9 is_stmt 1 view .LVU868
 2731 015e B9F1400F 		cmp	r9, #64
 2732 0162 65D0     		beq	.L192
ARM GAS  /tmp/ccCenVhd.s 			page 116


 2733 0164 58D8     		bhi	.L193
 2734 0166 B9F1200F 		cmp	r9, #32
 2735 016a 5ED0     		beq	.L194
 2736 016c B9F1300F 		cmp	r9, #48
 2737 0170 42D1     		bne	.L214
2053:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
 2738              		.loc 1 2053 13 view .LVU869
2053:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
 2739              		.loc 1 2053 23 is_stmt 0 view .LVU870
 2740 0172 46F02006 		orr	r6, r6, #32
 2741              	.LVL200:
2054:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           case (CAN_ESR_LEC_2):
 2742              		.loc 1 2054 13 is_stmt 1 view .LVU871
 2743 0176 44E0     		b	.L197
 2744              	.LVL201:
 2745              	.L206:
1793:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2746              		.loc 1 1793 9 view .LVU872
 2747 0178 2846     		mov	r0, r5
 2748 017a FFF7FEFF 		bl	HAL_CAN_TxMailbox1CompleteCallback
 2749              	.LVL202:
 2750 017e 7BE7     		b	.L172
 2751              	.L174:
1803:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
 2752              		.loc 1 1803 14 view .LVU873
1803:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
 2753              		.loc 1 1803 17 is_stmt 0 view .LVU874
 2754 0180 17F4006F 		tst	r7, #2048
 2755 0184 02D0     		beq	.L175
1806:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
 2756              		.loc 1 1806 11 is_stmt 1 view .LVU875
1806:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
 2757              		.loc 1 1806 21 is_stmt 0 view .LVU876
 2758 0186 46F48046 		orr	r6, r6, #16384
 2759              	.LVL203:
1806:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
 2760              		.loc 1 1806 21 view .LVU877
 2761 018a 75E7     		b	.L172
 2762              	.L175:
1816:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2763              		.loc 1 1816 11 is_stmt 1 view .LVU878
 2764 018c 2846     		mov	r0, r5
 2765 018e FFF7FEFF 		bl	HAL_CAN_TxMailbox1AbortCallback
 2766              	.LVL204:
 2767 0192 71E7     		b	.L172
 2768              	.L207:
1836:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2769              		.loc 1 1836 9 view .LVU879
 2770 0194 2846     		mov	r0, r5
 2771 0196 FFF7FEFF 		bl	HAL_CAN_TxMailbox2CompleteCallback
 2772              	.LVL205:
 2773 019a 7EE7     		b	.L169
 2774              	.L177:
1846:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
 2775              		.loc 1 1846 14 view .LVU880
1846:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
 2776              		.loc 1 1846 17 is_stmt 0 view .LVU881
ARM GAS  /tmp/ccCenVhd.s 			page 117


 2777 019c 17F4002F 		tst	r7, #524288
 2778 01a0 02D0     		beq	.L178
1849:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
 2779              		.loc 1 1849 11 is_stmt 1 view .LVU882
1849:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
 2780              		.loc 1 1849 21 is_stmt 0 view .LVU883
 2781 01a2 46F48036 		orr	r6, r6, #65536
 2782              	.LVL206:
1849:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         }
 2783              		.loc 1 1849 21 view .LVU884
 2784 01a6 78E7     		b	.L169
 2785              	.L178:
1859:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2786              		.loc 1 1859 11 is_stmt 1 view .LVU885
 2787 01a8 2846     		mov	r0, r5
 2788 01aa FFF7FEFF 		bl	HAL_CAN_TxMailbox2AbortCallback
 2789              	.LVL207:
 2790 01ae 74E7     		b	.L169
 2791              	.L208:
1885:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2792              		.loc 1 1885 7 view .LVU886
 2793 01b0 2B68     		ldr	r3, [r5]
 2794 01b2 0822     		movs	r2, #8
 2795 01b4 DA60     		str	r2, [r3, #12]
1893:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2796              		.loc 1 1893 7 view .LVU887
 2797 01b6 2846     		mov	r0, r5
 2798 01b8 FFF7FEFF 		bl	HAL_CAN_RxFifo0FullCallback
 2799              	.LVL208:
 2800 01bc 7EE7     		b	.L180
 2801              	.L209:
1910:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2802              		.loc 1 1910 7 view .LVU888
 2803 01be 2846     		mov	r0, r5
 2804 01c0 FFF7FEFF 		bl	HAL_CAN_RxFifo0MsgPendingCallback
 2805              	.LVL209:
 2806 01c4 82E7     		b	.L181
 2807              	.L210:
1934:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2808              		.loc 1 1934 7 view .LVU889
 2809 01c6 2B68     		ldr	r3, [r5]
 2810 01c8 0822     		movs	r2, #8
 2811 01ca 1A61     		str	r2, [r3, #16]
1942:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2812              		.loc 1 1942 7 view .LVU890
 2813 01cc 2846     		mov	r0, r5
 2814 01ce FFF7FEFF 		bl	HAL_CAN_RxFifo1FullCallback
 2815              	.LVL210:
 2816 01d2 8CE7     		b	.L183
 2817              	.L211:
1959:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2818              		.loc 1 1959 7 view .LVU891
 2819 01d4 2846     		mov	r0, r5
 2820 01d6 FFF7FEFF 		bl	HAL_CAN_RxFifo1MsgPendingCallback
 2821              	.LVL211:
 2822 01da 90E7     		b	.L184
 2823              	.L212:
ARM GAS  /tmp/ccCenVhd.s 			page 118


1970:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2824              		.loc 1 1970 7 view .LVU892
 2825 01dc 2B68     		ldr	r3, [r5]
 2826 01de 1022     		movs	r2, #16
 2827 01e0 5A60     		str	r2, [r3, #4]
1978:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2828              		.loc 1 1978 7 view .LVU893
 2829 01e2 2846     		mov	r0, r5
 2830 01e4 FFF7FEFF 		bl	HAL_CAN_SleepCallback
 2831              	.LVL212:
 2832 01e8 8FE7     		b	.L185
 2833              	.L213:
1989:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2834              		.loc 1 1989 7 view .LVU894
 2835 01ea 2B68     		ldr	r3, [r5]
 2836 01ec 0822     		movs	r2, #8
 2837 01ee 5A60     		str	r2, [r3, #4]
1997:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2838              		.loc 1 1997 7 view .LVU895
 2839 01f0 2846     		mov	r0, r5
 2840 01f2 FFF7FEFF 		bl	HAL_CAN_WakeUpFromRxMsgCallback
 2841              	.LVL213:
 2842 01f6 8EE7     		b	.L186
 2843              	.LVL214:
 2844              	.L214:
2041:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
 2845              		.loc 1 2041 9 is_stmt 0 view .LVU896
 2846 01f8 B9F1100F 		cmp	r9, #16
 2847 01fc 01D1     		bne	.L197
2045:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
 2848              		.loc 1 2045 13 is_stmt 1 view .LVU897
2045:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
 2849              		.loc 1 2045 23 is_stmt 0 view .LVU898
 2850 01fe 46F00806 		orr	r6, r6, #8
 2851              	.LVL215:
2046:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           case (CAN_ESR_LEC_1):
 2852              		.loc 1 2046 13 is_stmt 1 view .LVU899
 2853              	.L197:
2072:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       }
 2854              		.loc 1 2072 9 view .LVU900
 2855 0202 2A68     		ldr	r2, [r5]
 2856 0204 9369     		ldr	r3, [r2, #24]
 2857 0206 23F07003 		bic	r3, r3, #112
 2858 020a 9361     		str	r3, [r2, #24]
 2859              	.L188:
2077:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 2860              		.loc 1 2077 5 view .LVU901
 2861 020c 2B68     		ldr	r3, [r5]
 2862 020e 0422     		movs	r2, #4
 2863 0210 5A60     		str	r2, [r3, #4]
 2864              	.L187:
2081:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 2865              		.loc 1 2081 3 view .LVU902
2081:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
 2866              		.loc 1 2081 6 is_stmt 0 view .LVU903
 2867 0212 9EB9     		cbnz	r6, .L215
 2868              	.LVL216:
ARM GAS  /tmp/ccCenVhd.s 			page 119


 2869              	.L168:
2095:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2870              		.loc 1 2095 1 view .LVU904
 2871 0214 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2872              	.LVL217:
 2873              	.L193:
2041:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****         {
 2874              		.loc 1 2041 9 view .LVU905
 2875 0218 B9F1500F 		cmp	r9, #80
 2876 021c 0BD0     		beq	.L198
 2877 021e B9F1600F 		cmp	r9, #96
 2878 0222 EED1     		bne	.L197
2065:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
 2879              		.loc 1 2065 13 is_stmt 1 view .LVU906
2065:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
 2880              		.loc 1 2065 23 is_stmt 0 view .LVU907
 2881 0224 46F48076 		orr	r6, r6, #256
 2882              	.LVL218:
2066:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           default:
 2883              		.loc 1 2066 13 is_stmt 1 view .LVU908
 2884 0228 EBE7     		b	.L197
 2885              	.L194:
2049:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
 2886              		.loc 1 2049 13 view .LVU909
2049:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
 2887              		.loc 1 2049 23 is_stmt 0 view .LVU910
 2888 022a 46F01006 		orr	r6, r6, #16
 2889              	.LVL219:
2050:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           case (CAN_ESR_LEC_1 | CAN_ESR_LEC_0):
 2890              		.loc 1 2050 13 is_stmt 1 view .LVU911
 2891 022e E8E7     		b	.L197
 2892              	.L192:
2057:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
 2893              		.loc 1 2057 13 view .LVU912
2057:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
 2894              		.loc 1 2057 23 is_stmt 0 view .LVU913
 2895 0230 46F04006 		orr	r6, r6, #64
 2896              	.LVL220:
2058:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_0):
 2897              		.loc 1 2058 13 is_stmt 1 view .LVU914
 2898 0234 E5E7     		b	.L197
 2899              	.L198:
2061:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
 2900              		.loc 1 2061 13 view .LVU915
2061:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             break;
 2901              		.loc 1 2061 23 is_stmt 0 view .LVU916
 2902 0236 46F08006 		orr	r6, r6, #128
 2903              	.LVL221:
2062:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
 2904              		.loc 1 2062 13 is_stmt 1 view .LVU917
 2905 023a E2E7     		b	.L197
 2906              	.L215:
2084:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2907              		.loc 1 2084 5 view .LVU918
2084:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2908              		.loc 1 2084 21 is_stmt 0 view .LVU919
 2909 023c 6B6A     		ldr	r3, [r5, #36]
ARM GAS  /tmp/ccCenVhd.s 			page 120


 2910 023e 1E43     		orrs	r6, r6, r3
 2911              	.LVL222:
2084:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2912              		.loc 1 2084 21 view .LVU920
 2913 0240 6E62     		str	r6, [r5, #36]
2092:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** #endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
 2914              		.loc 1 2092 5 is_stmt 1 view .LVU921
 2915 0242 2846     		mov	r0, r5
 2916 0244 FFF7FEFF 		bl	HAL_CAN_ErrorCallback
 2917              	.LVL223:
2095:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
 2918              		.loc 1 2095 1 is_stmt 0 view .LVU922
 2919 0248 E4E7     		b	.L168
 2920              		.cfi_endproc
 2921              	.LFE151:
 2923              		.section	.text.HAL_CAN_GetState,"ax",%progbits
 2924              		.align	1
 2925              		.global	HAL_CAN_GetState
 2926              		.syntax unified
 2927              		.thumb
 2928              		.thumb_func
 2929              		.fpu fpv4-sp-d16
 2931              	HAL_CAN_GetState:
 2932              	.LVL224:
 2933              	.LFB165:
2346:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
2347:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
2348:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @}
2349:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
2350:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
2351:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group6 Peripheral State and Error functions
2352:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *  @brief   CAN Peripheral State functions
2353:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****  *
2354:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @verbatim
2355:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
2356:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****             ##### Peripheral State and Error functions #####
2357:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   ==============================================================================
2358:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     [..]
2359:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     This subsection provides functions allowing to :
2360:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_GetState()  : Return the CAN state.
2361:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_GetError()  : Return the CAN error codes if any.
2362:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (+) HAL_CAN_ResetError(): Reset the CAN error codes if any.
2363:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
2364:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** @endverbatim
2365:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @{
2366:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
2367:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
2368:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
2369:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Return the CAN state.
2370:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2371:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2372:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL state
2373:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
2374:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_CAN_StateTypeDef HAL_CAN_GetState(CAN_HandleTypeDef *hcan)
2375:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 2934              		.loc 1 2375 1 is_stmt 1 view -0
 2935              		.cfi_startproc
ARM GAS  /tmp/ccCenVhd.s 			page 121


 2936              		@ args = 0, pretend = 0, frame = 0
 2937              		@ frame_needed = 0, uses_anonymous_args = 0
 2938              		@ link register save eliminated.
 2939              		.loc 1 2375 1 is_stmt 0 view .LVU924
 2940 0000 0246     		mov	r2, r0
2376:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 2941              		.loc 1 2376 3 is_stmt 1 view .LVU925
 2942              		.loc 1 2376 24 is_stmt 0 view .LVU926
 2943 0002 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 2944 0006 D8B2     		uxtb	r0, r3
 2945              	.LVL225:
2377:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
2378:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 2946              		.loc 1 2378 3 is_stmt 1 view .LVU927
 2947              		.loc 1 2378 38 is_stmt 0 view .LVU928
 2948 0008 013B     		subs	r3, r3, #1
 2949 000a DBB2     		uxtb	r3, r3
 2950              		.loc 1 2378 6 view .LVU929
 2951 000c 012B     		cmp	r3, #1
 2952 000e 00D9     		bls	.L220
 2953              	.LVL226:
 2954              	.L217:
2379:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
2380:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
2381:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check sleep mode acknowledge flag */
2382:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     if ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
2383:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
2384:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Sleep mode is active */
2385:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       state = HAL_CAN_STATE_SLEEP_ACTIVE;
2386:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
2387:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Check sleep mode request flag */
2388:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     else if ((hcan->Instance->MCR & CAN_MCR_SLEEP) != 0U)
2389:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
2390:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Sleep mode request is pending */
2391:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       state = HAL_CAN_STATE_SLEEP_PENDING;
2392:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
2393:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     else
2394:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
2395:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       /* Neither sleep mode request nor sleep mode acknowledge */
2396:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 2955              		.loc 1 2396 5 is_stmt 1 view .LVU930
2397:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
2398:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
2399:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Return CAN state */
2400:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   return state;
 2956              		.loc 1 2400 3 view .LVU931
2401:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 2957              		.loc 1 2401 1 is_stmt 0 view .LVU932
 2958 0010 7047     		bx	lr
 2959              	.LVL227:
 2960              	.L220:
2382:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2961              		.loc 1 2382 5 is_stmt 1 view .LVU933
2382:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2962              		.loc 1 2382 14 is_stmt 0 view .LVU934
 2963 0012 1368     		ldr	r3, [r2]
2382:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
ARM GAS  /tmp/ccCenVhd.s 			page 122


 2964              		.loc 1 2382 24 view .LVU935
 2965 0014 5A68     		ldr	r2, [r3, #4]
 2966              	.LVL228:
2382:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2967              		.loc 1 2382 8 view .LVU936
 2968 0016 12F0020F 		tst	r2, #2
 2969 001a 05D1     		bne	.L218
2388:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2970              		.loc 1 2388 10 is_stmt 1 view .LVU937
2388:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2971              		.loc 1 2388 29 is_stmt 0 view .LVU938
 2972 001c 1B68     		ldr	r3, [r3]
2388:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     {
 2973              		.loc 1 2388 13 view .LVU939
 2974 001e 13F0020F 		tst	r3, #2
 2975 0022 F5D0     		beq	.L217
2391:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 2976              		.loc 1 2391 13 view .LVU940
 2977 0024 0320     		movs	r0, #3
 2978              	.LVL229:
2391:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 2979              		.loc 1 2391 13 view .LVU941
 2980 0026 F3E7     		b	.L217
 2981              	.LVL230:
 2982              	.L218:
2385:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 2983              		.loc 1 2385 13 view .LVU942
 2984 0028 0420     		movs	r0, #4
 2985              	.LVL231:
2385:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     }
 2986              		.loc 1 2385 13 view .LVU943
 2987 002a 7047     		bx	lr
 2988              		.cfi_endproc
 2989              	.LFE165:
 2991              		.section	.text.HAL_CAN_GetError,"ax",%progbits
 2992              		.align	1
 2993              		.global	HAL_CAN_GetError
 2994              		.syntax unified
 2995              		.thumb
 2996              		.thumb_func
 2997              		.fpu fpv4-sp-d16
 2999              	HAL_CAN_GetError:
 3000              	.LVL232:
 3001              	.LFB166:
2402:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
2403:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
2404:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Return the CAN error code.
2405:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2406:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2407:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval CAN Error Code
2408:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
2409:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** uint32_t HAL_CAN_GetError(CAN_HandleTypeDef *hcan)
2410:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 3002              		.loc 1 2410 1 is_stmt 1 view -0
 3003              		.cfi_startproc
 3004              		@ args = 0, pretend = 0, frame = 0
 3005              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccCenVhd.s 			page 123


 3006              		@ link register save eliminated.
2411:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Return CAN error code */
2412:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   return hcan->ErrorCode;
 3007              		.loc 1 2412 3 view .LVU945
 3008              		.loc 1 2412 14 is_stmt 0 view .LVU946
 3009 0000 406A     		ldr	r0, [r0, #36]
 3010              	.LVL233:
2413:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 3011              		.loc 1 2413 1 view .LVU947
 3012 0002 7047     		bx	lr
 3013              		.cfi_endproc
 3014              	.LFE166:
 3016              		.section	.text.HAL_CAN_ResetError,"ax",%progbits
 3017              		.align	1
 3018              		.global	HAL_CAN_ResetError
 3019              		.syntax unified
 3020              		.thumb
 3021              		.thumb_func
 3022              		.fpu fpv4-sp-d16
 3024              	HAL_CAN_ResetError:
 3025              	.LVL234:
 3026              	.LFB167:
2414:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
2415:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** /**
2416:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @brief  Reset the CAN error code.
2417:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
2418:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   *         the configuration information for the specified CAN.
2419:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   * @retval HAL status
2420:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   */
2421:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
2422:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** {
 3027              		.loc 1 2422 1 is_stmt 1 view -0
 3028              		.cfi_startproc
 3029              		@ args = 0, pretend = 0, frame = 0
 3030              		@ frame_needed = 0, uses_anonymous_args = 0
 3031              		@ link register save eliminated.
2423:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   HAL_StatusTypeDef status = HAL_OK;
 3032              		.loc 1 2423 3 view .LVU949
2424:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 3033              		.loc 1 2424 3 view .LVU950
 3034              		.loc 1 2424 24 is_stmt 0 view .LVU951
 3035 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 3036              	.LVL235:
2425:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
2426:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 3037              		.loc 1 2426 3 is_stmt 1 view .LVU952
 3038              		.loc 1 2426 38 is_stmt 0 view .LVU953
 3039 0004 013B     		subs	r3, r3, #1
 3040              	.LVL236:
 3041              		.loc 1 2426 38 view .LVU954
 3042 0006 DBB2     		uxtb	r3, r3
 3043              		.loc 1 2426 6 view .LVU955
 3044 0008 012B     		cmp	r3, #1
 3045 000a 05D9     		bls	.L225
2427:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
2428:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
2429:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Reset CAN error code */
ARM GAS  /tmp/ccCenVhd.s 			page 124


2430:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode = 0U;
2431:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
2432:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   else
2433:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   {
2434:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     /* Update error code */
2435:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 3046              		.loc 1 2435 5 is_stmt 1 view .LVU956
 3047              		.loc 1 2435 21 is_stmt 0 view .LVU957
 3048 000c 436A     		ldr	r3, [r0, #36]
 3049 000e 43F48023 		orr	r3, r3, #262144
 3050 0012 4362     		str	r3, [r0, #36]
2436:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
2437:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****     status = HAL_ERROR;
 3051              		.loc 1 2437 5 is_stmt 1 view .LVU958
 3052              	.LVL237:
 3053              		.loc 1 2437 12 is_stmt 0 view .LVU959
 3054 0014 0120     		movs	r0, #1
 3055              	.LVL238:
2438:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
2439:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** 
2440:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   /* Return the status */
2441:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   return status;
 3056              		.loc 1 2441 3 is_stmt 1 view .LVU960
2442:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c **** }
 3057              		.loc 1 2442 1 is_stmt 0 view .LVU961
 3058 0016 7047     		bx	lr
 3059              	.LVL239:
 3060              	.L225:
2430:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 3061              		.loc 1 2430 5 is_stmt 1 view .LVU962
2430:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   }
 3062              		.loc 1 2430 21 is_stmt 0 view .LVU963
 3063 0018 0023     		movs	r3, #0
 3064 001a 4362     		str	r3, [r0, #36]
2423:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 3065              		.loc 1 2423 21 view .LVU964
 3066 001c 1846     		mov	r0, r3
 3067              	.LVL240:
2423:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 3068              		.loc 1 2423 21 view .LVU965
 3069 001e 7047     		bx	lr
 3070              		.cfi_endproc
 3071              	.LFE167:
 3073              		.text
 3074              	.Letext0:
 3075              		.file 3 "/opt/gcc_arm/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/machine/_default_typ
 3076              		.file 4 "/opt/gcc_arm/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/_stdint.h"
 3077              		.file 5 "CORE/core_cm4.h"
 3078              		.file 6 "./system_stm32f4xx.h"
 3079              		.file 7 "./stm32f407xx.h"
 3080              		.file 8 "./stm32f4xx.h"
 3081              		.file 9 "HALLIB/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 3082              		.file 10 "HALLIB/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_can.h"
 3083              		.file 11 "HALLIB/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
ARM GAS  /tmp/ccCenVhd.s 			page 125


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_hal_can.c
     /tmp/ccCenVhd.s:18     .text.HAL_CAN_MspInit:0000000000000000 $t
     /tmp/ccCenVhd.s:26     .text.HAL_CAN_MspInit:0000000000000000 HAL_CAN_MspInit
     /tmp/ccCenVhd.s:42     .text.HAL_CAN_Init:0000000000000000 $t
     /tmp/ccCenVhd.s:49     .text.HAL_CAN_Init:0000000000000000 HAL_CAN_Init
     /tmp/ccCenVhd.s:339    .text.HAL_CAN_MspDeInit:0000000000000000 $t
     /tmp/ccCenVhd.s:346    .text.HAL_CAN_MspDeInit:0000000000000000 HAL_CAN_MspDeInit
     /tmp/ccCenVhd.s:361    .text.HAL_CAN_ConfigFilter:0000000000000000 $t
     /tmp/ccCenVhd.s:368    .text.HAL_CAN_ConfigFilter:0000000000000000 HAL_CAN_ConfigFilter
     /tmp/ccCenVhd.s:607    .text.HAL_CAN_ConfigFilter:000000000000012c $d
     /tmp/ccCenVhd.s:612    .text.HAL_CAN_Start:0000000000000000 $t
     /tmp/ccCenVhd.s:619    .text.HAL_CAN_Start:0000000000000000 HAL_CAN_Start
     /tmp/ccCenVhd.s:717    .text.HAL_CAN_Stop:0000000000000000 $t
     /tmp/ccCenVhd.s:724    .text.HAL_CAN_Stop:0000000000000000 HAL_CAN_Stop
     /tmp/ccCenVhd.s:823    .text.HAL_CAN_DeInit:0000000000000000 $t
     /tmp/ccCenVhd.s:830    .text.HAL_CAN_DeInit:0000000000000000 HAL_CAN_DeInit
     /tmp/ccCenVhd.s:886    .text.HAL_CAN_RequestSleep:0000000000000000 $t
     /tmp/ccCenVhd.s:893    .text.HAL_CAN_RequestSleep:0000000000000000 HAL_CAN_RequestSleep
     /tmp/ccCenVhd.s:942    .text.HAL_CAN_WakeUp:0000000000000000 $t
     /tmp/ccCenVhd.s:949    .text.HAL_CAN_WakeUp:0000000000000000 HAL_CAN_WakeUp
     /tmp/ccCenVhd.s:1046   .text.HAL_CAN_WakeUp:0000000000000054 $d
     /tmp/ccCenVhd.s:1051   .text.HAL_CAN_IsSleepActive:0000000000000000 $t
     /tmp/ccCenVhd.s:1058   .text.HAL_CAN_IsSleepActive:0000000000000000 HAL_CAN_IsSleepActive
     /tmp/ccCenVhd.s:1108   .text.HAL_CAN_AddTxMessage:0000000000000000 $t
     /tmp/ccCenVhd.s:1115   .text.HAL_CAN_AddTxMessage:0000000000000000 HAL_CAN_AddTxMessage
     /tmp/ccCenVhd.s:1339   .text.HAL_CAN_AbortTxRequest:0000000000000000 $t
     /tmp/ccCenVhd.s:1346   .text.HAL_CAN_AbortTxRequest:0000000000000000 HAL_CAN_AbortTxRequest
     /tmp/ccCenVhd.s:1421   .text.HAL_CAN_GetTxMailboxesFreeLevel:0000000000000000 $t
     /tmp/ccCenVhd.s:1428   .text.HAL_CAN_GetTxMailboxesFreeLevel:0000000000000000 HAL_CAN_GetTxMailboxesFreeLevel
     /tmp/ccCenVhd.s:1499   .text.HAL_CAN_IsTxMessagePending:0000000000000000 $t
     /tmp/ccCenVhd.s:1506   .text.HAL_CAN_IsTxMessagePending:0000000000000000 HAL_CAN_IsTxMessagePending
     /tmp/ccCenVhd.s:1563   .text.HAL_CAN_GetTxTimestamp:0000000000000000 $t
     /tmp/ccCenVhd.s:1570   .text.HAL_CAN_GetTxTimestamp:0000000000000000 HAL_CAN_GetTxTimestamp
     /tmp/ccCenVhd.s:1668   .text.HAL_CAN_GetRxMessage:0000000000000000 $t
     /tmp/ccCenVhd.s:1675   .text.HAL_CAN_GetRxMessage:0000000000000000 HAL_CAN_GetRxMessage
     /tmp/ccCenVhd.s:1963   .text.HAL_CAN_GetRxFifoFillLevel:0000000000000000 $t
     /tmp/ccCenVhd.s:1970   .text.HAL_CAN_GetRxFifoFillLevel:0000000000000000 HAL_CAN_GetRxFifoFillLevel
     /tmp/ccCenVhd.s:2032   .text.HAL_CAN_ActivateNotification:0000000000000000 $t
     /tmp/ccCenVhd.s:2039   .text.HAL_CAN_ActivateNotification:0000000000000000 HAL_CAN_ActivateNotification
     /tmp/ccCenVhd.s:2091   .text.HAL_CAN_DeactivateNotification:0000000000000000 $t
     /tmp/ccCenVhd.s:2098   .text.HAL_CAN_DeactivateNotification:0000000000000000 HAL_CAN_DeactivateNotification
     /tmp/ccCenVhd.s:2150   .text.HAL_CAN_TxMailbox0CompleteCallback:0000000000000000 $t
     /tmp/ccCenVhd.s:2157   .text.HAL_CAN_TxMailbox0CompleteCallback:0000000000000000 HAL_CAN_TxMailbox0CompleteCallback
     /tmp/ccCenVhd.s:2172   .text.HAL_CAN_TxMailbox1CompleteCallback:0000000000000000 $t
     /tmp/ccCenVhd.s:2179   .text.HAL_CAN_TxMailbox1CompleteCallback:0000000000000000 HAL_CAN_TxMailbox1CompleteCallback
     /tmp/ccCenVhd.s:2194   .text.HAL_CAN_TxMailbox2CompleteCallback:0000000000000000 $t
     /tmp/ccCenVhd.s:2201   .text.HAL_CAN_TxMailbox2CompleteCallback:0000000000000000 HAL_CAN_TxMailbox2CompleteCallback
     /tmp/ccCenVhd.s:2216   .text.HAL_CAN_TxMailbox0AbortCallback:0000000000000000 $t
     /tmp/ccCenVhd.s:2223   .text.HAL_CAN_TxMailbox0AbortCallback:0000000000000000 HAL_CAN_TxMailbox0AbortCallback
     /tmp/ccCenVhd.s:2238   .text.HAL_CAN_TxMailbox1AbortCallback:0000000000000000 $t
     /tmp/ccCenVhd.s:2245   .text.HAL_CAN_TxMailbox1AbortCallback:0000000000000000 HAL_CAN_TxMailbox1AbortCallback
     /tmp/ccCenVhd.s:2260   .text.HAL_CAN_TxMailbox2AbortCallback:0000000000000000 $t
     /tmp/ccCenVhd.s:2267   .text.HAL_CAN_TxMailbox2AbortCallback:0000000000000000 HAL_CAN_TxMailbox2AbortCallback
     /tmp/ccCenVhd.s:2282   .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 $t
     /tmp/ccCenVhd.s:2289   .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 HAL_CAN_RxFifo0MsgPendingCallback
     /tmp/ccCenVhd.s:2304   .text.HAL_CAN_RxFifo0FullCallback:0000000000000000 $t
ARM GAS  /tmp/ccCenVhd.s 			page 126


     /tmp/ccCenVhd.s:2311   .text.HAL_CAN_RxFifo0FullCallback:0000000000000000 HAL_CAN_RxFifo0FullCallback
     /tmp/ccCenVhd.s:2326   .text.HAL_CAN_RxFifo1MsgPendingCallback:0000000000000000 $t
     /tmp/ccCenVhd.s:2333   .text.HAL_CAN_RxFifo1MsgPendingCallback:0000000000000000 HAL_CAN_RxFifo1MsgPendingCallback
     /tmp/ccCenVhd.s:2348   .text.HAL_CAN_RxFifo1FullCallback:0000000000000000 $t
     /tmp/ccCenVhd.s:2355   .text.HAL_CAN_RxFifo1FullCallback:0000000000000000 HAL_CAN_RxFifo1FullCallback
     /tmp/ccCenVhd.s:2370   .text.HAL_CAN_SleepCallback:0000000000000000 $t
     /tmp/ccCenVhd.s:2377   .text.HAL_CAN_SleepCallback:0000000000000000 HAL_CAN_SleepCallback
     /tmp/ccCenVhd.s:2392   .text.HAL_CAN_WakeUpFromRxMsgCallback:0000000000000000 $t
     /tmp/ccCenVhd.s:2399   .text.HAL_CAN_WakeUpFromRxMsgCallback:0000000000000000 HAL_CAN_WakeUpFromRxMsgCallback
     /tmp/ccCenVhd.s:2414   .text.HAL_CAN_ErrorCallback:0000000000000000 $t
     /tmp/ccCenVhd.s:2421   .text.HAL_CAN_ErrorCallback:0000000000000000 HAL_CAN_ErrorCallback
     /tmp/ccCenVhd.s:2436   .text.HAL_CAN_IRQHandler:0000000000000000 $t
     /tmp/ccCenVhd.s:2443   .text.HAL_CAN_IRQHandler:0000000000000000 HAL_CAN_IRQHandler
     /tmp/ccCenVhd.s:2924   .text.HAL_CAN_GetState:0000000000000000 $t
     /tmp/ccCenVhd.s:2931   .text.HAL_CAN_GetState:0000000000000000 HAL_CAN_GetState
     /tmp/ccCenVhd.s:2992   .text.HAL_CAN_GetError:0000000000000000 $t
     /tmp/ccCenVhd.s:2999   .text.HAL_CAN_GetError:0000000000000000 HAL_CAN_GetError
     /tmp/ccCenVhd.s:3017   .text.HAL_CAN_ResetError:0000000000000000 $t
     /tmp/ccCenVhd.s:3024   .text.HAL_CAN_ResetError:0000000000000000 HAL_CAN_ResetError

UNDEFINED SYMBOLS
HAL_GetTick

ARM GAS  /tmp/ccv9JeW7.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_hal_exti.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.HAL_EXTI_SetConfigLine,"ax",%progbits
  18              		.align	1
  19              		.global	HAL_EXTI_SetConfigLine
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	HAL_EXTI_SetConfigLine:
  27              	.LVL0:
  28              	.LFB132:
  29              		.file 1 "HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c"
   1:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** /**
   2:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   ******************************************************************************
   3:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * @file    stm32f4xx_hal_exti.c
   4:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * @author  MCD Application Team
   5:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * @brief   EXTI HAL module driver.
   6:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   *          This file provides firmware functions to manage the following
   7:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   *          functionalities of the Extended Interrupts and events controller (EXTI) peripheral:
   8:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   *           + Initialization and de-initialization functions
   9:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   *           + IO operation functions
  10:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   *
  11:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   @verbatim
  12:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   ==============================================================================
  13:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****                     ##### EXTI Peripheral features #####
  14:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   ==============================================================================
  15:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   [..]
  16:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     (+) Each Exti line can be configured within this driver.
  17:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
  18:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     (+) Exti line can be configured in 3 different modes
  19:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****         (++) Interrupt
  20:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****         (++) Event
  21:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****         (++) Both of them
  22:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
  23:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     (+) Configurable Exti lines can be configured with 3 different triggers
  24:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****         (++) Rising
  25:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****         (++) Falling
  26:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****         (++) Both of them
  27:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
  28:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     (+) When set in interrupt mode, configurable Exti lines have two different
  29:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****         interrupts pending registers which allow to distinguish which transition
ARM GAS  /tmp/ccv9JeW7.s 			page 2


  30:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****         occurs:
  31:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****         (++) Rising edge pending interrupt
  32:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****         (++) Falling
  33:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
  34:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     (+) Exti lines 0 to 15 are linked to gpio pin number 0 to 15. Gpio port can
  35:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****         be selected through multiplexer.
  36:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
  37:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****                      ##### How to use this driver #####
  38:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   ==============================================================================
  39:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   [..]
  40:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
  41:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     (#) Configure the EXTI line using HAL_EXTI_SetConfigLine().
  42:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****         (++) Choose the interrupt line number by setting "Line" member from
  43:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****              EXTI_ConfigTypeDef structure.
  44:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****         (++) Configure the interrupt and/or event mode using "Mode" member from
  45:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****              EXTI_ConfigTypeDef structure.
  46:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****         (++) For configurable lines, configure rising and/or falling trigger
  47:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****              "Trigger" member from EXTI_ConfigTypeDef structure.
  48:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
  49:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     (#) Get current Exti configuration of a dedicated line using
  50:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****         HAL_EXTI_GetConfigLine().
  51:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****         (++) Provide exiting handle as parameter.
  52:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****         (++) Provide pointer on EXTI_ConfigTypeDef structure as second parameter.
  53:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
  54:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     (#) Clear Exti configuration of a dedicated line using HAL_EXTI_GetConfigLine().
  55:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****         (++) Provide exiting handle as parameter.
  56:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
  57:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     (#) Register callback to treat Exti interrupts using HAL_EXTI_RegisterCallback().
  58:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****         (++) Provide exiting handle as first parameter.
  59:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****         (++) Provide which callback will be registered using one value from
  60:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****              EXTI_CallbackIDTypeDef.
  61:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****         (++) Provide callback function pointer.
  62:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
  63:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     (#) Get interrupt pending bit using HAL_EXTI_GetPending().
  64:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
  65:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     (#) Clear interrupt pending bit using HAL_EXTI_GetPending().
  66:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
  67:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     (#) Generate software interrupt using HAL_EXTI_GenerateSWI().
  68:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
  69:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   @endverbatim
  70:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   ******************************************************************************
  71:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * @attention
  72:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   *
  73:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * <h2><center>&copy; Copyright (c) 2018 STMicroelectronics.
  74:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * All rights reserved.</center></h2>
  75:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   *
  76:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  77:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * the "License"; You may not use this file except in compliance with the
  78:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * License. You may obtain a copy of the License at:
  79:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   *                        opensource.org/licenses/BSD-3-Clause
  80:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   *
  81:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   ******************************************************************************
  82:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   */
  83:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
  84:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** /* Includes ------------------------------------------------------------------*/
  85:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** #include "stm32f4xx_hal.h"
  86:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
ARM GAS  /tmp/ccv9JeW7.s 			page 3


  87:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** /** @addtogroup STM32F4xx_HAL_Driver
  88:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * @{
  89:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   */
  90:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
  91:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** /** @addtogroup EXTI
  92:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * @{
  93:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   */
  94:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** /** MISRA C:2012 deviation rule has been granted for following rule:
  95:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * Rule-18.1_b - Medium: Array `EXTICR' 1st subscript interval [0,7] may be out
  96:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * of bounds [0,3] in following API :
  97:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * HAL_EXTI_SetConfigLine
  98:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * HAL_EXTI_GetConfigLine
  99:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * HAL_EXTI_ClearConfigLine
 100:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   */
 101:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
 102:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** #ifdef HAL_EXTI_MODULE_ENABLED
 103:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
 104:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** /* Private typedef -----------------------------------------------------------*/
 105:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** /* Private defines -----------------------------------------------------------*/
 106:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** /** @defgroup EXTI_Private_Constants EXTI Private Constants
 107:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * @{
 108:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   */
 109:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
 110:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** /**
 111:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * @}
 112:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   */
 113:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
 114:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** /* Private macros ------------------------------------------------------------*/
 115:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** /* Private variables ---------------------------------------------------------*/
 116:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** /* Private function prototypes -----------------------------------------------*/
 117:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** /* Exported functions --------------------------------------------------------*/
 118:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
 119:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** /** @addtogroup EXTI_Exported_Functions
 120:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * @{
 121:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   */
 122:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
 123:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** /** @addtogroup EXTI_Exported_Functions_Group1
 124:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   *  @brief    Configuration functions
 125:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   *
 126:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** @verbatim
 127:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****  ===============================================================================
 128:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****               ##### Configuration functions #####
 129:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****  ===============================================================================
 130:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
 131:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** @endverbatim
 132:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * @{
 133:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   */
 134:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
 135:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** /**
 136:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * @brief  Set configuration of a dedicated Exti line.
 137:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * @param  hexti Exti handle.
 138:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * @param  pExtiConfig Pointer on EXTI configuration to be set.
 139:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * @retval HAL Status.
 140:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   */
 141:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** HAL_StatusTypeDef HAL_EXTI_SetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig
 142:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** {
  30              		.loc 1 142 1 view -0
ARM GAS  /tmp/ccv9JeW7.s 			page 4


  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
 143:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   uint32_t regval;
  35              		.loc 1 143 3 view .LVU1
 144:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
 145:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   /* Check null pointer */
 146:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   if ((hexti == NULL) || (pExtiConfig == NULL))
  36              		.loc 1 146 3 view .LVU2
  37              		.loc 1 146 6 is_stmt 0 view .LVU3
  38 0000 0028     		cmp	r0, #0
  39 0002 3CD0     		beq	.L4
  40 0004 0346     		mov	r3, r0
  41              		.loc 1 146 23 discriminator 1 view .LVU4
  42 0006 0029     		cmp	r1, #0
  43 0008 3BD0     		beq	.L5
 142:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   uint32_t regval;
  44              		.loc 1 142 1 view .LVU5
  45 000a 10B4     		push	{r4}
  46              	.LCFI0:
  47              		.cfi_def_cfa_offset 4
  48              		.cfi_offset 4, -4
 147:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   {
 148:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     return HAL_ERROR;
 149:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   }
 150:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
 151:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   /* Check parameters */
 152:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   assert_param(IS_EXTI_LINE(pExtiConfig->Line));
  49              		.loc 1 152 3 is_stmt 1 view .LVU6
 153:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   assert_param(IS_EXTI_MODE(pExtiConfig->Mode));
  50              		.loc 1 153 3 view .LVU7
 154:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));
  51              		.loc 1 154 3 view .LVU8
 155:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
 156:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   /* Assign line number to handle */
 157:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   hexti->Line = pExtiConfig->Line;
  52              		.loc 1 157 3 view .LVU9
  53              		.loc 1 157 28 is_stmt 0 view .LVU10
  54 000c 0868     		ldr	r0, [r1]
  55              	.LVL1:
  56              		.loc 1 157 15 view .LVU11
  57 000e 1860     		str	r0, [r3]
 158:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
 159:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   /* Clear EXTI line configuration */
 160:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   EXTI->IMR &= ~pExtiConfig->Line;
  58              		.loc 1 160 3 is_stmt 1 view .LVU12
  59              		.loc 1 160 13 is_stmt 0 view .LVU13
  60 0010 1D4B     		ldr	r3, .L11
  61              	.LVL2:
  62              		.loc 1 160 13 view .LVU14
  63 0012 1A68     		ldr	r2, [r3]
  64 0014 22EA0002 		bic	r2, r2, r0
  65 0018 1A60     		str	r2, [r3]
 161:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   EXTI->EMR &= ~pExtiConfig->Line;
  66              		.loc 1 161 3 is_stmt 1 view .LVU15
  67              		.loc 1 161 13 is_stmt 0 view .LVU16
ARM GAS  /tmp/ccv9JeW7.s 			page 5


  68 001a 5A68     		ldr	r2, [r3, #4]
  69              		.loc 1 161 28 view .LVU17
  70 001c 0868     		ldr	r0, [r1]
  71              		.loc 1 161 13 view .LVU18
  72 001e 22EA0002 		bic	r2, r2, r0
  73 0022 5A60     		str	r2, [r3, #4]
 162:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
 163:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   /* Select the Mode for the selected external interrupts */
 164:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   regval = (uint32_t)EXTI_BASE;
  74              		.loc 1 164 3 is_stmt 1 view .LVU19
  75              	.LVL3:
 165:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   regval += pExtiConfig->Mode;
  76              		.loc 1 165 3 view .LVU20
  77              		.loc 1 165 24 is_stmt 0 view .LVU21
  78 0024 4A68     		ldr	r2, [r1, #4]
  79              		.loc 1 165 10 view .LVU22
  80 0026 02F18042 		add	r2, r2, #1073741824
  81 002a 02F59E32 		add	r2, r2, #80896
  82              	.LVL4:
 166:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   *(__IO uint32_t *) regval |= pExtiConfig->Line;
  83              		.loc 1 166 3 is_stmt 1 view .LVU23
  84              		.loc 1 166 29 is_stmt 0 view .LVU24
  85 002e 1068     		ldr	r0, [r2]
  86              		.loc 1 166 43 view .LVU25
  87 0030 0C68     		ldr	r4, [r1]
  88              		.loc 1 166 29 view .LVU26
  89 0032 2043     		orrs	r0, r0, r4
  90 0034 1060     		str	r0, [r2]
 167:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
 168:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   /* Clear Rising Falling edge configuration */
 169:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   EXTI->RTSR &= ~pExtiConfig->Line;
  91              		.loc 1 169 3 is_stmt 1 view .LVU27
  92              		.loc 1 169 14 is_stmt 0 view .LVU28
  93 0036 9A68     		ldr	r2, [r3, #8]
  94              	.LVL5:
  95              		.loc 1 169 29 view .LVU29
  96 0038 0868     		ldr	r0, [r1]
  97              		.loc 1 169 14 view .LVU30
  98 003a 22EA0002 		bic	r2, r2, r0
  99 003e 9A60     		str	r2, [r3, #8]
 170:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   EXTI->FTSR &= ~pExtiConfig->Line;
 100              		.loc 1 170 3 is_stmt 1 view .LVU31
 101              		.loc 1 170 14 is_stmt 0 view .LVU32
 102 0040 DA68     		ldr	r2, [r3, #12]
 103              		.loc 1 170 29 view .LVU33
 104 0042 0868     		ldr	r0, [r1]
 105              		.loc 1 170 14 view .LVU34
 106 0044 22EA0002 		bic	r2, r2, r0
 107 0048 DA60     		str	r2, [r3, #12]
 171:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
 172:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   /* Select the trigger for the selected external interrupts */
 173:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   if (pExtiConfig->Trigger == EXTI_TRIGGER_RISING_FALLING)
 108              		.loc 1 173 3 is_stmt 1 view .LVU35
 109              		.loc 1 173 18 is_stmt 0 view .LVU36
 110 004a 8B68     		ldr	r3, [r1, #8]
 111              		.loc 1 173 6 view .LVU37
 112 004c 102B     		cmp	r3, #16
ARM GAS  /tmp/ccv9JeW7.s 			page 6


 113 004e 0BD0     		beq	.L10
 174:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   {
 175:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     /* Rising Falling edge */
 176:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     EXTI->RTSR |= pExtiConfig->Line;
 177:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     EXTI->FTSR |= pExtiConfig->Line;
 178:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   }
 179:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   else
 180:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   {
 181:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     regval = (uint32_t)EXTI_BASE;
 114              		.loc 1 181 5 is_stmt 1 view .LVU38
 115              	.LVL6:
 182:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     regval += pExtiConfig->Trigger;
 116              		.loc 1 182 5 view .LVU39
 117              		.loc 1 182 12 is_stmt 0 view .LVU40
 118 0050 03F18043 		add	r3, r3, #1073741824
 119 0054 03F59E33 		add	r3, r3, #80896
 120              	.LVL7:
 183:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     *(__IO uint32_t *) regval |= pExtiConfig->Line;
 121              		.loc 1 183 5 is_stmt 1 view .LVU41
 122              		.loc 1 183 31 is_stmt 0 view .LVU42
 123 0058 1A68     		ldr	r2, [r3]
 124              		.loc 1 183 45 view .LVU43
 125 005a 0968     		ldr	r1, [r1]
 126              	.LVL8:
 127              		.loc 1 183 31 view .LVU44
 128 005c 0A43     		orrs	r2, r2, r1
 129 005e 1A60     		str	r2, [r3]
 184:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   }
 185:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   return HAL_OK;
 130              		.loc 1 185 10 view .LVU45
 131 0060 0020     		movs	r0, #0
 132              	.LVL9:
 133              	.L2:
 186:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** }
 134              		.loc 1 186 1 view .LVU46
 135 0062 5DF8044B 		ldr	r4, [sp], #4
 136              	.LCFI1:
 137              		.cfi_remember_state
 138              		.cfi_restore 4
 139              		.cfi_def_cfa_offset 0
 140 0066 7047     		bx	lr
 141              	.LVL10:
 142              	.L10:
 143              	.LCFI2:
 144              		.cfi_restore_state
 176:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     EXTI->FTSR |= pExtiConfig->Line;
 145              		.loc 1 176 5 is_stmt 1 view .LVU47
 176:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     EXTI->FTSR |= pExtiConfig->Line;
 146              		.loc 1 176 16 is_stmt 0 view .LVU48
 147 0068 074B     		ldr	r3, .L11
 148 006a 9A68     		ldr	r2, [r3, #8]
 176:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     EXTI->FTSR |= pExtiConfig->Line;
 149              		.loc 1 176 30 view .LVU49
 150 006c 0868     		ldr	r0, [r1]
 176:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     EXTI->FTSR |= pExtiConfig->Line;
 151              		.loc 1 176 16 view .LVU50
 152 006e 0243     		orrs	r2, r2, r0
ARM GAS  /tmp/ccv9JeW7.s 			page 7


 153 0070 9A60     		str	r2, [r3, #8]
 177:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   }
 154              		.loc 1 177 5 is_stmt 1 view .LVU51
 177:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   }
 155              		.loc 1 177 16 is_stmt 0 view .LVU52
 156 0072 DA68     		ldr	r2, [r3, #12]
 177:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   }
 157              		.loc 1 177 30 view .LVU53
 158 0074 0968     		ldr	r1, [r1]
 159              	.LVL11:
 177:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   }
 160              		.loc 1 177 16 view .LVU54
 161 0076 0A43     		orrs	r2, r2, r1
 162 0078 DA60     		str	r2, [r3, #12]
 185:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** }
 163              		.loc 1 185 10 view .LVU55
 164 007a 0020     		movs	r0, #0
 165 007c F1E7     		b	.L2
 166              	.LVL12:
 167              	.L4:
 168              	.LCFI3:
 169              		.cfi_def_cfa_offset 0
 170              		.cfi_restore 4
 148:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   }
 171              		.loc 1 148 12 view .LVU56
 172 007e 0120     		movs	r0, #1
 173              	.LVL13:
 148:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   }
 174              		.loc 1 148 12 view .LVU57
 175 0080 7047     		bx	lr
 176              	.LVL14:
 177              	.L5:
 148:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   }
 178              		.loc 1 148 12 view .LVU58
 179 0082 0120     		movs	r0, #1
 180              	.LVL15:
 181              		.loc 1 186 1 view .LVU59
 182 0084 7047     		bx	lr
 183              	.L12:
 184 0086 00BF     		.align	2
 185              	.L11:
 186 0088 003C0140 		.word	1073822720
 187              		.cfi_endproc
 188              	.LFE132:
 190              		.section	.text.HAL_EXTI_GetConfigLine,"ax",%progbits
 191              		.align	1
 192              		.global	HAL_EXTI_GetConfigLine
 193              		.syntax unified
 194              		.thumb
 195              		.thumb_func
 196              		.fpu fpv4-sp-d16
 198              	HAL_EXTI_GetConfigLine:
 199              	.LVL16:
 200              	.LFB133:
 187:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
 188:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** /**
 189:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * @brief  Get configuration of a dedicated Exti line.
ARM GAS  /tmp/ccv9JeW7.s 			page 8


 190:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * @param  hexti Exti handle.
 191:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * @param  pExtiConfig Pointer on structure to store Exti configuration.
 192:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * @retval HAL Status.
 193:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   */
 194:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** HAL_StatusTypeDef HAL_EXTI_GetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig
 195:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** {
 201              		.loc 1 195 1 is_stmt 1 view -0
 202              		.cfi_startproc
 203              		@ args = 0, pretend = 0, frame = 0
 204              		@ frame_needed = 0, uses_anonymous_args = 0
 205              		@ link register save eliminated.
 196:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   /* Check null pointer */
 197:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   if ((hexti == NULL) || (pExtiConfig == NULL))
 206              		.loc 1 197 3 view .LVU61
 207              		.loc 1 197 6 is_stmt 0 view .LVU62
 208 0000 0246     		mov	r2, r0
 209 0002 0028     		cmp	r0, #0
 210 0004 31D0     		beq	.L21
 211              		.loc 1 197 23 discriminator 1 view .LVU63
 212 0006 0029     		cmp	r1, #0
 213 0008 31D0     		beq	.L22
 198:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   {
 199:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     return HAL_ERROR;
 200:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   }
 201:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
 202:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   /* Check the parameter */
 203:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   assert_param(IS_EXTI_LINE(hexti->Line));
 214              		.loc 1 203 3 is_stmt 1 view .LVU64
 204:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
 205:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   /* Store handle line number to configuration structure */
 206:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   pExtiConfig->Line = hexti->Line;
 215              		.loc 1 206 3 view .LVU65
 216              		.loc 1 206 28 is_stmt 0 view .LVU66
 217 000a 0368     		ldr	r3, [r0]
 218              		.loc 1 206 21 view .LVU67
 219 000c 0B60     		str	r3, [r1]
 207:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
 208:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   /* Get EXTI mode to configiguration structure */
 209:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   if ((EXTI->IMR & hexti->Line) == hexti->Line)
 220              		.loc 1 209 3 is_stmt 1 view .LVU68
 221              		.loc 1 209 12 is_stmt 0 view .LVU69
 222 000e 1948     		ldr	r0, .L28
 223              	.LVL17:
 224              		.loc 1 209 12 view .LVU70
 225 0010 0068     		ldr	r0, [r0]
 226              		.loc 1 209 6 view .LVU71
 227 0012 33EA0000 		bics	r0, r3, r0
 228 0016 12D0     		beq	.L23
 210:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   {
 211:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     pExtiConfig->Mode = EXTI_MODE_INTERRUPT;
 212:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   }
 213:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   else if ((EXTI->EMR & hexti->Line) == hexti->Line)
 229              		.loc 1 213 8 is_stmt 1 view .LVU72
 230              		.loc 1 213 17 is_stmt 0 view .LVU73
 231 0018 1648     		ldr	r0, .L28
 232 001a 4068     		ldr	r0, [r0, #4]
 233              		.loc 1 213 11 view .LVU74
ARM GAS  /tmp/ccv9JeW7.s 			page 9


 234 001c 8343     		bics	r3, r3, r0
 235 001e 11D0     		beq	.L24
 214:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   {
 215:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     pExtiConfig->Mode = EXTI_MODE_EVENT;
 216:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   }
 217:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   else
 218:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   {
 219:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     /* No MODE selected */
 220:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     pExtiConfig->Mode = 0x0Bu;
 236              		.loc 1 220 5 is_stmt 1 view .LVU75
 237              		.loc 1 220 23 is_stmt 0 view .LVU76
 238 0020 0B23     		movs	r3, #11
 239 0022 4B60     		str	r3, [r1, #4]
 240              	.L16:
 221:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   }
 222:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
 223:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   /* Get EXTI Trigger to configiguration structure */
 224:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   if ((EXTI->RTSR & hexti->Line) == hexti->Line)
 241              		.loc 1 224 3 is_stmt 1 view .LVU77
 242              		.loc 1 224 12 is_stmt 0 view .LVU78
 243 0024 134B     		ldr	r3, .L28
 244 0026 9868     		ldr	r0, [r3, #8]
 245              		.loc 1 224 26 view .LVU79
 246 0028 1368     		ldr	r3, [r2]
 247              		.loc 1 224 6 view .LVU80
 248 002a 33EA0002 		bics	r2, r3, r0
 249              	.LVL18:
 250              		.loc 1 224 6 view .LVU81
 251 002e 0CD0     		beq	.L25
 225:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   {
 226:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     if ((EXTI->FTSR & hexti->Line) == hexti->Line)
 227:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     {
 228:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****       pExtiConfig->Trigger = EXTI_TRIGGER_RISING_FALLING;
 229:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     }
 230:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     else
 231:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     {
 232:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****       pExtiConfig->Trigger = EXTI_TRIGGER_RISING;
 233:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     }
 234:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   }
 235:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   else if ((EXTI->FTSR & hexti->Line) == hexti->Line)
 252              		.loc 1 235 8 is_stmt 1 view .LVU82
 253              		.loc 1 235 17 is_stmt 0 view .LVU83
 254 0030 104A     		ldr	r2, .L28
 255 0032 D268     		ldr	r2, [r2, #12]
 256              		.loc 1 235 11 view .LVU84
 257 0034 9343     		bics	r3, r3, r2
 258 0036 14D0     		beq	.L26
 236:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   {
 237:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     pExtiConfig->Trigger = EXTI_TRIGGER_FALLING;
 238:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   }
 239:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   else
 240:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   {
 241:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     /* No Trigger selected */
 242:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     pExtiConfig->Trigger = 0x00u;
 259              		.loc 1 242 5 is_stmt 1 view .LVU85
 260              		.loc 1 242 26 is_stmt 0 view .LVU86
 261 0038 0020     		movs	r0, #0
ARM GAS  /tmp/ccv9JeW7.s 			page 10


 262 003a 8860     		str	r0, [r1, #8]
 263 003c 7047     		bx	lr
 264              	.LVL19:
 265              	.L23:
 211:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   }
 266              		.loc 1 211 5 is_stmt 1 view .LVU87
 211:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   }
 267              		.loc 1 211 23 is_stmt 0 view .LVU88
 268 003e 0023     		movs	r3, #0
 269 0040 4B60     		str	r3, [r1, #4]
 270 0042 EFE7     		b	.L16
 271              	.L24:
 215:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   }
 272              		.loc 1 215 5 is_stmt 1 view .LVU89
 215:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   }
 273              		.loc 1 215 23 is_stmt 0 view .LVU90
 274 0044 0423     		movs	r3, #4
 275 0046 4B60     		str	r3, [r1, #4]
 276 0048 ECE7     		b	.L16
 277              	.LVL20:
 278              	.L25:
 226:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     {
 279              		.loc 1 226 5 is_stmt 1 view .LVU91
 226:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     {
 280              		.loc 1 226 14 is_stmt 0 view .LVU92
 281 004a 0A4A     		ldr	r2, .L28
 282 004c D268     		ldr	r2, [r2, #12]
 226:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     {
 283              		.loc 1 226 8 view .LVU93
 284 004e 9343     		bics	r3, r3, r2
 285 0050 03D0     		beq	.L27
 232:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     }
 286              		.loc 1 232 7 is_stmt 1 view .LVU94
 232:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     }
 287              		.loc 1 232 28 is_stmt 0 view .LVU95
 288 0052 0823     		movs	r3, #8
 289 0054 8B60     		str	r3, [r1, #8]
 243:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   }
 244:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
 245:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   return HAL_OK;
 290              		.loc 1 245 10 view .LVU96
 291 0056 0020     		movs	r0, #0
 292 0058 7047     		bx	lr
 293              	.L27:
 228:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     }
 294              		.loc 1 228 7 is_stmt 1 view .LVU97
 228:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     }
 295              		.loc 1 228 28 is_stmt 0 view .LVU98
 296 005a 1023     		movs	r3, #16
 297 005c 8B60     		str	r3, [r1, #8]
 298              		.loc 1 245 10 view .LVU99
 299 005e 0020     		movs	r0, #0
 300 0060 7047     		bx	lr
 301              	.L26:
 237:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   }
 302              		.loc 1 237 5 is_stmt 1 view .LVU100
 237:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   }
ARM GAS  /tmp/ccv9JeW7.s 			page 11


 303              		.loc 1 237 26 is_stmt 0 view .LVU101
 304 0062 0C23     		movs	r3, #12
 305 0064 8B60     		str	r3, [r1, #8]
 306              		.loc 1 245 10 view .LVU102
 307 0066 0020     		movs	r0, #0
 308 0068 7047     		bx	lr
 309              	.LVL21:
 310              	.L21:
 199:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   }
 311              		.loc 1 199 12 view .LVU103
 312 006a 0120     		movs	r0, #1
 313              	.LVL22:
 199:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   }
 314              		.loc 1 199 12 view .LVU104
 315 006c 7047     		bx	lr
 316              	.LVL23:
 317              	.L22:
 199:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   }
 318              		.loc 1 199 12 view .LVU105
 319 006e 0120     		movs	r0, #1
 320              	.LVL24:
 246:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** }
 321              		.loc 1 246 1 view .LVU106
 322 0070 7047     		bx	lr
 323              	.L29:
 324 0072 00BF     		.align	2
 325              	.L28:
 326 0074 003C0140 		.word	1073822720
 327              		.cfi_endproc
 328              	.LFE133:
 330              		.section	.text.HAL_EXTI_ClearConfigLine,"ax",%progbits
 331              		.align	1
 332              		.global	HAL_EXTI_ClearConfigLine
 333              		.syntax unified
 334              		.thumb
 335              		.thumb_func
 336              		.fpu fpv4-sp-d16
 338              	HAL_EXTI_ClearConfigLine:
 339              	.LVL25:
 340              	.LFB134:
 247:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
 248:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** /**
 249:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * @brief  Clear whole configuration of a dedicated Exti line.
 250:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * @param  hexti Exti handle.
 251:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * @retval HAL Status.
 252:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   */
 253:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** HAL_StatusTypeDef HAL_EXTI_ClearConfigLine(EXTI_HandleTypeDef *hexti)
 254:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** {
 341              		.loc 1 254 1 is_stmt 1 view -0
 342              		.cfi_startproc
 343              		@ args = 0, pretend = 0, frame = 0
 344              		@ frame_needed = 0, uses_anonymous_args = 0
 345              		@ link register save eliminated.
 255:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   /* Check null pointer */
 256:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   if (hexti == NULL)
 346              		.loc 1 256 3 view .LVU108
 347              		.loc 1 256 6 is_stmt 0 view .LVU109
ARM GAS  /tmp/ccv9JeW7.s 			page 12


 348 0000 0246     		mov	r2, r0
 349 0002 B0B1     		cbz	r0, .L32
 257:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   {
 258:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     return HAL_ERROR;
 259:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   }
 260:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
 261:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   /* Check the parameter */
 262:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   assert_param(IS_EXTI_LINE(hexti->Line));
 350              		.loc 1 262 3 is_stmt 1 view .LVU110
 263:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
 264:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   /* 1] Clear interrupt mode */
 265:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   EXTI->IMR = (EXTI->IMR & ~hexti->Line);
 351              		.loc 1 265 3 view .LVU111
 352              		.loc 1 265 20 is_stmt 0 view .LVU112
 353 0004 0C4B     		ldr	r3, .L33
 354 0006 1968     		ldr	r1, [r3]
 355              		.loc 1 265 34 view .LVU113
 356 0008 0068     		ldr	r0, [r0]
 357              	.LVL26:
 358              		.loc 1 265 26 view .LVU114
 359 000a 21EA0001 		bic	r1, r1, r0
 360              		.loc 1 265 13 view .LVU115
 361 000e 1960     		str	r1, [r3]
 266:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
 267:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   /* 2] Clear event mode */
 268:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   EXTI->EMR = (EXTI->EMR & ~hexti->Line);
 362              		.loc 1 268 3 is_stmt 1 view .LVU116
 363              		.loc 1 268 20 is_stmt 0 view .LVU117
 364 0010 5968     		ldr	r1, [r3, #4]
 365              		.loc 1 268 34 view .LVU118
 366 0012 1068     		ldr	r0, [r2]
 367              		.loc 1 268 26 view .LVU119
 368 0014 21EA0001 		bic	r1, r1, r0
 369              		.loc 1 268 13 view .LVU120
 370 0018 5960     		str	r1, [r3, #4]
 269:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
 270:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   /* 3] Clear triggers */
 271:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   EXTI->RTSR = (EXTI->RTSR & ~hexti->Line);
 371              		.loc 1 271 3 is_stmt 1 view .LVU121
 372              		.loc 1 271 21 is_stmt 0 view .LVU122
 373 001a 9968     		ldr	r1, [r3, #8]
 374              		.loc 1 271 36 view .LVU123
 375 001c 1068     		ldr	r0, [r2]
 376              		.loc 1 271 28 view .LVU124
 377 001e 21EA0001 		bic	r1, r1, r0
 378              		.loc 1 271 14 view .LVU125
 379 0022 9960     		str	r1, [r3, #8]
 272:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   EXTI->FTSR = (EXTI->FTSR & ~hexti->Line);
 380              		.loc 1 272 3 is_stmt 1 view .LVU126
 381              		.loc 1 272 21 is_stmt 0 view .LVU127
 382 0024 D968     		ldr	r1, [r3, #12]
 383              		.loc 1 272 36 view .LVU128
 384 0026 1268     		ldr	r2, [r2]
 385              	.LVL27:
 386              		.loc 1 272 28 view .LVU129
 387 0028 21EA0202 		bic	r2, r1, r2
 388              		.loc 1 272 14 view .LVU130
ARM GAS  /tmp/ccv9JeW7.s 			page 13


 389 002c DA60     		str	r2, [r3, #12]
 273:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
 274:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   return HAL_OK;
 390              		.loc 1 274 3 is_stmt 1 view .LVU131
 391              		.loc 1 274 10 is_stmt 0 view .LVU132
 392 002e 0020     		movs	r0, #0
 393 0030 7047     		bx	lr
 394              	.LVL28:
 395              	.L32:
 258:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   }
 396              		.loc 1 258 12 view .LVU133
 397 0032 0120     		movs	r0, #1
 398              	.LVL29:
 275:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** }
 399              		.loc 1 275 1 view .LVU134
 400 0034 7047     		bx	lr
 401              	.L34:
 402 0036 00BF     		.align	2
 403              	.L33:
 404 0038 003C0140 		.word	1073822720
 405              		.cfi_endproc
 406              	.LFE134:
 408              		.section	.text.HAL_EXTI_RegisterCallback,"ax",%progbits
 409              		.align	1
 410              		.global	HAL_EXTI_RegisterCallback
 411              		.syntax unified
 412              		.thumb
 413              		.thumb_func
 414              		.fpu fpv4-sp-d16
 416              	HAL_EXTI_RegisterCallback:
 417              	.LVL30:
 418              	.LFB135:
 276:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
 277:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** /**
 278:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * @brief  Register callback for a dedicated Exti line.
 279:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * @param  hexti Exti handle.
 280:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * @param  CallbackID User callback identifier.
 281:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
 282:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * @param  pPendingCbfn function pointer to be stored as callback.
 283:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * @retval HAL Status.
 284:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   */
 285:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef Callb
 286:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** {
 419              		.loc 1 286 1 is_stmt 1 view -0
 420              		.cfi_startproc
 421              		@ args = 0, pretend = 0, frame = 0
 422              		@ frame_needed = 0, uses_anonymous_args = 0
 423              		@ link register save eliminated.
 424              		.loc 1 286 1 is_stmt 0 view .LVU136
 425 0000 0346     		mov	r3, r0
 287:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   HAL_StatusTypeDef status = HAL_OK;
 426              		.loc 1 287 3 is_stmt 1 view .LVU137
 427              	.LVL31:
 288:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
 289:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   switch (CallbackID)
 428              		.loc 1 289 3 view .LVU138
 429 0002 0846     		mov	r0, r1
ARM GAS  /tmp/ccv9JeW7.s 			page 14


 430              	.LVL32:
 431              		.loc 1 289 3 is_stmt 0 view .LVU139
 432 0004 09B9     		cbnz	r1, .L37
 290:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   {
 291:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     case  HAL_EXTI_COMMON_CB_ID:
 292:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****       hexti->RisingCallback = pPendingCbfn;
 433              		.loc 1 292 7 is_stmt 1 view .LVU140
 434              		.loc 1 292 29 is_stmt 0 view .LVU141
 435 0006 5A60     		str	r2, [r3, #4]
 293:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****       break;
 436              		.loc 1 293 7 is_stmt 1 view .LVU142
 437 0008 7047     		bx	lr
 438              	.L37:
 294:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
 295:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     default:
 296:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****       status = HAL_ERROR;
 439              		.loc 1 296 14 is_stmt 0 view .LVU143
 440 000a 0120     		movs	r0, #1
 441              	.LVL33:
 297:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****       break;
 298:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   }
 299:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
 300:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   return status;
 442              		.loc 1 300 3 is_stmt 1 view .LVU144
 301:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** }
 443              		.loc 1 301 1 is_stmt 0 view .LVU145
 444 000c 7047     		bx	lr
 445              		.cfi_endproc
 446              	.LFE135:
 448              		.section	.text.HAL_EXTI_GetHandle,"ax",%progbits
 449              		.align	1
 450              		.global	HAL_EXTI_GetHandle
 451              		.syntax unified
 452              		.thumb
 453              		.thumb_func
 454              		.fpu fpv4-sp-d16
 456              	HAL_EXTI_GetHandle:
 457              	.LVL34:
 458              	.LFB136:
 302:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
 303:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** /**
 304:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * @brief  Store line number as handle private field.
 305:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * @param  hexti Exti handle.
 306:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * @param  ExtiLine Exti line number.
 307:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   *         This parameter can be from 0 to @ref EXTI_LINE_NB.
 308:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * @retval HAL Status.
 309:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   */
 310:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
 311:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** {
 459              		.loc 1 311 1 is_stmt 1 view -0
 460              		.cfi_startproc
 461              		@ args = 0, pretend = 0, frame = 0
 462              		@ frame_needed = 0, uses_anonymous_args = 0
 463              		@ link register save eliminated.
 312:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   /* Check the parameters */
 313:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   assert_param(IS_EXTI_LINE(ExtiLine));
 464              		.loc 1 313 3 view .LVU147
ARM GAS  /tmp/ccv9JeW7.s 			page 15


 314:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
 315:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   /* Check null pointer */
 316:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   if (hexti == NULL)
 465              		.loc 1 316 3 view .LVU148
 466              		.loc 1 316 6 is_stmt 0 view .LVU149
 467 0000 10B1     		cbz	r0, .L40
 317:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   {
 318:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     return HAL_ERROR;
 319:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   }
 320:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   else
 321:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   {
 322:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     /* Store line number as handle private field */
 323:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     hexti->Line = ExtiLine;
 468              		.loc 1 323 5 is_stmt 1 view .LVU150
 469              		.loc 1 323 17 is_stmt 0 view .LVU151
 470 0002 0160     		str	r1, [r0]
 324:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
 325:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     return HAL_OK;
 471              		.loc 1 325 5 is_stmt 1 view .LVU152
 472              		.loc 1 325 12 is_stmt 0 view .LVU153
 473 0004 0020     		movs	r0, #0
 474              	.LVL35:
 475              		.loc 1 325 12 view .LVU154
 476 0006 7047     		bx	lr
 477              	.LVL36:
 478              	.L40:
 318:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   }
 479              		.loc 1 318 12 view .LVU155
 480 0008 0120     		movs	r0, #1
 481              	.LVL37:
 326:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   }
 327:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** }
 482              		.loc 1 327 1 view .LVU156
 483 000a 7047     		bx	lr
 484              		.cfi_endproc
 485              	.LFE136:
 487              		.section	.text.HAL_EXTI_IRQHandler,"ax",%progbits
 488              		.align	1
 489              		.global	HAL_EXTI_IRQHandler
 490              		.syntax unified
 491              		.thumb
 492              		.thumb_func
 493              		.fpu fpv4-sp-d16
 495              	HAL_EXTI_IRQHandler:
 496              	.LVL38:
 497              	.LFB137:
 328:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
 329:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** /**
 330:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * @}
 331:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   */
 332:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
 333:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** /** @addtogroup EXTI_Exported_Functions_Group2
 334:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   *  @brief EXTI IO functions.
 335:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   *
 336:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** @verbatim
 337:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****  ===============================================================================
 338:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****                        ##### IO operation functions #####
ARM GAS  /tmp/ccv9JeW7.s 			page 16


 339:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****  ===============================================================================
 340:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
 341:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** @endverbatim
 342:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * @{
 343:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   */
 344:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
 345:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** /**
 346:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * @brief  Handle EXTI interrupt request.
 347:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * @param  hexti Exti handle.
 348:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * @retval none.
 349:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   */
 350:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
 351:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** {
 498              		.loc 1 351 1 is_stmt 1 view -0
 499              		.cfi_startproc
 500              		@ args = 0, pretend = 0, frame = 0
 501              		@ frame_needed = 0, uses_anonymous_args = 0
 502              		.loc 1 351 1 is_stmt 0 view .LVU158
 503 0000 08B5     		push	{r3, lr}
 504              	.LCFI4:
 505              		.cfi_def_cfa_offset 8
 506              		.cfi_offset 3, -8
 507              		.cfi_offset 14, -4
 352:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   if (EXTI->PR != 0x00u)
 508              		.loc 1 352 3 is_stmt 1 view .LVU159
 509              		.loc 1 352 11 is_stmt 0 view .LVU160
 510 0002 054B     		ldr	r3, .L44
 511 0004 5B69     		ldr	r3, [r3, #20]
 512              		.loc 1 352 6 view .LVU161
 513 0006 2BB1     		cbz	r3, .L41
 353:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   {
 354:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     /* Clear pending bit */
 355:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     EXTI->PR = hexti->Line;
 514              		.loc 1 355 5 is_stmt 1 view .LVU162
 515              		.loc 1 355 21 is_stmt 0 view .LVU163
 516 0008 0268     		ldr	r2, [r0]
 517              		.loc 1 355 14 view .LVU164
 518 000a 034B     		ldr	r3, .L44
 519 000c 5A61     		str	r2, [r3, #20]
 356:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
 357:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     /* Call callback */
 358:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     if (hexti->RisingCallback != NULL)
 520              		.loc 1 358 5 is_stmt 1 view .LVU165
 521              		.loc 1 358 14 is_stmt 0 view .LVU166
 522 000e 4368     		ldr	r3, [r0, #4]
 523              		.loc 1 358 8 view .LVU167
 524 0010 03B1     		cbz	r3, .L41
 359:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     {
 360:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****       hexti->RisingCallback();
 525              		.loc 1 360 7 is_stmt 1 view .LVU168
 526 0012 9847     		blx	r3
 527              	.LVL39:
 528              	.L41:
 361:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****     }
 362:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   }
 363:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** }
 529              		.loc 1 363 1 is_stmt 0 view .LVU169
ARM GAS  /tmp/ccv9JeW7.s 			page 17


 530 0014 08BD     		pop	{r3, pc}
 531              	.L45:
 532 0016 00BF     		.align	2
 533              	.L44:
 534 0018 003C0140 		.word	1073822720
 535              		.cfi_endproc
 536              	.LFE137:
 538              		.section	.text.HAL_EXTI_GetPending,"ax",%progbits
 539              		.align	1
 540              		.global	HAL_EXTI_GetPending
 541              		.syntax unified
 542              		.thumb
 543              		.thumb_func
 544              		.fpu fpv4-sp-d16
 546              	HAL_EXTI_GetPending:
 547              	.LVL40:
 548              	.LFB138:
 364:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
 365:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** /**
 366:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * @brief  Get interrupt pending bit of a dedicated line.
 367:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * @param  hexti Exti handle.
 368:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * @param  Edge Specify which pending edge as to be checked.
 369:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   *         This parameter can be one of the following values:
 370:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   *           @arg @ref EXTI_TRIGGER_RISING_FALLING
 371:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   *         This parameter is kept for compatibility with other series.
 372:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * @retval 1 if interrupt is pending else 0.
 373:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   */
 374:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** uint32_t HAL_EXTI_GetPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
 375:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** {
 549              		.loc 1 375 1 is_stmt 1 view -0
 550              		.cfi_startproc
 551              		@ args = 0, pretend = 0, frame = 0
 552              		@ frame_needed = 0, uses_anonymous_args = 0
 553              		@ link register save eliminated.
 376:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   __IO uint32_t *regaddr;
 554              		.loc 1 376 3 view .LVU171
 377:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   uint32_t regval;
 555              		.loc 1 377 3 view .LVU172
 378:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
 379:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   /* Check parameters */
 380:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   assert_param(IS_EXTI_LINE(hexti->Line));
 556              		.loc 1 380 3 view .LVU173
 381:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   assert_param(IS_EXTI_PENDING_EDGE(Edge));
 557              		.loc 1 381 3 view .LVU174
 382:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
 383:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   /* Get pending bit */
 384:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   regaddr = &EXTI->PR;
 558              		.loc 1 384 3 view .LVU175
 385:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
 386:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   /* return 1 if bit is set else 0 */
 387:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   regval = ((*regaddr & hexti->Line) >> POSITION_VAL(hexti->Line));
 559              		.loc 1 387 3 view .LVU176
 560              		.loc 1 387 14 is_stmt 0 view .LVU177
 561 0000 064B     		ldr	r3, .L49
 562 0002 1A68     		ldr	r2, [r3]
 563              		.loc 1 387 30 view .LVU178
 564 0004 0368     		ldr	r3, [r0]
ARM GAS  /tmp/ccv9JeW7.s 			page 18


 565              		.loc 1 387 23 view .LVU179
 566 0006 02EA0300 		and	r0, r2, r3
 567              	.LVL41:
 568              	.LBB6:
 569              	.LBI6:
 570              		.file 2 "CORE/cmsis_gcc.h"
   1:CORE/cmsis_gcc.h **** /**************************************************************************//**
   2:CORE/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:CORE/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:CORE/cmsis_gcc.h ****  * @version  V5.2.1
   5:CORE/cmsis_gcc.h ****  * @date     30. July 2019
   6:CORE/cmsis_gcc.h ****  ******************************************************************************/
   7:CORE/cmsis_gcc.h **** /*
   8:CORE/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:CORE/cmsis_gcc.h ****  *
  10:CORE/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:CORE/cmsis_gcc.h ****  *
  12:CORE/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:CORE/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:CORE/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:CORE/cmsis_gcc.h ****  *
  16:CORE/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:CORE/cmsis_gcc.h ****  *
  18:CORE/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:CORE/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:CORE/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:CORE/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:CORE/cmsis_gcc.h ****  * limitations under the License.
  23:CORE/cmsis_gcc.h ****  */
  24:CORE/cmsis_gcc.h **** 
  25:CORE/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:CORE/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:CORE/cmsis_gcc.h **** 
  28:CORE/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:CORE/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:CORE/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:CORE/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:CORE/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:CORE/cmsis_gcc.h **** 
  34:CORE/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:CORE/cmsis_gcc.h **** #ifndef __has_builtin
  36:CORE/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:CORE/cmsis_gcc.h **** #endif
  38:CORE/cmsis_gcc.h **** 
  39:CORE/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:CORE/cmsis_gcc.h **** #ifndef   __ASM
  41:CORE/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:CORE/cmsis_gcc.h **** #endif
  43:CORE/cmsis_gcc.h **** #ifndef   __INLINE
  44:CORE/cmsis_gcc.h ****   #define __INLINE                               inline
  45:CORE/cmsis_gcc.h **** #endif
  46:CORE/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:CORE/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:CORE/cmsis_gcc.h **** #endif
  49:CORE/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:CORE/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:CORE/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccv9JeW7.s 			page 19


  52:CORE/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:CORE/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:CORE/cmsis_gcc.h **** #endif
  55:CORE/cmsis_gcc.h **** #ifndef   __USED
  56:CORE/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:CORE/cmsis_gcc.h **** #endif
  58:CORE/cmsis_gcc.h **** #ifndef   __WEAK
  59:CORE/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:CORE/cmsis_gcc.h **** #endif
  61:CORE/cmsis_gcc.h **** #ifndef   __PACKED
  62:CORE/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:CORE/cmsis_gcc.h **** #endif
  64:CORE/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:CORE/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:CORE/cmsis_gcc.h **** #endif
  67:CORE/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:CORE/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:CORE/cmsis_gcc.h **** #endif
  70:CORE/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:CORE/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:CORE/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:CORE/cmsis_gcc.h **** #endif
  78:CORE/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:CORE/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:CORE/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:CORE/cmsis_gcc.h **** #endif
  86:CORE/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:CORE/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:CORE/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:CORE/cmsis_gcc.h **** #endif
  94:CORE/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:CORE/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:CORE/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:CORE/cmsis_gcc.h **** #endif
 102:CORE/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:CORE/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:CORE/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:CORE/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
ARM GAS  /tmp/ccv9JeW7.s 			page 20


 109:CORE/cmsis_gcc.h **** #endif
 110:CORE/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:CORE/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:CORE/cmsis_gcc.h **** #endif
 113:CORE/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:CORE/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:CORE/cmsis_gcc.h **** #endif
 116:CORE/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:CORE/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:CORE/cmsis_gcc.h **** #endif
 119:CORE/cmsis_gcc.h **** 
 120:CORE/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:CORE/cmsis_gcc.h **** 
 122:CORE/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:CORE/cmsis_gcc.h **** 
 124:CORE/cmsis_gcc.h **** /**
 125:CORE/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:CORE/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:CORE/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:CORE/cmsis_gcc.h ****            in the used linker script.
 129:CORE/cmsis_gcc.h **** 
 130:CORE/cmsis_gcc.h ****  */
 131:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:CORE/cmsis_gcc.h **** {
 133:CORE/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:CORE/cmsis_gcc.h **** 
 135:CORE/cmsis_gcc.h ****   typedef struct {
 136:CORE/cmsis_gcc.h ****     uint32_t const* src;
 137:CORE/cmsis_gcc.h ****     uint32_t* dest;
 138:CORE/cmsis_gcc.h ****     uint32_t  wlen;
 139:CORE/cmsis_gcc.h ****   } __copy_table_t;
 140:CORE/cmsis_gcc.h **** 
 141:CORE/cmsis_gcc.h ****   typedef struct {
 142:CORE/cmsis_gcc.h ****     uint32_t* dest;
 143:CORE/cmsis_gcc.h ****     uint32_t  wlen;
 144:CORE/cmsis_gcc.h ****   } __zero_table_t;
 145:CORE/cmsis_gcc.h **** 
 146:CORE/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:CORE/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:CORE/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:CORE/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:CORE/cmsis_gcc.h **** 
 151:CORE/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:CORE/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:CORE/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:CORE/cmsis_gcc.h ****     }
 155:CORE/cmsis_gcc.h ****   }
 156:CORE/cmsis_gcc.h **** 
 157:CORE/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:CORE/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:CORE/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:CORE/cmsis_gcc.h ****     }
 161:CORE/cmsis_gcc.h ****   }
 162:CORE/cmsis_gcc.h **** 
 163:CORE/cmsis_gcc.h ****   _start();
 164:CORE/cmsis_gcc.h **** }
 165:CORE/cmsis_gcc.h **** 
ARM GAS  /tmp/ccv9JeW7.s 			page 21


 166:CORE/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:CORE/cmsis_gcc.h **** #endif
 168:CORE/cmsis_gcc.h **** 
 169:CORE/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:CORE/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:CORE/cmsis_gcc.h **** #endif
 172:CORE/cmsis_gcc.h **** 
 173:CORE/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:CORE/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:CORE/cmsis_gcc.h **** #endif
 176:CORE/cmsis_gcc.h **** 
 177:CORE/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:CORE/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:CORE/cmsis_gcc.h **** #endif
 180:CORE/cmsis_gcc.h **** 
 181:CORE/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:CORE/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:CORE/cmsis_gcc.h **** #endif
 184:CORE/cmsis_gcc.h **** 
 185:CORE/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:CORE/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:CORE/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:CORE/cmsis_gcc.h ****   @{
 189:CORE/cmsis_gcc.h ****  */
 190:CORE/cmsis_gcc.h **** 
 191:CORE/cmsis_gcc.h **** /**
 192:CORE/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:CORE/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:CORE/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:CORE/cmsis_gcc.h ****  */
 196:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:CORE/cmsis_gcc.h **** {
 198:CORE/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:CORE/cmsis_gcc.h **** }
 200:CORE/cmsis_gcc.h **** 
 201:CORE/cmsis_gcc.h **** 
 202:CORE/cmsis_gcc.h **** /**
 203:CORE/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:CORE/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:CORE/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:CORE/cmsis_gcc.h ****  */
 207:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 208:CORE/cmsis_gcc.h **** {
 209:CORE/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 210:CORE/cmsis_gcc.h **** }
 211:CORE/cmsis_gcc.h **** 
 212:CORE/cmsis_gcc.h **** 
 213:CORE/cmsis_gcc.h **** /**
 214:CORE/cmsis_gcc.h ****   \brief   Get Control Register
 215:CORE/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 216:CORE/cmsis_gcc.h ****   \return               Control Register value
 217:CORE/cmsis_gcc.h ****  */
 218:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 219:CORE/cmsis_gcc.h **** {
 220:CORE/cmsis_gcc.h ****   uint32_t result;
 221:CORE/cmsis_gcc.h **** 
 222:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
ARM GAS  /tmp/ccv9JeW7.s 			page 22


 223:CORE/cmsis_gcc.h ****   return(result);
 224:CORE/cmsis_gcc.h **** }
 225:CORE/cmsis_gcc.h **** 
 226:CORE/cmsis_gcc.h **** 
 227:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 228:CORE/cmsis_gcc.h **** /**
 229:CORE/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 230:CORE/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 231:CORE/cmsis_gcc.h ****   \return               non-secure Control Register value
 232:CORE/cmsis_gcc.h ****  */
 233:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 234:CORE/cmsis_gcc.h **** {
 235:CORE/cmsis_gcc.h ****   uint32_t result;
 236:CORE/cmsis_gcc.h **** 
 237:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 238:CORE/cmsis_gcc.h ****   return(result);
 239:CORE/cmsis_gcc.h **** }
 240:CORE/cmsis_gcc.h **** #endif
 241:CORE/cmsis_gcc.h **** 
 242:CORE/cmsis_gcc.h **** 
 243:CORE/cmsis_gcc.h **** /**
 244:CORE/cmsis_gcc.h ****   \brief   Set Control Register
 245:CORE/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 246:CORE/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 247:CORE/cmsis_gcc.h ****  */
 248:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 249:CORE/cmsis_gcc.h **** {
 250:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 251:CORE/cmsis_gcc.h **** }
 252:CORE/cmsis_gcc.h **** 
 253:CORE/cmsis_gcc.h **** 
 254:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 255:CORE/cmsis_gcc.h **** /**
 256:CORE/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 257:CORE/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 258:CORE/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 259:CORE/cmsis_gcc.h ****  */
 260:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 261:CORE/cmsis_gcc.h **** {
 262:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 263:CORE/cmsis_gcc.h **** }
 264:CORE/cmsis_gcc.h **** #endif
 265:CORE/cmsis_gcc.h **** 
 266:CORE/cmsis_gcc.h **** 
 267:CORE/cmsis_gcc.h **** /**
 268:CORE/cmsis_gcc.h ****   \brief   Get IPSR Register
 269:CORE/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 270:CORE/cmsis_gcc.h ****   \return               IPSR Register value
 271:CORE/cmsis_gcc.h ****  */
 272:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 273:CORE/cmsis_gcc.h **** {
 274:CORE/cmsis_gcc.h ****   uint32_t result;
 275:CORE/cmsis_gcc.h **** 
 276:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 277:CORE/cmsis_gcc.h ****   return(result);
 278:CORE/cmsis_gcc.h **** }
 279:CORE/cmsis_gcc.h **** 
ARM GAS  /tmp/ccv9JeW7.s 			page 23


 280:CORE/cmsis_gcc.h **** 
 281:CORE/cmsis_gcc.h **** /**
 282:CORE/cmsis_gcc.h ****   \brief   Get APSR Register
 283:CORE/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 284:CORE/cmsis_gcc.h ****   \return               APSR Register value
 285:CORE/cmsis_gcc.h ****  */
 286:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 287:CORE/cmsis_gcc.h **** {
 288:CORE/cmsis_gcc.h ****   uint32_t result;
 289:CORE/cmsis_gcc.h **** 
 290:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 291:CORE/cmsis_gcc.h ****   return(result);
 292:CORE/cmsis_gcc.h **** }
 293:CORE/cmsis_gcc.h **** 
 294:CORE/cmsis_gcc.h **** 
 295:CORE/cmsis_gcc.h **** /**
 296:CORE/cmsis_gcc.h ****   \brief   Get xPSR Register
 297:CORE/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 298:CORE/cmsis_gcc.h ****   \return               xPSR Register value
 299:CORE/cmsis_gcc.h ****  */
 300:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 301:CORE/cmsis_gcc.h **** {
 302:CORE/cmsis_gcc.h ****   uint32_t result;
 303:CORE/cmsis_gcc.h **** 
 304:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 305:CORE/cmsis_gcc.h ****   return(result);
 306:CORE/cmsis_gcc.h **** }
 307:CORE/cmsis_gcc.h **** 
 308:CORE/cmsis_gcc.h **** 
 309:CORE/cmsis_gcc.h **** /**
 310:CORE/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 311:CORE/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 312:CORE/cmsis_gcc.h ****   \return               PSP Register value
 313:CORE/cmsis_gcc.h ****  */
 314:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 315:CORE/cmsis_gcc.h **** {
 316:CORE/cmsis_gcc.h ****   uint32_t result;
 317:CORE/cmsis_gcc.h **** 
 318:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 319:CORE/cmsis_gcc.h ****   return(result);
 320:CORE/cmsis_gcc.h **** }
 321:CORE/cmsis_gcc.h **** 
 322:CORE/cmsis_gcc.h **** 
 323:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 324:CORE/cmsis_gcc.h **** /**
 325:CORE/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 326:CORE/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 327:CORE/cmsis_gcc.h ****   \return               PSP Register value
 328:CORE/cmsis_gcc.h ****  */
 329:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 330:CORE/cmsis_gcc.h **** {
 331:CORE/cmsis_gcc.h ****   uint32_t result;
 332:CORE/cmsis_gcc.h **** 
 333:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 334:CORE/cmsis_gcc.h ****   return(result);
 335:CORE/cmsis_gcc.h **** }
 336:CORE/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccv9JeW7.s 			page 24


 337:CORE/cmsis_gcc.h **** 
 338:CORE/cmsis_gcc.h **** 
 339:CORE/cmsis_gcc.h **** /**
 340:CORE/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 341:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 342:CORE/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 343:CORE/cmsis_gcc.h ****  */
 344:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 345:CORE/cmsis_gcc.h **** {
 346:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 347:CORE/cmsis_gcc.h **** }
 348:CORE/cmsis_gcc.h **** 
 349:CORE/cmsis_gcc.h **** 
 350:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:CORE/cmsis_gcc.h **** /**
 352:CORE/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 353:CORE/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 354:CORE/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 355:CORE/cmsis_gcc.h ****  */
 356:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 357:CORE/cmsis_gcc.h **** {
 358:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 359:CORE/cmsis_gcc.h **** }
 360:CORE/cmsis_gcc.h **** #endif
 361:CORE/cmsis_gcc.h **** 
 362:CORE/cmsis_gcc.h **** 
 363:CORE/cmsis_gcc.h **** /**
 364:CORE/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 365:CORE/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 366:CORE/cmsis_gcc.h ****   \return               MSP Register value
 367:CORE/cmsis_gcc.h ****  */
 368:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 369:CORE/cmsis_gcc.h **** {
 370:CORE/cmsis_gcc.h ****   uint32_t result;
 371:CORE/cmsis_gcc.h **** 
 372:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 373:CORE/cmsis_gcc.h ****   return(result);
 374:CORE/cmsis_gcc.h **** }
 375:CORE/cmsis_gcc.h **** 
 376:CORE/cmsis_gcc.h **** 
 377:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 378:CORE/cmsis_gcc.h **** /**
 379:CORE/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 380:CORE/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 381:CORE/cmsis_gcc.h ****   \return               MSP Register value
 382:CORE/cmsis_gcc.h ****  */
 383:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 384:CORE/cmsis_gcc.h **** {
 385:CORE/cmsis_gcc.h ****   uint32_t result;
 386:CORE/cmsis_gcc.h **** 
 387:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 388:CORE/cmsis_gcc.h ****   return(result);
 389:CORE/cmsis_gcc.h **** }
 390:CORE/cmsis_gcc.h **** #endif
 391:CORE/cmsis_gcc.h **** 
 392:CORE/cmsis_gcc.h **** 
 393:CORE/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccv9JeW7.s 			page 25


 394:CORE/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 395:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 396:CORE/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 397:CORE/cmsis_gcc.h ****  */
 398:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 399:CORE/cmsis_gcc.h **** {
 400:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 401:CORE/cmsis_gcc.h **** }
 402:CORE/cmsis_gcc.h **** 
 403:CORE/cmsis_gcc.h **** 
 404:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 405:CORE/cmsis_gcc.h **** /**
 406:CORE/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 407:CORE/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 408:CORE/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 409:CORE/cmsis_gcc.h ****  */
 410:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 411:CORE/cmsis_gcc.h **** {
 412:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 413:CORE/cmsis_gcc.h **** }
 414:CORE/cmsis_gcc.h **** #endif
 415:CORE/cmsis_gcc.h **** 
 416:CORE/cmsis_gcc.h **** 
 417:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 418:CORE/cmsis_gcc.h **** /**
 419:CORE/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 420:CORE/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 421:CORE/cmsis_gcc.h ****   \return               SP Register value
 422:CORE/cmsis_gcc.h ****  */
 423:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 424:CORE/cmsis_gcc.h **** {
 425:CORE/cmsis_gcc.h ****   uint32_t result;
 426:CORE/cmsis_gcc.h **** 
 427:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 428:CORE/cmsis_gcc.h ****   return(result);
 429:CORE/cmsis_gcc.h **** }
 430:CORE/cmsis_gcc.h **** 
 431:CORE/cmsis_gcc.h **** 
 432:CORE/cmsis_gcc.h **** /**
 433:CORE/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 434:CORE/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 435:CORE/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 436:CORE/cmsis_gcc.h ****  */
 437:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 438:CORE/cmsis_gcc.h **** {
 439:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 440:CORE/cmsis_gcc.h **** }
 441:CORE/cmsis_gcc.h **** #endif
 442:CORE/cmsis_gcc.h **** 
 443:CORE/cmsis_gcc.h **** 
 444:CORE/cmsis_gcc.h **** /**
 445:CORE/cmsis_gcc.h ****   \brief   Get Priority Mask
 446:CORE/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 447:CORE/cmsis_gcc.h ****   \return               Priority Mask value
 448:CORE/cmsis_gcc.h ****  */
 449:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 450:CORE/cmsis_gcc.h **** {
ARM GAS  /tmp/ccv9JeW7.s 			page 26


 451:CORE/cmsis_gcc.h ****   uint32_t result;
 452:CORE/cmsis_gcc.h **** 
 453:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 454:CORE/cmsis_gcc.h ****   return(result);
 455:CORE/cmsis_gcc.h **** }
 456:CORE/cmsis_gcc.h **** 
 457:CORE/cmsis_gcc.h **** 
 458:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 459:CORE/cmsis_gcc.h **** /**
 460:CORE/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 461:CORE/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 462:CORE/cmsis_gcc.h ****   \return               Priority Mask value
 463:CORE/cmsis_gcc.h ****  */
 464:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 465:CORE/cmsis_gcc.h **** {
 466:CORE/cmsis_gcc.h ****   uint32_t result;
 467:CORE/cmsis_gcc.h **** 
 468:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) );
 469:CORE/cmsis_gcc.h ****   return(result);
 470:CORE/cmsis_gcc.h **** }
 471:CORE/cmsis_gcc.h **** #endif
 472:CORE/cmsis_gcc.h **** 
 473:CORE/cmsis_gcc.h **** 
 474:CORE/cmsis_gcc.h **** /**
 475:CORE/cmsis_gcc.h ****   \brief   Set Priority Mask
 476:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 477:CORE/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 478:CORE/cmsis_gcc.h ****  */
 479:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 480:CORE/cmsis_gcc.h **** {
 481:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 482:CORE/cmsis_gcc.h **** }
 483:CORE/cmsis_gcc.h **** 
 484:CORE/cmsis_gcc.h **** 
 485:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 486:CORE/cmsis_gcc.h **** /**
 487:CORE/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 488:CORE/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 489:CORE/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 490:CORE/cmsis_gcc.h ****  */
 491:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 492:CORE/cmsis_gcc.h **** {
 493:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 494:CORE/cmsis_gcc.h **** }
 495:CORE/cmsis_gcc.h **** #endif
 496:CORE/cmsis_gcc.h **** 
 497:CORE/cmsis_gcc.h **** 
 498:CORE/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 499:CORE/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 500:CORE/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 501:CORE/cmsis_gcc.h **** /**
 502:CORE/cmsis_gcc.h ****   \brief   Enable FIQ
 503:CORE/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 504:CORE/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 505:CORE/cmsis_gcc.h ****  */
 506:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 507:CORE/cmsis_gcc.h **** {
ARM GAS  /tmp/ccv9JeW7.s 			page 27


 508:CORE/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 509:CORE/cmsis_gcc.h **** }
 510:CORE/cmsis_gcc.h **** 
 511:CORE/cmsis_gcc.h **** 
 512:CORE/cmsis_gcc.h **** /**
 513:CORE/cmsis_gcc.h ****   \brief   Disable FIQ
 514:CORE/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 515:CORE/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 516:CORE/cmsis_gcc.h ****  */
 517:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 518:CORE/cmsis_gcc.h **** {
 519:CORE/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 520:CORE/cmsis_gcc.h **** }
 521:CORE/cmsis_gcc.h **** 
 522:CORE/cmsis_gcc.h **** 
 523:CORE/cmsis_gcc.h **** /**
 524:CORE/cmsis_gcc.h ****   \brief   Get Base Priority
 525:CORE/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 526:CORE/cmsis_gcc.h ****   \return               Base Priority register value
 527:CORE/cmsis_gcc.h ****  */
 528:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 529:CORE/cmsis_gcc.h **** {
 530:CORE/cmsis_gcc.h ****   uint32_t result;
 531:CORE/cmsis_gcc.h **** 
 532:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 533:CORE/cmsis_gcc.h ****   return(result);
 534:CORE/cmsis_gcc.h **** }
 535:CORE/cmsis_gcc.h **** 
 536:CORE/cmsis_gcc.h **** 
 537:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 538:CORE/cmsis_gcc.h **** /**
 539:CORE/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 540:CORE/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 541:CORE/cmsis_gcc.h ****   \return               Base Priority register value
 542:CORE/cmsis_gcc.h ****  */
 543:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 544:CORE/cmsis_gcc.h **** {
 545:CORE/cmsis_gcc.h ****   uint32_t result;
 546:CORE/cmsis_gcc.h **** 
 547:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 548:CORE/cmsis_gcc.h ****   return(result);
 549:CORE/cmsis_gcc.h **** }
 550:CORE/cmsis_gcc.h **** #endif
 551:CORE/cmsis_gcc.h **** 
 552:CORE/cmsis_gcc.h **** 
 553:CORE/cmsis_gcc.h **** /**
 554:CORE/cmsis_gcc.h ****   \brief   Set Base Priority
 555:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 556:CORE/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 557:CORE/cmsis_gcc.h ****  */
 558:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 559:CORE/cmsis_gcc.h **** {
 560:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 561:CORE/cmsis_gcc.h **** }
 562:CORE/cmsis_gcc.h **** 
 563:CORE/cmsis_gcc.h **** 
 564:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
ARM GAS  /tmp/ccv9JeW7.s 			page 28


 565:CORE/cmsis_gcc.h **** /**
 566:CORE/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 567:CORE/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 568:CORE/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 569:CORE/cmsis_gcc.h ****  */
 570:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 571:CORE/cmsis_gcc.h **** {
 572:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 573:CORE/cmsis_gcc.h **** }
 574:CORE/cmsis_gcc.h **** #endif
 575:CORE/cmsis_gcc.h **** 
 576:CORE/cmsis_gcc.h **** 
 577:CORE/cmsis_gcc.h **** /**
 578:CORE/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 579:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 580:CORE/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 581:CORE/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 582:CORE/cmsis_gcc.h ****  */
 583:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 584:CORE/cmsis_gcc.h **** {
 585:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 586:CORE/cmsis_gcc.h **** }
 587:CORE/cmsis_gcc.h **** 
 588:CORE/cmsis_gcc.h **** 
 589:CORE/cmsis_gcc.h **** /**
 590:CORE/cmsis_gcc.h ****   \brief   Get Fault Mask
 591:CORE/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 592:CORE/cmsis_gcc.h ****   \return               Fault Mask register value
 593:CORE/cmsis_gcc.h ****  */
 594:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 595:CORE/cmsis_gcc.h **** {
 596:CORE/cmsis_gcc.h ****   uint32_t result;
 597:CORE/cmsis_gcc.h **** 
 598:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 599:CORE/cmsis_gcc.h ****   return(result);
 600:CORE/cmsis_gcc.h **** }
 601:CORE/cmsis_gcc.h **** 
 602:CORE/cmsis_gcc.h **** 
 603:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 604:CORE/cmsis_gcc.h **** /**
 605:CORE/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 606:CORE/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 607:CORE/cmsis_gcc.h ****   \return               Fault Mask register value
 608:CORE/cmsis_gcc.h ****  */
 609:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 610:CORE/cmsis_gcc.h **** {
 611:CORE/cmsis_gcc.h ****   uint32_t result;
 612:CORE/cmsis_gcc.h **** 
 613:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 614:CORE/cmsis_gcc.h ****   return(result);
 615:CORE/cmsis_gcc.h **** }
 616:CORE/cmsis_gcc.h **** #endif
 617:CORE/cmsis_gcc.h **** 
 618:CORE/cmsis_gcc.h **** 
 619:CORE/cmsis_gcc.h **** /**
 620:CORE/cmsis_gcc.h ****   \brief   Set Fault Mask
 621:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
ARM GAS  /tmp/ccv9JeW7.s 			page 29


 622:CORE/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 623:CORE/cmsis_gcc.h ****  */
 624:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 625:CORE/cmsis_gcc.h **** {
 626:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 627:CORE/cmsis_gcc.h **** }
 628:CORE/cmsis_gcc.h **** 
 629:CORE/cmsis_gcc.h **** 
 630:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 631:CORE/cmsis_gcc.h **** /**
 632:CORE/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 633:CORE/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 634:CORE/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 635:CORE/cmsis_gcc.h ****  */
 636:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 637:CORE/cmsis_gcc.h **** {
 638:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 639:CORE/cmsis_gcc.h **** }
 640:CORE/cmsis_gcc.h **** #endif
 641:CORE/cmsis_gcc.h **** 
 642:CORE/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 643:CORE/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 644:CORE/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 645:CORE/cmsis_gcc.h **** 
 646:CORE/cmsis_gcc.h **** 
 647:CORE/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 648:CORE/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 649:CORE/cmsis_gcc.h **** 
 650:CORE/cmsis_gcc.h **** /**
 651:CORE/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 652:CORE/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:CORE/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 654:CORE/cmsis_gcc.h ****   mode.
 655:CORE/cmsis_gcc.h **** 
 656:CORE/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 657:CORE/cmsis_gcc.h ****   \return               PSPLIM Register value
 658:CORE/cmsis_gcc.h ****  */
 659:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 660:CORE/cmsis_gcc.h **** {
 661:CORE/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 662:CORE/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 663:CORE/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 664:CORE/cmsis_gcc.h ****   return 0U;
 665:CORE/cmsis_gcc.h **** #else
 666:CORE/cmsis_gcc.h ****   uint32_t result;
 667:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 668:CORE/cmsis_gcc.h ****   return result;
 669:CORE/cmsis_gcc.h **** #endif
 670:CORE/cmsis_gcc.h **** }
 671:CORE/cmsis_gcc.h **** 
 672:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 673:CORE/cmsis_gcc.h **** /**
 674:CORE/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 675:CORE/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 676:CORE/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 677:CORE/cmsis_gcc.h **** 
 678:CORE/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
ARM GAS  /tmp/ccv9JeW7.s 			page 30


 679:CORE/cmsis_gcc.h ****   \return               PSPLIM Register value
 680:CORE/cmsis_gcc.h ****  */
 681:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 682:CORE/cmsis_gcc.h **** {
 683:CORE/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 684:CORE/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 685:CORE/cmsis_gcc.h ****   return 0U;
 686:CORE/cmsis_gcc.h **** #else
 687:CORE/cmsis_gcc.h ****   uint32_t result;
 688:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 689:CORE/cmsis_gcc.h ****   return result;
 690:CORE/cmsis_gcc.h **** #endif
 691:CORE/cmsis_gcc.h **** }
 692:CORE/cmsis_gcc.h **** #endif
 693:CORE/cmsis_gcc.h **** 
 694:CORE/cmsis_gcc.h **** 
 695:CORE/cmsis_gcc.h **** /**
 696:CORE/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 697:CORE/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 698:CORE/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 699:CORE/cmsis_gcc.h ****   mode.
 700:CORE/cmsis_gcc.h **** 
 701:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 702:CORE/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 703:CORE/cmsis_gcc.h ****  */
 704:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 705:CORE/cmsis_gcc.h **** {
 706:CORE/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 707:CORE/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 708:CORE/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 709:CORE/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 710:CORE/cmsis_gcc.h **** #else
 711:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 712:CORE/cmsis_gcc.h **** #endif
 713:CORE/cmsis_gcc.h **** }
 714:CORE/cmsis_gcc.h **** 
 715:CORE/cmsis_gcc.h **** 
 716:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 717:CORE/cmsis_gcc.h **** /**
 718:CORE/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 719:CORE/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 720:CORE/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 721:CORE/cmsis_gcc.h **** 
 722:CORE/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 723:CORE/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 724:CORE/cmsis_gcc.h ****  */
 725:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 726:CORE/cmsis_gcc.h **** {
 727:CORE/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 728:CORE/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 729:CORE/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 730:CORE/cmsis_gcc.h **** #else
 731:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 732:CORE/cmsis_gcc.h **** #endif
 733:CORE/cmsis_gcc.h **** }
 734:CORE/cmsis_gcc.h **** #endif
 735:CORE/cmsis_gcc.h **** 
ARM GAS  /tmp/ccv9JeW7.s 			page 31


 736:CORE/cmsis_gcc.h **** 
 737:CORE/cmsis_gcc.h **** /**
 738:CORE/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 739:CORE/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 740:CORE/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 741:CORE/cmsis_gcc.h ****   mode.
 742:CORE/cmsis_gcc.h **** 
 743:CORE/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 744:CORE/cmsis_gcc.h ****   \return               MSPLIM Register value
 745:CORE/cmsis_gcc.h ****  */
 746:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 747:CORE/cmsis_gcc.h **** {
 748:CORE/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 749:CORE/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 750:CORE/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 751:CORE/cmsis_gcc.h ****   return 0U;
 752:CORE/cmsis_gcc.h **** #else
 753:CORE/cmsis_gcc.h ****   uint32_t result;
 754:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 755:CORE/cmsis_gcc.h ****   return result;
 756:CORE/cmsis_gcc.h **** #endif
 757:CORE/cmsis_gcc.h **** }
 758:CORE/cmsis_gcc.h **** 
 759:CORE/cmsis_gcc.h **** 
 760:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 761:CORE/cmsis_gcc.h **** /**
 762:CORE/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 763:CORE/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 764:CORE/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 765:CORE/cmsis_gcc.h **** 
 766:CORE/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 767:CORE/cmsis_gcc.h ****   \return               MSPLIM Register value
 768:CORE/cmsis_gcc.h ****  */
 769:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 770:CORE/cmsis_gcc.h **** {
 771:CORE/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 772:CORE/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 773:CORE/cmsis_gcc.h ****   return 0U;
 774:CORE/cmsis_gcc.h **** #else
 775:CORE/cmsis_gcc.h ****   uint32_t result;
 776:CORE/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 777:CORE/cmsis_gcc.h ****   return result;
 778:CORE/cmsis_gcc.h **** #endif
 779:CORE/cmsis_gcc.h **** }
 780:CORE/cmsis_gcc.h **** #endif
 781:CORE/cmsis_gcc.h **** 
 782:CORE/cmsis_gcc.h **** 
 783:CORE/cmsis_gcc.h **** /**
 784:CORE/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 785:CORE/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 786:CORE/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 787:CORE/cmsis_gcc.h ****   mode.
 788:CORE/cmsis_gcc.h **** 
 789:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 790:CORE/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 791:CORE/cmsis_gcc.h ****  */
 792:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
ARM GAS  /tmp/ccv9JeW7.s 			page 32


 793:CORE/cmsis_gcc.h **** {
 794:CORE/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 795:CORE/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 796:CORE/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 797:CORE/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 798:CORE/cmsis_gcc.h **** #else
 799:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 800:CORE/cmsis_gcc.h **** #endif
 801:CORE/cmsis_gcc.h **** }
 802:CORE/cmsis_gcc.h **** 
 803:CORE/cmsis_gcc.h **** 
 804:CORE/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 805:CORE/cmsis_gcc.h **** /**
 806:CORE/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 807:CORE/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 808:CORE/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 809:CORE/cmsis_gcc.h **** 
 810:CORE/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 811:CORE/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 812:CORE/cmsis_gcc.h ****  */
 813:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 814:CORE/cmsis_gcc.h **** {
 815:CORE/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 816:CORE/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 817:CORE/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 818:CORE/cmsis_gcc.h **** #else
 819:CORE/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 820:CORE/cmsis_gcc.h **** #endif
 821:CORE/cmsis_gcc.h **** }
 822:CORE/cmsis_gcc.h **** #endif
 823:CORE/cmsis_gcc.h **** 
 824:CORE/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 825:CORE/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 826:CORE/cmsis_gcc.h **** 
 827:CORE/cmsis_gcc.h **** 
 828:CORE/cmsis_gcc.h **** /**
 829:CORE/cmsis_gcc.h ****   \brief   Get FPSCR
 830:CORE/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 831:CORE/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 832:CORE/cmsis_gcc.h ****  */
 833:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 834:CORE/cmsis_gcc.h **** {
 835:CORE/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 836:CORE/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 837:CORE/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr)
 838:CORE/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 839:CORE/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 840:CORE/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 841:CORE/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 842:CORE/cmsis_gcc.h **** #else
 843:CORE/cmsis_gcc.h ****   uint32_t result;
 844:CORE/cmsis_gcc.h **** 
 845:CORE/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 846:CORE/cmsis_gcc.h ****   return(result);
 847:CORE/cmsis_gcc.h **** #endif
 848:CORE/cmsis_gcc.h **** #else
 849:CORE/cmsis_gcc.h ****   return(0U);
ARM GAS  /tmp/ccv9JeW7.s 			page 33


 850:CORE/cmsis_gcc.h **** #endif
 851:CORE/cmsis_gcc.h **** }
 852:CORE/cmsis_gcc.h **** 
 853:CORE/cmsis_gcc.h **** 
 854:CORE/cmsis_gcc.h **** /**
 855:CORE/cmsis_gcc.h ****   \brief   Set FPSCR
 856:CORE/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 857:CORE/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 858:CORE/cmsis_gcc.h ****  */
 859:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 860:CORE/cmsis_gcc.h **** {
 861:CORE/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 862:CORE/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 863:CORE/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 864:CORE/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 865:CORE/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 866:CORE/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 867:CORE/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 868:CORE/cmsis_gcc.h **** #else
 869:CORE/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 870:CORE/cmsis_gcc.h **** #endif
 871:CORE/cmsis_gcc.h **** #else
 872:CORE/cmsis_gcc.h ****   (void)fpscr;
 873:CORE/cmsis_gcc.h **** #endif
 874:CORE/cmsis_gcc.h **** }
 875:CORE/cmsis_gcc.h **** 
 876:CORE/cmsis_gcc.h **** 
 877:CORE/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 878:CORE/cmsis_gcc.h **** 
 879:CORE/cmsis_gcc.h **** 
 880:CORE/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 881:CORE/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 882:CORE/cmsis_gcc.h ****   Access to dedicated instructions
 883:CORE/cmsis_gcc.h ****   @{
 884:CORE/cmsis_gcc.h **** */
 885:CORE/cmsis_gcc.h **** 
 886:CORE/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 887:CORE/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 888:CORE/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 889:CORE/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 890:CORE/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 891:CORE/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 892:CORE/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 893:CORE/cmsis_gcc.h **** #else
 894:CORE/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 895:CORE/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 896:CORE/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 897:CORE/cmsis_gcc.h **** #endif
 898:CORE/cmsis_gcc.h **** 
 899:CORE/cmsis_gcc.h **** /**
 900:CORE/cmsis_gcc.h ****   \brief   No Operation
 901:CORE/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 902:CORE/cmsis_gcc.h ****  */
 903:CORE/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 904:CORE/cmsis_gcc.h **** 
 905:CORE/cmsis_gcc.h **** /**
 906:CORE/cmsis_gcc.h ****   \brief   Wait For Interrupt
ARM GAS  /tmp/ccv9JeW7.s 			page 34


 907:CORE/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 908:CORE/cmsis_gcc.h ****  */
 909:CORE/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 910:CORE/cmsis_gcc.h **** 
 911:CORE/cmsis_gcc.h **** 
 912:CORE/cmsis_gcc.h **** /**
 913:CORE/cmsis_gcc.h ****   \brief   Wait For Event
 914:CORE/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 915:CORE/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 916:CORE/cmsis_gcc.h ****  */
 917:CORE/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 918:CORE/cmsis_gcc.h **** 
 919:CORE/cmsis_gcc.h **** 
 920:CORE/cmsis_gcc.h **** /**
 921:CORE/cmsis_gcc.h ****   \brief   Send Event
 922:CORE/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 923:CORE/cmsis_gcc.h ****  */
 924:CORE/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 925:CORE/cmsis_gcc.h **** 
 926:CORE/cmsis_gcc.h **** 
 927:CORE/cmsis_gcc.h **** /**
 928:CORE/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 929:CORE/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 930:CORE/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 931:CORE/cmsis_gcc.h ****            after the instruction has been completed.
 932:CORE/cmsis_gcc.h ****  */
 933:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 934:CORE/cmsis_gcc.h **** {
 935:CORE/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 936:CORE/cmsis_gcc.h **** }
 937:CORE/cmsis_gcc.h **** 
 938:CORE/cmsis_gcc.h **** 
 939:CORE/cmsis_gcc.h **** /**
 940:CORE/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 941:CORE/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 942:CORE/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 943:CORE/cmsis_gcc.h ****  */
 944:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 945:CORE/cmsis_gcc.h **** {
 946:CORE/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 947:CORE/cmsis_gcc.h **** }
 948:CORE/cmsis_gcc.h **** 
 949:CORE/cmsis_gcc.h **** 
 950:CORE/cmsis_gcc.h **** /**
 951:CORE/cmsis_gcc.h ****   \brief   Data Memory Barrier
 952:CORE/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 953:CORE/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 954:CORE/cmsis_gcc.h ****  */
 955:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 956:CORE/cmsis_gcc.h **** {
 957:CORE/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 958:CORE/cmsis_gcc.h **** }
 959:CORE/cmsis_gcc.h **** 
 960:CORE/cmsis_gcc.h **** 
 961:CORE/cmsis_gcc.h **** /**
 962:CORE/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 963:CORE/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
ARM GAS  /tmp/ccv9JeW7.s 			page 35


 964:CORE/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 965:CORE/cmsis_gcc.h ****   \return               Reversed value
 966:CORE/cmsis_gcc.h ****  */
 967:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 968:CORE/cmsis_gcc.h **** {
 969:CORE/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 970:CORE/cmsis_gcc.h ****   return __builtin_bswap32(value);
 971:CORE/cmsis_gcc.h **** #else
 972:CORE/cmsis_gcc.h ****   uint32_t result;
 973:CORE/cmsis_gcc.h **** 
 974:CORE/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 975:CORE/cmsis_gcc.h ****   return result;
 976:CORE/cmsis_gcc.h **** #endif
 977:CORE/cmsis_gcc.h **** }
 978:CORE/cmsis_gcc.h **** 
 979:CORE/cmsis_gcc.h **** 
 980:CORE/cmsis_gcc.h **** /**
 981:CORE/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 982:CORE/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 983:CORE/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 984:CORE/cmsis_gcc.h ****   \return               Reversed value
 985:CORE/cmsis_gcc.h ****  */
 986:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 987:CORE/cmsis_gcc.h **** {
 988:CORE/cmsis_gcc.h ****   uint32_t result;
 989:CORE/cmsis_gcc.h **** 
 990:CORE/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 991:CORE/cmsis_gcc.h ****   return result;
 992:CORE/cmsis_gcc.h **** }
 993:CORE/cmsis_gcc.h **** 
 994:CORE/cmsis_gcc.h **** 
 995:CORE/cmsis_gcc.h **** /**
 996:CORE/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 997:CORE/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 998:CORE/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 999:CORE/cmsis_gcc.h ****   \return               Reversed value
1000:CORE/cmsis_gcc.h ****  */
1001:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
1002:CORE/cmsis_gcc.h **** {
1003:CORE/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
1004:CORE/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
1005:CORE/cmsis_gcc.h **** #else
1006:CORE/cmsis_gcc.h ****   int16_t result;
1007:CORE/cmsis_gcc.h **** 
1008:CORE/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
1009:CORE/cmsis_gcc.h ****   return result;
1010:CORE/cmsis_gcc.h **** #endif
1011:CORE/cmsis_gcc.h **** }
1012:CORE/cmsis_gcc.h **** 
1013:CORE/cmsis_gcc.h **** 
1014:CORE/cmsis_gcc.h **** /**
1015:CORE/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
1016:CORE/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
1017:CORE/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
1018:CORE/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
1019:CORE/cmsis_gcc.h ****   \return               Rotated value
1020:CORE/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccv9JeW7.s 			page 36


1021:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
1022:CORE/cmsis_gcc.h **** {
1023:CORE/cmsis_gcc.h ****   op2 %= 32U;
1024:CORE/cmsis_gcc.h ****   if (op2 == 0U)
1025:CORE/cmsis_gcc.h ****   {
1026:CORE/cmsis_gcc.h ****     return op1;
1027:CORE/cmsis_gcc.h ****   }
1028:CORE/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
1029:CORE/cmsis_gcc.h **** }
1030:CORE/cmsis_gcc.h **** 
1031:CORE/cmsis_gcc.h **** 
1032:CORE/cmsis_gcc.h **** /**
1033:CORE/cmsis_gcc.h ****   \brief   Breakpoint
1034:CORE/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
1035:CORE/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
1036:CORE/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
1037:CORE/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
1038:CORE/cmsis_gcc.h ****  */
1039:CORE/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
1040:CORE/cmsis_gcc.h **** 
1041:CORE/cmsis_gcc.h **** 
1042:CORE/cmsis_gcc.h **** /**
1043:CORE/cmsis_gcc.h ****   \brief   Reverse bit order of value
1044:CORE/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
1045:CORE/cmsis_gcc.h ****   \param [in]    value  Value to reverse
1046:CORE/cmsis_gcc.h ****   \return               Reversed value
1047:CORE/cmsis_gcc.h ****  */
1048:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 571              		.loc 2 1048 31 is_stmt 1 view .LVU180
 572              	.LBB7:
1049:CORE/cmsis_gcc.h **** {
1050:CORE/cmsis_gcc.h ****   uint32_t result;
 573              		.loc 2 1050 3 view .LVU181
1051:CORE/cmsis_gcc.h **** 
1052:CORE/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
1053:CORE/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
1054:CORE/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
1055:CORE/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 574              		.loc 2 1055 4 view .LVU182
 575              		.syntax unified
 576              	@ 1055 "CORE/cmsis_gcc.h" 1
 577 000a 93FAA3F3 		rbit r3, r3
 578              	@ 0 "" 2
 579              	.LVL42:
1056:CORE/cmsis_gcc.h **** #else
1057:CORE/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
1058:CORE/cmsis_gcc.h **** 
1059:CORE/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
1060:CORE/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
1061:CORE/cmsis_gcc.h ****   {
1062:CORE/cmsis_gcc.h ****     result <<= 1U;
1063:CORE/cmsis_gcc.h ****     result |= value & 1U;
1064:CORE/cmsis_gcc.h ****     s--;
1065:CORE/cmsis_gcc.h ****   }
1066:CORE/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
1067:CORE/cmsis_gcc.h **** #endif
1068:CORE/cmsis_gcc.h ****   return result;
ARM GAS  /tmp/ccv9JeW7.s 			page 37


 580              		.loc 2 1068 3 view .LVU183
 581              		.loc 2 1068 3 is_stmt 0 view .LVU184
 582              		.thumb
 583              		.syntax unified
 584              	.LBE7:
 585              	.LBE6:
 586              	.LBB8:
 587              	.LBI8:
1069:CORE/cmsis_gcc.h **** }
1070:CORE/cmsis_gcc.h **** 
1071:CORE/cmsis_gcc.h **** 
1072:CORE/cmsis_gcc.h **** /**
1073:CORE/cmsis_gcc.h ****   \brief   Count leading zeros
1074:CORE/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
1075:CORE/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
1076:CORE/cmsis_gcc.h ****   \return             number of leading zeros in value
1077:CORE/cmsis_gcc.h ****  */
1078:CORE/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 588              		.loc 2 1078 30 is_stmt 1 view .LVU185
 589              	.LBB9:
1079:CORE/cmsis_gcc.h **** {
1080:CORE/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
1081:CORE/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
1082:CORE/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
1083:CORE/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
1084:CORE/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
1085:CORE/cmsis_gcc.h ****      is non-zero".
1086:CORE/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
1087:CORE/cmsis_gcc.h ****      single CLZ instruction.
1088:CORE/cmsis_gcc.h ****    */
1089:CORE/cmsis_gcc.h ****   if (value == 0U)
 590              		.loc 2 1089 3 view .LVU186
 591              		.loc 2 1089 6 is_stmt 0 view .LVU187
 592 000e 1BB1     		cbz	r3, .L48
1090:CORE/cmsis_gcc.h ****   {
1091:CORE/cmsis_gcc.h ****     return 32U;
1092:CORE/cmsis_gcc.h ****   }
1093:CORE/cmsis_gcc.h ****   return __builtin_clz(value);
 593              		.loc 2 1093 3 is_stmt 1 view .LVU188
 594              		.loc 2 1093 10 is_stmt 0 view .LVU189
 595 0010 B3FA83F3 		clz	r3, r3
 596              	.LVL43:
 597              	.L47:
 598              		.loc 2 1093 10 view .LVU190
 599              	.LBE9:
 600              	.LBE8:
 388:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
 389:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   return regval;
 601              		.loc 1 389 3 is_stmt 1 view .LVU191
 390:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** }
 602              		.loc 1 390 1 is_stmt 0 view .LVU192
 603 0014 D840     		lsrs	r0, r0, r3
 604              	.LVL44:
 605              		.loc 1 390 1 view .LVU193
 606 0016 7047     		bx	lr
 607              	.LVL45:
 608              	.L48:
ARM GAS  /tmp/ccv9JeW7.s 			page 38


 609              	.LBB11:
 610              	.LBB10:
1091:CORE/cmsis_gcc.h ****   }
 611              		.loc 2 1091 12 view .LVU194
 612 0018 2023     		movs	r3, #32
 613              	.LVL46:
1091:CORE/cmsis_gcc.h ****   }
 614              		.loc 2 1091 12 view .LVU195
 615 001a FBE7     		b	.L47
 616              	.L50:
 617              		.align	2
 618              	.L49:
 619 001c 143C0140 		.word	1073822740
 620              	.LBE10:
 621              	.LBE11:
 622              		.cfi_endproc
 623              	.LFE138:
 625              		.section	.text.HAL_EXTI_ClearPending,"ax",%progbits
 626              		.align	1
 627              		.global	HAL_EXTI_ClearPending
 628              		.syntax unified
 629              		.thumb
 630              		.thumb_func
 631              		.fpu fpv4-sp-d16
 633              	HAL_EXTI_ClearPending:
 634              	.LVL47:
 635              	.LFB139:
 391:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
 392:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** /**
 393:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * @brief  Clear interrupt pending bit of a dedicated line.
 394:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * @param  hexti Exti handle.
 395:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * @param  Edge Specify which pending edge as to be clear.
 396:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   *         This parameter can be one of the following values:
 397:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   *           @arg @ref EXTI_TRIGGER_RISING_FALLING
 398:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   *         This parameter is kept for compatibility with other series.
 399:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * @retval None.
 400:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   */
 401:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
 402:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** {
 636              		.loc 1 402 1 is_stmt 1 view -0
 637              		.cfi_startproc
 638              		@ args = 0, pretend = 0, frame = 0
 639              		@ frame_needed = 0, uses_anonymous_args = 0
 640              		@ link register save eliminated.
 403:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   /* Check parameters */
 404:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   assert_param(IS_EXTI_LINE(hexti->Line));
 641              		.loc 1 404 3 view .LVU197
 405:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   assert_param(IS_EXTI_PENDING_EDGE(Edge));
 642              		.loc 1 405 3 view .LVU198
 406:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
 407:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   EXTI->PR =  hexti->Line;
 643              		.loc 1 407 3 view .LVU199
 644              		.loc 1 407 20 is_stmt 0 view .LVU200
 645 0000 0268     		ldr	r2, [r0]
 646              		.loc 1 407 12 view .LVU201
 647 0002 014B     		ldr	r3, .L52
 648 0004 5A61     		str	r2, [r3, #20]
ARM GAS  /tmp/ccv9JeW7.s 			page 39


 408:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** }
 649              		.loc 1 408 1 view .LVU202
 650 0006 7047     		bx	lr
 651              	.L53:
 652              		.align	2
 653              	.L52:
 654 0008 003C0140 		.word	1073822720
 655              		.cfi_endproc
 656              	.LFE139:
 658              		.section	.text.HAL_EXTI_GenerateSWI,"ax",%progbits
 659              		.align	1
 660              		.global	HAL_EXTI_GenerateSWI
 661              		.syntax unified
 662              		.thumb
 663              		.thumb_func
 664              		.fpu fpv4-sp-d16
 666              	HAL_EXTI_GenerateSWI:
 667              	.LVL48:
 668              	.LFB140:
 409:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
 410:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** /**
 411:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * @brief  Generate a software interrupt for a dedicated line.
 412:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * @param  hexti Exti handle.
 413:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   * @retval None.
 414:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   */
 415:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
 416:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** {
 669              		.loc 1 416 1 is_stmt 1 view -0
 670              		.cfi_startproc
 671              		@ args = 0, pretend = 0, frame = 0
 672              		@ frame_needed = 0, uses_anonymous_args = 0
 673              		@ link register save eliminated.
 417:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   /* Check parameters */
 418:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   assert_param(IS_EXTI_LINE(hexti->Line));
 674              		.loc 1 418 3 view .LVU204
 419:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** 
 420:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c ****   EXTI->SWIER = hexti->Line;
 675              		.loc 1 420 3 view .LVU205
 676              		.loc 1 420 22 is_stmt 0 view .LVU206
 677 0000 0268     		ldr	r2, [r0]
 678              		.loc 1 420 15 view .LVU207
 679 0002 014B     		ldr	r3, .L55
 680 0004 1A61     		str	r2, [r3, #16]
 421:HALLIB/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c **** }
 681              		.loc 1 421 1 view .LVU208
 682 0006 7047     		bx	lr
 683              	.L56:
 684              		.align	2
 685              	.L55:
 686 0008 003C0140 		.word	1073822720
 687              		.cfi_endproc
 688              	.LFE140:
 690              		.text
 691              	.Letext0:
 692              		.file 3 "/opt/gcc_arm/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/machine/_default_typ
 693              		.file 4 "/opt/gcc_arm/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/_stdint.h"
 694              		.file 5 "CORE/core_cm4.h"
ARM GAS  /tmp/ccv9JeW7.s 			page 40


 695              		.file 6 "./system_stm32f4xx.h"
 696              		.file 7 "./stm32f407xx.h"
 697              		.file 8 "HALLIB/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 698              		.file 9 "HALLIB/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_exti.h"
ARM GAS  /tmp/ccv9JeW7.s 			page 41


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_hal_exti.c
     /tmp/ccv9JeW7.s:18     .text.HAL_EXTI_SetConfigLine:0000000000000000 $t
     /tmp/ccv9JeW7.s:26     .text.HAL_EXTI_SetConfigLine:0000000000000000 HAL_EXTI_SetConfigLine
     /tmp/ccv9JeW7.s:186    .text.HAL_EXTI_SetConfigLine:0000000000000088 $d
     /tmp/ccv9JeW7.s:191    .text.HAL_EXTI_GetConfigLine:0000000000000000 $t
     /tmp/ccv9JeW7.s:198    .text.HAL_EXTI_GetConfigLine:0000000000000000 HAL_EXTI_GetConfigLine
     /tmp/ccv9JeW7.s:326    .text.HAL_EXTI_GetConfigLine:0000000000000074 $d
     /tmp/ccv9JeW7.s:331    .text.HAL_EXTI_ClearConfigLine:0000000000000000 $t
     /tmp/ccv9JeW7.s:338    .text.HAL_EXTI_ClearConfigLine:0000000000000000 HAL_EXTI_ClearConfigLine
     /tmp/ccv9JeW7.s:404    .text.HAL_EXTI_ClearConfigLine:0000000000000038 $d
     /tmp/ccv9JeW7.s:409    .text.HAL_EXTI_RegisterCallback:0000000000000000 $t
     /tmp/ccv9JeW7.s:416    .text.HAL_EXTI_RegisterCallback:0000000000000000 HAL_EXTI_RegisterCallback
     /tmp/ccv9JeW7.s:449    .text.HAL_EXTI_GetHandle:0000000000000000 $t
     /tmp/ccv9JeW7.s:456    .text.HAL_EXTI_GetHandle:0000000000000000 HAL_EXTI_GetHandle
     /tmp/ccv9JeW7.s:488    .text.HAL_EXTI_IRQHandler:0000000000000000 $t
     /tmp/ccv9JeW7.s:495    .text.HAL_EXTI_IRQHandler:0000000000000000 HAL_EXTI_IRQHandler
     /tmp/ccv9JeW7.s:534    .text.HAL_EXTI_IRQHandler:0000000000000018 $d
     /tmp/ccv9JeW7.s:539    .text.HAL_EXTI_GetPending:0000000000000000 $t
     /tmp/ccv9JeW7.s:546    .text.HAL_EXTI_GetPending:0000000000000000 HAL_EXTI_GetPending
     /tmp/ccv9JeW7.s:619    .text.HAL_EXTI_GetPending:000000000000001c $d
     /tmp/ccv9JeW7.s:626    .text.HAL_EXTI_ClearPending:0000000000000000 $t
     /tmp/ccv9JeW7.s:633    .text.HAL_EXTI_ClearPending:0000000000000000 HAL_EXTI_ClearPending
     /tmp/ccv9JeW7.s:654    .text.HAL_EXTI_ClearPending:0000000000000008 $d
     /tmp/ccv9JeW7.s:659    .text.HAL_EXTI_GenerateSWI:0000000000000000 $t
     /tmp/ccv9JeW7.s:666    .text.HAL_EXTI_GenerateSWI:0000000000000000 HAL_EXTI_GenerateSWI
     /tmp/ccv9JeW7.s:686    .text.HAL_EXTI_GenerateSWI:0000000000000008 $d

NO UNDEFINED SYMBOLS

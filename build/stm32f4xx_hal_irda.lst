ARM GAS  /tmp/ccN5ASm9.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_hal_irda.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.IRDA_EndTxTransfer,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	IRDA_EndTxTransfer:
  26              	.LVL0:
  27              	.LFB275:
  28              		.file 1 "stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c"
   1:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
   2:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   ******************************************************************************
   3:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @file    stm32f4xx_hal_irda.c
   4:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @author  MCD Application Team
   5:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @brief   IRDA HAL module driver.
   6:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *          This file provides firmware functions to manage the following
   7:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *          functionalities of the IrDA SIR ENDEC block (IrDA):
   8:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *           + Initialization and de-initialization functions
   9:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *           + IO operation functions
  10:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *           + Peripheral Control functions
  11:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *           + Peripheral State and Errors functions
  12:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *
  13:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   ******************************************************************************
  14:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @attention
  15:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *
  16:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * Copyright (c) 2016 STMicroelectronics.
  17:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * All rights reserved.
  18:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *
  19:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * This software is licensed under terms that can be found in the LICENSE file
  20:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * in the root directory of this software component.
  21:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  22:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *
  23:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   ******************************************************************************
  24:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   @verbatim
  25:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   ==============================================================================
  26:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****                         ##### How to use this driver #####
  27:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   ==============================================================================
  28:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   [..]
  29:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     The IRDA HAL driver can be used as follows:
  30:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
ARM GAS  /tmp/ccN5ASm9.s 			page 2


  31:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     (#) Declare a IRDA_HandleTypeDef handle structure (eg. IRDA_HandleTypeDef hirda).
  32:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     (#) Initialize the IRDA low level resources by implementing the HAL_IRDA_MspInit() API:
  33:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         (##) Enable the USARTx interface clock.
  34:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         (##) IRDA pins configuration:
  35:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****             (+++) Enable the clock for the IRDA GPIOs.
  36:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****             (+++) Configure IRDA pins as alternate function pull-up.
  37:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         (##) NVIC configuration if you need to use interrupt process (HAL_IRDA_Transmit_IT()
  38:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****              and HAL_IRDA_Receive_IT() APIs):
  39:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****             (+++) Configure the USARTx interrupt priority.
  40:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****             (+++) Enable the NVIC USART IRQ handle.
  41:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         (##) DMA Configuration if you need to use DMA process (HAL_IRDA_Transmit_DMA()
  42:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****              and HAL_IRDA_Receive_DMA() APIs):
  43:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****             (+++) Declare a DMA handle structure for the Tx/Rx stream.
  44:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****             (+++) Enable the DMAx interface clock.
  45:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****             (+++) Configure the declared DMA handle structure with the required Tx/Rx parameters.
  46:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****             (+++) Configure the DMA Tx/Rx stream.
  47:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****             (+++) Associate the initialized DMA handle to the IRDA DMA Tx/Rx handle.
  48:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****             (+++) Configure the priority and enable the NVIC for the transfer complete interrupt on
  49:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****             (+++) Configure the IRDAx interrupt priority and enable the NVIC USART IRQ handle
  50:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****                   (used for last byte sending completion detection in DMA non circular mode)
  51:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
  52:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     (#) Program the Baud Rate, Word Length, Parity, IrDA Mode, Prescaler
  53:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         and Mode(Receiver/Transmitter) in the hirda Init structure.
  54:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
  55:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     (#) Initialize the IRDA registers by calling the HAL_IRDA_Init() API:
  56:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         (++) This API configures also the low level Hardware GPIO, CLOCK, CORTEX...etc)
  57:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****              by calling the customized HAL_IRDA_MspInit() API.
  58:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
  59:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****          -@@- The specific IRDA interrupts (Transmission complete interrupt,
  60:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****              RXNE interrupt and Error Interrupts) will be managed using the macros
  61:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****              __HAL_IRDA_ENABLE_IT() and __HAL_IRDA_DISABLE_IT() inside the transmit and receive pro
  62:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
  63:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     (#) Three operation modes are available within this driver :
  64:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
  65:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     *** Polling mode IO operation ***
  66:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     =================================
  67:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     [..]
  68:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       (+) Send an amount of data in blocking mode using HAL_IRDA_Transmit()
  69:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       (+) Receive an amount of data in blocking mode using HAL_IRDA_Receive()
  70:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
  71:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     *** Interrupt mode IO operation ***
  72:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     ===================================
  73:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     [..]
  74:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       (+) Send an amount of data in non blocking mode using HAL_IRDA_Transmit_IT()
  75:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       (+) At transmission end of transfer HAL_IRDA_TxCpltCallback is executed and user can
  76:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****            add his own code by customization of function pointer HAL_IRDA_TxCpltCallback
  77:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       (+) Receive an amount of data in non blocking mode using HAL_IRDA_Receive_IT()
  78:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       (+) At reception end of transfer HAL_IRDA_RxCpltCallback is executed and user can
  79:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****            add his own code by customization of function pointer HAL_IRDA_RxCpltCallback
  80:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       (+) In case of transfer Error, HAL_IRDA_ErrorCallback() function is executed and user can
  81:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****            add his own code by customization of function pointer HAL_IRDA_ErrorCallback
  82:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
  83:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     *** DMA mode IO operation ***
  84:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     =============================
  85:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     [..]
  86:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       (+) Send an amount of data in non blocking mode (DMA) using HAL_IRDA_Transmit_DMA()
  87:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       (+) At transmission end of half transfer HAL_IRDA_TxHalfCpltCallback is executed and user can
ARM GAS  /tmp/ccN5ASm9.s 			page 3


  88:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****             add his own code by customization of function pointer HAL_IRDA_TxHalfCpltCallback
  89:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       (+) At transmission end of transfer HAL_IRDA_TxCpltCallback is executed and user can
  90:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****            add his own code by customization of function pointer HAL_IRDA_TxCpltCallback
  91:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       (+) Receive an amount of data in non blocking mode (DMA) using HAL_IRDA_Receive_DMA()
  92:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       (+) At reception end of half transfer HAL_IRDA_RxHalfCpltCallback is executed and user can
  93:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****             add his own code by customization of function pointer HAL_IRDA_RxHalfCpltCallback
  94:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       (+) At reception end of transfer HAL_IRDA_RxCpltCallback is executed and user can
  95:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****            add his own code by customization of function pointer HAL_IRDA_RxCpltCallback
  96:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       (+) In case of transfer Error, HAL_IRDA_ErrorCallback() function is executed and user can
  97:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****            add his own code by customization of function pointer HAL_IRDA_ErrorCallback
  98:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       (+) Pause the DMA Transfer using HAL_IRDA_DMAPause()
  99:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       (+) Resume the DMA Transfer using HAL_IRDA_DMAResume()
 100:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       (+) Stop the DMA Transfer using HAL_IRDA_DMAStop()
 101:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 102:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     *** IRDA HAL driver macros list ***
 103:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     ===================================
 104:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     [..]
 105:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       Below the list of most used macros in IRDA HAL driver.
 106:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 107:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****        (+) __HAL_IRDA_ENABLE: Enable the IRDA peripheral
 108:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****        (+) __HAL_IRDA_DISABLE: Disable the IRDA peripheral
 109:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****        (+) __HAL_IRDA_GET_FLAG : Check whether the specified IRDA flag is set or not
 110:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****        (+) __HAL_IRDA_CLEAR_FLAG : Clear the specified IRDA pending flag
 111:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****        (+) __HAL_IRDA_ENABLE_IT: Enable the specified IRDA interrupt
 112:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****        (+) __HAL_IRDA_DISABLE_IT: Disable the specified IRDA interrupt
 113:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****        (+) __HAL_IRDA_GET_IT_SOURCE: Check whether the specified IRDA interrupt has occurred or not
 114:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 115:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     [..]
 116:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****      (@) You can refer to the IRDA HAL driver header file for more useful macros
 117:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 118:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     ##### Callback registration #####
 119:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     ==================================
 120:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 121:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     [..]
 122:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       The compilation define USE_HAL_IRDA_REGISTER_CALLBACKS when set to 1
 123:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       allows the user to configure dynamically the driver callbacks.
 124:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 125:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     [..]
 126:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       Use Function HAL_IRDA_RegisterCallback() to register a user callback.
 127:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       Function HAL_IRDA_RegisterCallback() allows to register following callbacks:
 128:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****        (+) TxHalfCpltCallback        : Tx Half Complete Callback.
 129:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****        (+) TxCpltCallback            : Tx Complete Callback.
 130:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****        (+) RxHalfCpltCallback        : Rx Half Complete Callback.
 131:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****        (+) RxCpltCallback            : Rx Complete Callback.
 132:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****        (+) ErrorCallback             : Error Callback.
 133:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****        (+) AbortCpltCallback         : Abort Complete Callback.
 134:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****        (+) AbortTransmitCpltCallback : Abort Transmit Complete Callback.
 135:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****        (+) AbortReceiveCpltCallback  : Abort Receive Complete Callback.
 136:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****        (+) MspInitCallback           : IRDA MspInit.
 137:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****        (+) MspDeInitCallback         : IRDA MspDeInit.
 138:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       This function takes as parameters the HAL peripheral handle, the Callback ID
 139:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       and a pointer to the user callback function.
 140:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 141:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     [..]
 142:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       Use function HAL_IRDA_UnRegisterCallback() to reset a callback to the default
 143:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       weak (surcharged) function.
 144:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       HAL_IRDA_UnRegisterCallback() takes as parameters the HAL peripheral handle,
ARM GAS  /tmp/ccN5ASm9.s 			page 4


 145:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       and the Callback ID.
 146:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       This function allows to reset following callbacks:
 147:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****        (+) TxHalfCpltCallback        : Tx Half Complete Callback.
 148:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****        (+) TxCpltCallback            : Tx Complete Callback.
 149:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****        (+) RxHalfCpltCallback        : Rx Half Complete Callback.
 150:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****        (+) RxCpltCallback            : Rx Complete Callback.
 151:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****        (+) ErrorCallback             : Error Callback.
 152:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****        (+) AbortCpltCallback         : Abort Complete Callback.
 153:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****        (+) AbortTransmitCpltCallback : Abort Transmit Complete Callback.
 154:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****        (+) AbortReceiveCpltCallback  : Abort Receive Complete Callback.
 155:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****        (+) MspInitCallback           : IRDA MspInit.
 156:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****        (+) MspDeInitCallback         : IRDA MspDeInit.
 157:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 158:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     [..]
 159:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       By default, after the HAL_IRDA_Init() and when the state is HAL_IRDA_STATE_RESET
 160:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       all callbacks are set to the corresponding weak (surcharged) functions:
 161:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       examples HAL_IRDA_TxCpltCallback(), HAL_IRDA_RxHalfCpltCallback().
 162:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       Exception done for MspInit and MspDeInit functions that are respectively
 163:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       reset to the legacy weak (surcharged) functions in the HAL_IRDA_Init()
 164:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       and HAL_IRDA_DeInit() only when these callbacks are null (not registered beforehand).
 165:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       If not, MspInit or MspDeInit are not null, the HAL_IRDA_Init() and HAL_IRDA_DeInit()
 166:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       keep and use the user MspInit/MspDeInit callbacks (registered beforehand).
 167:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 168:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     [..]
 169:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       Callbacks can be registered/unregistered in HAL_IRDA_STATE_READY state only.
 170:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       Exception done MspInit/MspDeInit that can be registered/unregistered
 171:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       in HAL_IRDA_STATE_READY or HAL_IRDA_STATE_RESET state, thus registered (user)
 172:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       MspInit/DeInit callbacks can be used during the Init/DeInit.
 173:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       In that case first register the MspInit/MspDeInit user callbacks
 174:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       using HAL_IRDA_RegisterCallback() before calling HAL_IRDA_DeInit()
 175:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       or HAL_IRDA_Init() function.
 176:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 177:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     [..]
 178:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       When The compilation define USE_HAL_IRDA_REGISTER_CALLBACKS is set to 0 or
 179:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       not defined, the callback registration feature is not available
 180:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       and weak (surcharged) callbacks are used.
 181:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 182:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   @endverbatim
 183:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****      [..]
 184:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****        (@) Additional remark: If the parity is enabled, then the MSB bit of the data written
 185:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****            in the data register is transmitted but is changed by the parity bit.
 186:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****            Depending on the frame length defined by the M bit (8-bits or 9-bits),
 187:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****            the possible IRDA frame formats are as listed in the following table:
 188:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     +-------------------------------------------------------------+
 189:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     |   M bit |  PCE bit  |            IRDA frame                 |
 190:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     |---------------------|---------------------------------------|
 191:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     |    0    |    0      |    | SB | 8 bit data | 1 STB |        |
 192:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     |---------|-----------|---------------------------------------|
 193:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     |    0    |    1      |    | SB | 7 bit data | PB | 1 STB |   |
 194:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     |---------|-----------|---------------------------------------|
 195:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     |    1    |    0      |    | SB | 9 bit data | 1 STB |        |
 196:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     |---------|-----------|---------------------------------------|
 197:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     |    1    |    1      |    | SB | 8 bit data | PB | 1 STB |   |
 198:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     +-------------------------------------------------------------+
 199:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   ******************************************************************************
 200:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
 201:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
ARM GAS  /tmp/ccN5ASm9.s 			page 5


 202:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /* Includes ------------------------------------------------------------------*/
 203:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #include "stm32f4xx_hal.h"
 204:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 205:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /** @addtogroup STM32F4xx_HAL_Driver
 206:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @{
 207:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
 208:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 209:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /** @defgroup IRDA IRDA
 210:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @brief HAL IRDA module driver
 211:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @{
 212:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
 213:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 214:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #ifdef HAL_IRDA_MODULE_ENABLED
 215:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 216:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /* Private typedef -----------------------------------------------------------*/
 217:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /* Private define ------------------------------------------------------------*/
 218:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /* Private constants ---------------------------------------------------------*/
 219:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /* Private macro -------------------------------------------------------------*/
 220:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /* Private variables ---------------------------------------------------------*/
 221:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /* Private function prototypes -----------------------------------------------*/
 222:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /** @addtogroup IRDA_Private_Functions
 223:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @{
 224:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
 225:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
 226:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** void IRDA_InitCallbacksToDefault(IRDA_HandleTypeDef *hirda);
 227:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACKS */
 228:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** static void IRDA_SetConfig(IRDA_HandleTypeDef *hirda);
 229:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** static HAL_StatusTypeDef IRDA_Transmit_IT(IRDA_HandleTypeDef *hirda);
 230:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** static HAL_StatusTypeDef IRDA_EndTransmit_IT(IRDA_HandleTypeDef *hirda);
 231:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** static HAL_StatusTypeDef IRDA_Receive_IT(IRDA_HandleTypeDef *hirda);
 232:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** static void IRDA_DMATransmitCplt(DMA_HandleTypeDef *hdma);
 233:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** static void IRDA_DMATransmitHalfCplt(DMA_HandleTypeDef *hdma);
 234:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** static void IRDA_DMAReceiveCplt(DMA_HandleTypeDef *hdma);
 235:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** static void IRDA_DMAReceiveHalfCplt(DMA_HandleTypeDef *hdma);
 236:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** static void IRDA_DMAError(DMA_HandleTypeDef *hdma);
 237:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** static void IRDA_DMAAbortOnError(DMA_HandleTypeDef *hdma);
 238:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** static void IRDA_DMATxAbortCallback(DMA_HandleTypeDef *hdma);
 239:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** static void IRDA_DMARxAbortCallback(DMA_HandleTypeDef *hdma);
 240:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** static void IRDA_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma);
 241:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** static void IRDA_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma);
 242:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** static HAL_StatusTypeDef IRDA_WaitOnFlagUntilTimeout(IRDA_HandleTypeDef *hirda, uint32_t Flag, Flag
 243:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** static void IRDA_EndTxTransfer(IRDA_HandleTypeDef *hirda);
 244:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** static void IRDA_EndRxTransfer(IRDA_HandleTypeDef *hirda);
 245:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
 246:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @}
 247:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
 248:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 249:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /* Exported functions --------------------------------------------------------*/
 250:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /** @defgroup IRDA_Exported_Functions IrDA Exported Functions
 251:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @{
 252:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
 253:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 254:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /** @defgroup IRDA_Exported_Functions_Group1 IrDA Initialization and de-initialization functions
 255:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *  @brief    Initialization and Configuration functions
 256:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *
 257:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** @verbatim
 258:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
ARM GAS  /tmp/ccN5ASm9.s 			page 6


 259:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   ==============================================================================
 260:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****             ##### Initialization and Configuration functions #####
 261:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   ==============================================================================
 262:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     [..]
 263:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     This subsection provides a set of functions allowing to initialize the USARTx or the UARTy
 264:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     in asynchronous IrDA mode.
 265:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       (+) For the asynchronous mode only these parameters can be configured:
 266:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         (++) BaudRate
 267:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         (++) WordLength
 268:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         (++) Parity: If the parity is enabled, then the MSB bit of the data written
 269:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****              in the data register is transmitted but is changed by the parity bit.
 270:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****              Depending on the frame length defined by the M bit (8-bits or 9-bits),
 271:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****              please refer to Reference manual for possible IRDA frame formats.
 272:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         (++) Prescaler: A pulse of width less than two and greater than one PSC period(s) may or ma
 273:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****              not be rejected. The receiver set up time should be managed by software. The IrDA phys
 274:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****              specification specifies a minimum of 10 ms delay between transmission and
 275:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****              reception (IrDA is a half duplex protocol).
 276:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         (++) Mode: Receiver/transmitter modes
 277:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         (++) IrDAMode: the IrDA can operate in the Normal mode or in the Low power mode.
 278:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     [..]
 279:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     The HAL_IRDA_Init() API follows IRDA configuration procedures (details for the procedures
 280:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     are available in reference manual).
 281:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 282:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** @endverbatim
 283:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @{
 284:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
 285:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 286:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
 287:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @brief  Initializes the IRDA mode according to the specified
 288:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *         parameters in the IRDA_InitTypeDef and create the associated handle.
 289:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
 290:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
 291:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @retval HAL status
 292:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
 293:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_Init(IRDA_HandleTypeDef *hirda)
 294:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** {
 295:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Check the IRDA handle allocation */
 296:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if (hirda == NULL)
 297:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 298:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     return HAL_ERROR;
 299:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 300:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 301:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Check the IRDA instance parameters */
 302:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   assert_param(IS_IRDA_INSTANCE(hirda->Instance));
 303:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Check the IRDA mode parameter in the IRDA handle */
 304:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   assert_param(IS_IRDA_POWERMODE(hirda->Init.IrDAMode));
 305:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 306:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if (hirda->gState == HAL_IRDA_STATE_RESET)
 307:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 308:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Allocate lock resource and initialize it */
 309:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->Lock = HAL_UNLOCKED;
 310:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 311:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #if USE_HAL_IRDA_REGISTER_CALLBACKS == 1
 312:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     IRDA_InitCallbacksToDefault(hirda);
 313:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 314:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     if (hirda->MspInitCallback == NULL)
 315:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
ARM GAS  /tmp/ccN5ASm9.s 			page 7


 316:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       hirda->MspInitCallback = HAL_IRDA_MspInit;
 317:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 318:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 319:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Init the low level hardware */
 320:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->MspInitCallback(hirda);
 321:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #else
 322:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Init the low level hardware : GPIO, CLOCK */
 323:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     HAL_IRDA_MspInit(hirda);
 324:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACKS */
 325:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 326:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 327:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->gState = HAL_IRDA_STATE_BUSY;
 328:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 329:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Disable the IRDA peripheral */
 330:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   __HAL_IRDA_DISABLE(hirda);
 331:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 332:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Set the IRDA communication parameters */
 333:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   IRDA_SetConfig(hirda);
 334:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 335:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* In IrDA mode, the following bits must be kept cleared:
 336:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   - LINEN, STOP and CLKEN bits in the USART_CR2 register,
 337:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   - SCEN and HDSEL bits in the USART_CR3 register.*/
 338:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR2, (USART_CR2_LINEN | USART_CR2_STOP | USART_CR2_CLKEN));
 339:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL));
 340:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 341:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Enable the IRDA peripheral */
 342:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   __HAL_IRDA_ENABLE(hirda);
 343:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 344:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Set the prescaler */
 345:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   MODIFY_REG(hirda->Instance->GTPR, USART_GTPR_PSC, hirda->Init.Prescaler);
 346:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 347:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Configure the IrDA mode */
 348:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   MODIFY_REG(hirda->Instance->CR3, USART_CR3_IRLP, hirda->Init.IrDAMode);
 349:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 350:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
 351:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   SET_BIT(hirda->Instance->CR3, USART_CR3_IREN);
 352:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 353:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Initialize the IRDA state*/
 354:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 355:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->gState = HAL_IRDA_STATE_READY;
 356:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_READY;
 357:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 358:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   return HAL_OK;
 359:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
 360:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 361:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
 362:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @brief  DeInitializes the IRDA peripheral
 363:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
 364:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
 365:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @retval HAL status
 366:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
 367:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_DeInit(IRDA_HandleTypeDef *hirda)
 368:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** {
 369:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Check the IRDA handle allocation */
 370:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if (hirda == NULL)
 371:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 372:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     return HAL_ERROR;
ARM GAS  /tmp/ccN5ASm9.s 			page 8


 373:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 374:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 375:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Check the parameters */
 376:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   assert_param(IS_IRDA_INSTANCE(hirda->Instance));
 377:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 378:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->gState = HAL_IRDA_STATE_BUSY;
 379:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 380:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Disable the Peripheral */
 381:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   __HAL_IRDA_DISABLE(hirda);
 382:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 383:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* DeInit the low level hardware */
 384:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #if USE_HAL_IRDA_REGISTER_CALLBACKS == 1
 385:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if (hirda->MspDeInitCallback == NULL)
 386:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 387:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->MspDeInitCallback = HAL_IRDA_MspDeInit;
 388:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 389:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* DeInit the low level hardware */
 390:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->MspDeInitCallback(hirda);
 391:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #else
 392:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   HAL_IRDA_MspDeInit(hirda);
 393:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACKS */
 394:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 395:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 396:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 397:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->gState = HAL_IRDA_STATE_RESET;
 398:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_RESET;
 399:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 400:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Release Lock */
 401:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   __HAL_UNLOCK(hirda);
 402:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 403:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   return HAL_OK;
 404:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
 405:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 406:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
 407:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @brief  IRDA MSP Init.
 408:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
 409:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
 410:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @retval None
 411:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
 412:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** __weak void HAL_IRDA_MspInit(IRDA_HandleTypeDef *hirda)
 413:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** {
 414:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
 415:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   UNUSED(hirda);
 416:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 417:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* NOTE: This function should not be modified, when the callback is needed,
 418:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****            the HAL_IRDA_MspInit can be implemented in the user file
 419:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****    */
 420:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
 421:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 422:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
 423:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @brief  IRDA MSP DeInit.
 424:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
 425:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
 426:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @retval None
 427:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
 428:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** __weak void HAL_IRDA_MspDeInit(IRDA_HandleTypeDef *hirda)
 429:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** {
ARM GAS  /tmp/ccN5ASm9.s 			page 9


 430:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
 431:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   UNUSED(hirda);
 432:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 433:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* NOTE: This function should not be modified, when the callback is needed,
 434:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****            the HAL_IRDA_MspDeInit can be implemented in the user file
 435:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****    */
 436:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
 437:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 438:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
 439:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
 440:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @brief  Register a User IRDA Callback
 441:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *         To be used instead of the weak predefined callback
 442:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @note   The HAL_IRDA_RegisterCallback() may be called before HAL_IRDA_Init() in HAL_IRDA_STATE_
 443:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *         to register callbacks for HAL_IRDA_MSPINIT_CB_ID and HAL_IRDA_MSPDEINIT_CB_ID
 444:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda irda handle
 445:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param  CallbackID ID of the callback to be registered
 446:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *         This parameter can be one of the following values:
 447:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *           @arg @ref HAL_IRDA_TX_HALFCOMPLETE_CB_ID Tx Half Complete Callback ID
 448:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *           @arg @ref HAL_IRDA_TX_COMPLETE_CB_ID Tx Complete Callback ID
 449:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *           @arg @ref HAL_IRDA_RX_HALFCOMPLETE_CB_ID Rx Half Complete Callback ID
 450:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *           @arg @ref HAL_IRDA_RX_COMPLETE_CB_ID Rx Complete Callback ID
 451:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *           @arg @ref HAL_IRDA_ERROR_CB_ID Error Callback ID
 452:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *           @arg @ref HAL_IRDA_ABORT_COMPLETE_CB_ID Abort Complete Callback ID
 453:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *           @arg @ref HAL_IRDA_ABORT_TRANSMIT_COMPLETE_CB_ID Abort Transmit Complete Callback ID
 454:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *           @arg @ref HAL_IRDA_ABORT_RECEIVE_COMPLETE_CB_ID Abort Receive Complete Callback ID
 455:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *           @arg @ref HAL_IRDA_MSPINIT_CB_ID MspInit Callback ID
 456:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *           @arg @ref HAL_IRDA_MSPDEINIT_CB_ID MspDeInit Callback ID
 457:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param  pCallback pointer to the Callback function
 458:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @retval HAL status
 459:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
 460:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_RegisterCallback(IRDA_HandleTypeDef *hirda, HAL_IRDA_CallbackIDTypeDef C
 461:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** {
 462:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   HAL_StatusTypeDef status = HAL_OK;
 463:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 464:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if (pCallback == NULL)
 465:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 466:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Update the error code */
 467:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->ErrorCode |= HAL_IRDA_ERROR_INVALID_CALLBACK;
 468:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 469:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     return HAL_ERROR;
 470:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 471:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 472:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if (hirda->gState == HAL_IRDA_STATE_READY)
 473:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 474:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     switch (CallbackID)
 475:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 476:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       case HAL_IRDA_TX_HALFCOMPLETE_CB_ID :
 477:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         hirda->TxHalfCpltCallback = pCallback;
 478:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         break;
 479:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 480:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       case HAL_IRDA_TX_COMPLETE_CB_ID :
 481:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         hirda->TxCpltCallback = pCallback;
 482:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         break;
 483:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 484:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       case HAL_IRDA_RX_HALFCOMPLETE_CB_ID :
 485:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         hirda->RxHalfCpltCallback = pCallback;
 486:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         break;
ARM GAS  /tmp/ccN5ASm9.s 			page 10


 487:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 488:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       case HAL_IRDA_RX_COMPLETE_CB_ID :
 489:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         hirda->RxCpltCallback = pCallback;
 490:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         break;
 491:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 492:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       case HAL_IRDA_ERROR_CB_ID :
 493:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         hirda->ErrorCallback = pCallback;
 494:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         break;
 495:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 496:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       case HAL_IRDA_ABORT_COMPLETE_CB_ID :
 497:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         hirda->AbortCpltCallback = pCallback;
 498:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         break;
 499:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 500:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       case HAL_IRDA_ABORT_TRANSMIT_COMPLETE_CB_ID :
 501:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         hirda->AbortTransmitCpltCallback = pCallback;
 502:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         break;
 503:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 504:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       case HAL_IRDA_ABORT_RECEIVE_COMPLETE_CB_ID :
 505:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         hirda->AbortReceiveCpltCallback = pCallback;
 506:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         break;
 507:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 508:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       case HAL_IRDA_MSPINIT_CB_ID :
 509:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         hirda->MspInitCallback = pCallback;
 510:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         break;
 511:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 512:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       case HAL_IRDA_MSPDEINIT_CB_ID :
 513:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         hirda->MspDeInitCallback = pCallback;
 514:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         break;
 515:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 516:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       default :
 517:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         /* Update the error code */
 518:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         hirda->ErrorCode |= HAL_IRDA_ERROR_INVALID_CALLBACK;
 519:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 520:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         /* Return error status */
 521:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         status =  HAL_ERROR;
 522:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         break;
 523:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 524:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 525:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   else if (hirda->gState == HAL_IRDA_STATE_RESET)
 526:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 527:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     switch (CallbackID)
 528:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 529:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       case HAL_IRDA_MSPINIT_CB_ID :
 530:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         hirda->MspInitCallback = pCallback;
 531:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         break;
 532:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 533:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       case HAL_IRDA_MSPDEINIT_CB_ID :
 534:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         hirda->MspDeInitCallback = pCallback;
 535:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         break;
 536:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 537:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       default :
 538:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         /* Update the error code */
 539:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         hirda->ErrorCode |= HAL_IRDA_ERROR_INVALID_CALLBACK;
 540:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 541:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         /* Return error status */
 542:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         status =  HAL_ERROR;
 543:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         break;
ARM GAS  /tmp/ccN5ASm9.s 			page 11


 544:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 545:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 546:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   else
 547:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 548:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Update the error code */
 549:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->ErrorCode |= HAL_IRDA_ERROR_INVALID_CALLBACK;
 550:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 551:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Return error status */
 552:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     status =  HAL_ERROR;
 553:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 554:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 555:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   return status;
 556:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
 557:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 558:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
 559:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @brief  Unregister an IRDA callback
 560:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *         IRDA callback is redirected to the weak predefined callback
 561:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @note   The HAL_IRDA_UnRegisterCallback() may be called before HAL_IRDA_Init() in HAL_IRDA_STAT
 562:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *         to un-register callbacks for HAL_IRDA_MSPINIT_CB_ID and HAL_IRDA_MSPDEINIT_CB_ID
 563:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda irda handle
 564:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param  CallbackID ID of the callback to be unregistered
 565:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *         This parameter can be one of the following values:
 566:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *           @arg @ref HAL_IRDA_TX_HALFCOMPLETE_CB_ID Tx Half Complete Callback ID
 567:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *           @arg @ref HAL_IRDA_TX_COMPLETE_CB_ID Tx Complete Callback ID
 568:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *           @arg @ref HAL_IRDA_RX_HALFCOMPLETE_CB_ID Rx Half Complete Callback ID
 569:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *           @arg @ref HAL_IRDA_RX_COMPLETE_CB_ID Rx Complete Callback ID
 570:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *           @arg @ref HAL_IRDA_ERROR_CB_ID Error Callback ID
 571:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *           @arg @ref HAL_IRDA_ABORT_COMPLETE_CB_ID Abort Complete Callback ID
 572:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *           @arg @ref HAL_IRDA_ABORT_TRANSMIT_COMPLETE_CB_ID Abort Transmit Complete Callback ID
 573:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *           @arg @ref HAL_IRDA_ABORT_RECEIVE_COMPLETE_CB_ID Abort Receive Complete Callback ID
 574:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *           @arg @ref HAL_IRDA_MSPINIT_CB_ID MspInit Callback ID
 575:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *           @arg @ref HAL_IRDA_MSPDEINIT_CB_ID MspDeInit Callback ID
 576:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @retval HAL status
 577:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
 578:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_UnRegisterCallback(IRDA_HandleTypeDef *hirda, HAL_IRDA_CallbackIDTypeDef
 579:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** {
 580:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   HAL_StatusTypeDef status = HAL_OK;
 581:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 582:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if (HAL_IRDA_STATE_READY == hirda->gState)
 583:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 584:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     switch (CallbackID)
 585:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 586:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       case HAL_IRDA_TX_HALFCOMPLETE_CB_ID :
 587:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         hirda->TxHalfCpltCallback = HAL_IRDA_TxHalfCpltCallback;               /* Legacy weak  TxHa
 588:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         break;
 589:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 590:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       case HAL_IRDA_TX_COMPLETE_CB_ID :
 591:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         hirda->TxCpltCallback = HAL_IRDA_TxCpltCallback;                       /* Legacy weak TxCpl
 592:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         break;
 593:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 594:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       case HAL_IRDA_RX_HALFCOMPLETE_CB_ID :
 595:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         hirda->RxHalfCpltCallback = HAL_IRDA_RxHalfCpltCallback;               /* Legacy weak RxHal
 596:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         break;
 597:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 598:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       case HAL_IRDA_RX_COMPLETE_CB_ID :
 599:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         hirda->RxCpltCallback = HAL_IRDA_RxCpltCallback;                       /* Legacy weak RxCpl
 600:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         break;
ARM GAS  /tmp/ccN5ASm9.s 			page 12


 601:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 602:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       case HAL_IRDA_ERROR_CB_ID :
 603:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         hirda->ErrorCallback = HAL_IRDA_ErrorCallback;                         /* Legacy weak Error
 604:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         break;
 605:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 606:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       case HAL_IRDA_ABORT_COMPLETE_CB_ID :
 607:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         hirda->AbortCpltCallback = HAL_IRDA_AbortCpltCallback;                 /* Legacy weak Abort
 608:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         break;
 609:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 610:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       case HAL_IRDA_ABORT_TRANSMIT_COMPLETE_CB_ID :
 611:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         hirda->AbortTransmitCpltCallback = HAL_IRDA_AbortTransmitCpltCallback; /* Legacy weak Abort
 612:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         break;
 613:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 614:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       case HAL_IRDA_ABORT_RECEIVE_COMPLETE_CB_ID :
 615:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         hirda->AbortReceiveCpltCallback = HAL_IRDA_AbortReceiveCpltCallback;   /* Legacy weak Abort
 616:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         break;
 617:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 618:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       case HAL_IRDA_MSPINIT_CB_ID :
 619:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         hirda->MspInitCallback = HAL_IRDA_MspInit;                             /* Legacy weak MspIn
 620:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         break;
 621:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 622:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       case HAL_IRDA_MSPDEINIT_CB_ID :
 623:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         hirda->MspDeInitCallback = HAL_IRDA_MspDeInit;                         /* Legacy weak MspDe
 624:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         break;
 625:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 626:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       default :
 627:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         /* Update the error code */
 628:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         hirda->ErrorCode |= HAL_IRDA_ERROR_INVALID_CALLBACK;
 629:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 630:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         /* Return error status */
 631:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         status =  HAL_ERROR;
 632:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         break;
 633:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 634:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 635:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   else if (HAL_IRDA_STATE_RESET == hirda->gState)
 636:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 637:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     switch (CallbackID)
 638:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 639:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       case HAL_IRDA_MSPINIT_CB_ID :
 640:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         hirda->MspInitCallback = HAL_IRDA_MspInit;
 641:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         break;
 642:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 643:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       case HAL_IRDA_MSPDEINIT_CB_ID :
 644:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         hirda->MspDeInitCallback = HAL_IRDA_MspDeInit;
 645:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         break;
 646:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 647:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       default :
 648:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         /* Update the error code */
 649:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         hirda->ErrorCode |= HAL_IRDA_ERROR_INVALID_CALLBACK;
 650:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 651:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         /* Return error status */
 652:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         status =  HAL_ERROR;
 653:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         break;
 654:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 655:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 656:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   else
 657:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
ARM GAS  /tmp/ccN5ASm9.s 			page 13


 658:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Update the error code */
 659:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->ErrorCode |= HAL_IRDA_ERROR_INVALID_CALLBACK;
 660:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 661:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Return error status */
 662:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     status =  HAL_ERROR;
 663:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 664:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 665:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   return status;
 666:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
 667:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACKS */
 668:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 669:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
 670:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @}
 671:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
 672:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 673:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /** @defgroup IRDA_Exported_Functions_Group2 IO operation functions
 674:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *  @brief   IRDA Transmit and Receive functions
 675:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *
 676:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** @verbatim
 677:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   ==============================================================================
 678:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****                       ##### IO operation functions #####
 679:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   ==============================================================================
 680:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     [..]
 681:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     This subsection provides a set of functions allowing to manage the IRDA data transfers.
 682:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     IrDA is a half duplex communication protocol. If the Transmitter is busy, any data
 683:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     on the IrDA receive line will be ignored by the IrDA decoder and if the Receiver
 684:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     is busy, data on the TX from the USART to IrDA will not be encoded by IrDA.
 685:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     While receiving data, transmission should be avoided as the data to be transmitted
 686:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     could be corrupted.
 687:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 688:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     (#) There are two modes of transfer:
 689:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****        (++) Blocking mode: The communication is performed in polling mode.
 690:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****             The HAL status of all data processing is returned by the same function
 691:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****             after finishing transfer.
 692:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****        (++) Non-Blocking mode: The communication is performed using Interrupts
 693:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****            or DMA, these API's return the HAL status.
 694:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****            The end of the data processing will be indicated through the
 695:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****            dedicated IRDA IRQ when using Interrupt mode or the DMA IRQ when
 696:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****            using DMA mode.
 697:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****            The HAL_IRDA_TxCpltCallback(), HAL_IRDA_RxCpltCallback() user callbacks
 698:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****            will be executed respectively at the end of the Transmit or Receive process
 699:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****            The HAL_IRDA_ErrorCallback() user callback will be executed when a communication error i
 700:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 701:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     (#) Blocking mode APIs are :
 702:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         (++) HAL_IRDA_Transmit()
 703:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         (++) HAL_IRDA_Receive()
 704:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 705:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     (#) Non Blocking mode APIs with Interrupt are :
 706:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         (++) HAL_IRDA_Transmit_IT()
 707:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         (++) HAL_IRDA_Receive_IT()
 708:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         (++) HAL_IRDA_IRQHandler()
 709:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 710:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     (#) Non Blocking mode functions with DMA are :
 711:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         (++) HAL_IRDA_Transmit_DMA()
 712:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         (++) HAL_IRDA_Receive_DMA()
 713:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         (++) HAL_IRDA_DMAPause()
 714:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         (++) HAL_IRDA_DMAResume()
ARM GAS  /tmp/ccN5ASm9.s 			page 14


 715:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         (++) HAL_IRDA_DMAStop()
 716:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 717:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     (#) A set of Transfer Complete Callbacks are provided in Non Blocking mode:
 718:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         (++) HAL_IRDA_TxHalfCpltCallback()
 719:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         (++) HAL_IRDA_TxCpltCallback()
 720:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         (++) HAL_IRDA_RxHalfCpltCallback()
 721:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         (++) HAL_IRDA_RxCpltCallback()
 722:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         (++) HAL_IRDA_ErrorCallback()
 723:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 724:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     (#) Non-Blocking mode transfers could be aborted using Abort API's :
 725:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         (+) HAL_IRDA_Abort()
 726:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         (+) HAL_IRDA_AbortTransmit()
 727:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         (+) HAL_IRDA_AbortReceive()
 728:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         (+) HAL_IRDA_Abort_IT()
 729:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         (+) HAL_IRDA_AbortTransmit_IT()
 730:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         (+) HAL_IRDA_AbortReceive_IT()
 731:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 732:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     (#) For Abort services based on interrupts (HAL_IRDA_Abortxxx_IT), a set of Abort Complete Call
 733:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         (+) HAL_IRDA_AbortCpltCallback()
 734:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         (+) HAL_IRDA_AbortTransmitCpltCallback()
 735:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         (+) HAL_IRDA_AbortReceiveCpltCallback()
 736:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 737:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     (#) In Non-Blocking mode transfers, possible errors are split into 2 categories.
 738:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         Errors are handled as follows :
 739:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         (+) Error is considered as Recoverable and non blocking : Transfer could go till end, but e
 740:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****             to be evaluated by user : this concerns Frame Error, Parity Error or Noise Error in Int
 741:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****             Received character is then retrieved and stored in Rx buffer, Error code is set to allo
 742:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****             and HAL_IRDA_ErrorCallback() user callback is executed. Transfer is kept ongoing on IRD
 743:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****             If user wants to abort it, Abort services should be called by user.
 744:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         (+) Error is considered as Blocking : Transfer could not be completed properly and is abort
 745:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****             This concerns Overrun Error In Interrupt mode reception and all errors in DMA mode.
 746:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****             Error code is set to allow user to identify error type, and HAL_IRDA_ErrorCallback() us
 747:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 748:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** @endverbatim
 749:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @{
 750:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
 751:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 752:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
 753:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @brief Sends an amount of data in blocking mode.
 754:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @note  When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-M
 755:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *        the sent data is handled as a set of u16. In this case, Size must reflect the number
 756:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *        of u16 available through pData.
 757:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param hirda Pointer to a IRDA_HandleTypeDef structure that contains
 758:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *              the configuration information for the specified IRDA module.
 759:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param pData Pointer to data buffer (u8 or u16 data elements).
 760:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param Size  Amount of data elements (u8 or u16) to be sent.
 761:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param Timeout Specify timeout value.
 762:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @retval HAL status
 763:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
 764:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_Transmit(IRDA_HandleTypeDef *hirda, const uint8_t *pData, uint16_t Size,
 765:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** {
 766:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   const uint16_t *tmp;
 767:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   uint32_t tickstart = 0U;
 768:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 769:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Check that a Tx process is not already ongoing */
 770:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if (hirda->gState == HAL_IRDA_STATE_READY)
 771:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
ARM GAS  /tmp/ccN5ASm9.s 			page 15


 772:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     if ((pData == NULL) || (Size == 0U))
 773:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 774:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       return  HAL_ERROR;
 775:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 776:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 777:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Process Locked */
 778:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     __HAL_LOCK(hirda);
 779:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 780:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 781:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->gState = HAL_IRDA_STATE_BUSY_TX;
 782:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 783:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Init tickstart for timeout management*/
 784:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     tickstart = HAL_GetTick();
 785:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 786:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->TxXferSize = Size;
 787:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->TxXferCount = Size;
 788:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     while (hirda->TxXferCount > 0U)
 789:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 790:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       hirda->TxXferCount--;
 791:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       if (hirda->Init.WordLength == IRDA_WORDLENGTH_9B)
 792:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
 793:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         if (IRDA_WaitOnFlagUntilTimeout(hirda, IRDA_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 794:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         {
 795:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****           return HAL_TIMEOUT;
 796:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         }
 797:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         tmp = (const uint16_t *) pData;
 798:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         hirda->Instance->DR = (*tmp & (uint16_t)0x01FF);
 799:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         if (hirda->Init.Parity == IRDA_PARITY_NONE)
 800:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         {
 801:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****           pData += 2U;
 802:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         }
 803:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         else
 804:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         {
 805:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****           pData += 1U;
 806:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         }
 807:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
 808:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       else
 809:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
 810:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         if (IRDA_WaitOnFlagUntilTimeout(hirda, IRDA_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 811:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         {
 812:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****           return HAL_TIMEOUT;
 813:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         }
 814:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         hirda->Instance->DR = (*pData++ & (uint8_t)0xFF);
 815:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
 816:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 817:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 818:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     if (IRDA_WaitOnFlagUntilTimeout(hirda, IRDA_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 819:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 820:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       return HAL_TIMEOUT;
 821:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 822:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 823:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* At end of Tx process, restore hirda->gState to Ready */
 824:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->gState = HAL_IRDA_STATE_READY;
 825:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 826:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Process Unlocked */
 827:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     __HAL_UNLOCK(hirda);
 828:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
ARM GAS  /tmp/ccN5ASm9.s 			page 16


 829:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     return HAL_OK;
 830:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 831:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   else
 832:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 833:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     return HAL_BUSY;
 834:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 835:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
 836:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 837:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
 838:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @brief Receive an amount of data in blocking mode.
 839:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @note  When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-M
 840:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *        the received data is handled as a set of u16. In this case, Size must reflect the number
 841:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *        of u16 available through pData.
 842:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param hirda Pointer to a IRDA_HandleTypeDef structure that contains
 843:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *              the configuration information for the specified IRDA module.
 844:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param pData Pointer to data buffer (u8 or u16 data elements).
 845:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param Size  Amount of data elements (u8 or u16) to be received.
 846:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param Timeout Specify timeout value
 847:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @retval HAL status
 848:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
 849:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_Receive(IRDA_HandleTypeDef *hirda, uint8_t *pData, uint16_t Size, uint32
 850:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** {
 851:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   uint16_t *tmp;
 852:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   uint32_t tickstart = 0U;
 853:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 854:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Check that a Rx process is not already ongoing */
 855:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if (hirda->RxState == HAL_IRDA_STATE_READY)
 856:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 857:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     if ((pData == NULL) || (Size == 0U))
 858:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 859:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       return  HAL_ERROR;
 860:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 861:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 862:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Process Locked */
 863:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     __HAL_LOCK(hirda);
 864:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 865:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 866:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_BUSY_RX;
 867:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 868:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Init tickstart for timeout management*/
 869:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     tickstart = HAL_GetTick();
 870:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 871:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->RxXferSize = Size;
 872:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->RxXferCount = Size;
 873:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 874:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Check the remain data to be received */
 875:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     while (hirda->RxXferCount > 0U)
 876:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 877:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       hirda->RxXferCount--;
 878:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 879:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       if (hirda->Init.WordLength == IRDA_WORDLENGTH_9B)
 880:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
 881:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         if (IRDA_WaitOnFlagUntilTimeout(hirda, IRDA_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK
 882:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         {
 883:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****           return HAL_TIMEOUT;
 884:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         }
 885:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         tmp = (uint16_t *) pData ;
ARM GAS  /tmp/ccN5ASm9.s 			page 17


 886:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         if (hirda->Init.Parity == IRDA_PARITY_NONE)
 887:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         {
 888:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****           *tmp = (uint16_t)(hirda->Instance->DR & (uint16_t)0x01FF);
 889:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****           pData += 2U;
 890:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         }
 891:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         else
 892:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         {
 893:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****           *tmp = (uint16_t)(hirda->Instance->DR & (uint16_t)0x00FF);
 894:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****           pData += 1U;
 895:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         }
 896:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
 897:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       else
 898:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
 899:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         if (IRDA_WaitOnFlagUntilTimeout(hirda, IRDA_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK
 900:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         {
 901:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****           return HAL_TIMEOUT;
 902:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         }
 903:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         if (hirda->Init.Parity == IRDA_PARITY_NONE)
 904:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         {
 905:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****           *pData++ = (uint8_t)(hirda->Instance->DR & (uint8_t)0x00FF);
 906:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         }
 907:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         else
 908:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         {
 909:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****           *pData++ = (uint8_t)(hirda->Instance->DR & (uint8_t)0x007F);
 910:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         }
 911:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
 912:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 913:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 914:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* At end of Rx process, restore hirda->RxState to Ready */
 915:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_READY;
 916:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 917:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Process Unlocked */
 918:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     __HAL_UNLOCK(hirda);
 919:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 920:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     return HAL_OK;
 921:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 922:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   else
 923:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 924:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     return HAL_BUSY;
 925:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 926:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
 927:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 928:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
 929:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @brief Send an amount of data in non blocking mode.
 930:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @note  When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-M
 931:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *        the sent data is handled as a set of u16. In this case, Size must reflect the number
 932:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *        of u16 available through pData.
 933:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param hirda Pointer to a IRDA_HandleTypeDef structure that contains
 934:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *              the configuration information for the specified IRDA module.
 935:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param pData Pointer to data buffer (u8 or u16 data elements).
 936:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param Size  Amount of data elements (u8 or u16) to be sent.
 937:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @retval HAL status
 938:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
 939:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_Transmit_IT(IRDA_HandleTypeDef *hirda, const uint8_t *pData, uint16_t Si
 940:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** {
 941:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Check that a Tx process is not already ongoing */
 942:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if (hirda->gState == HAL_IRDA_STATE_READY)
ARM GAS  /tmp/ccN5ASm9.s 			page 18


 943:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 944:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     if ((pData == NULL) || (Size == 0U))
 945:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 946:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       return HAL_ERROR;
 947:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 948:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 949:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Process Locked */
 950:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     __HAL_LOCK(hirda);
 951:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 952:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->pTxBuffPtr = pData;
 953:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->TxXferSize = Size;
 954:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->TxXferCount = Size;
 955:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 956:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 957:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->gState = HAL_IRDA_STATE_BUSY_TX;
 958:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 959:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Process Unlocked */
 960:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     __HAL_UNLOCK(hirda);
 961:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 962:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Enable the IRDA Transmit Data Register Empty Interrupt */
 963:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     SET_BIT(hirda->Instance->CR1, USART_CR1_TXEIE);
 964:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 965:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     return HAL_OK;
 966:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 967:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   else
 968:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 969:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     return HAL_BUSY;
 970:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 971:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
 972:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 973:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
 974:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @brief Receive an amount of data in non blocking mode.
 975:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @note  When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-M
 976:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *        the received data is handled as a set of u16. In this case, Size must reflect the number
 977:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *        of u16 available through pData.
 978:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param hirda Pointer to a IRDA_HandleTypeDef structure that contains
 979:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *              the configuration information for the specified IRDA module.
 980:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param pData Pointer to data buffer (u8 or u16 data elements).
 981:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param Size  Amount of data elements (u8 or u16) to be received.
 982:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @retval HAL status
 983:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
 984:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_Receive_IT(IRDA_HandleTypeDef *hirda, uint8_t *pData, uint16_t Size)
 985:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** {
 986:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Check that a Rx process is not already ongoing */
 987:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if (hirda->RxState == HAL_IRDA_STATE_READY)
 988:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 989:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     if ((pData == NULL) || (Size == 0U))
 990:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 991:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       return HAL_ERROR;
 992:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 993:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 994:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Process Locked */
 995:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     __HAL_LOCK(hirda);
 996:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 997:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->pRxBuffPtr = pData;
 998:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->RxXferSize = Size;
 999:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->RxXferCount = Size;
ARM GAS  /tmp/ccN5ASm9.s 			page 19


1000:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1001:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
1002:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_BUSY_RX;
1003:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1004:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Process Unlocked */
1005:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     __HAL_UNLOCK(hirda);
1006:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1007:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     if (hirda->Init.Parity != IRDA_PARITY_NONE)
1008:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
1009:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       /* Enable the IRDA Parity Error and Data Register Not Empty Interrupts */
1010:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       SET_BIT(hirda->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
1011:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
1012:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     else
1013:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
1014:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       /* Enable the IRDA Data Register Not Empty Interrupts */
1015:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****        SET_BIT(hirda->Instance->CR1, USART_CR1_RXNEIE); 
1016:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
1017:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1018:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Enable the IRDA Error Interrupt: (Frame error, Noise error, Overrun error) */
1019:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     SET_BIT(hirda->Instance->CR3, USART_CR3_EIE);
1020:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1021:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     return HAL_OK;
1022:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
1023:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   else
1024:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
1025:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     return HAL_BUSY;
1026:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
1027:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
1028:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1029:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
1030:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @brief Send an amount of data in DMA mode.
1031:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @note  When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-M
1032:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *        the sent data is handled as a set of u16. In this case, Size must reflect the number
1033:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *        of u16 available through pData.
1034:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param hirda Pointer to a IRDA_HandleTypeDef structure that contains
1035:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *              the configuration information for the specified IRDA module.
1036:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param pData Pointer to data buffer (u8 or u16 data elements).
1037:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param Size  Amount of data elements (u8 or u16) to be sent.
1038:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @retval HAL status
1039:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
1040:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_Transmit_DMA(IRDA_HandleTypeDef *hirda, const uint8_t *pData, uint16_t S
1041:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** {
1042:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   const uint32_t *tmp;
1043:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1044:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Check that a Tx process is not already ongoing */
1045:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if (hirda->gState == HAL_IRDA_STATE_READY)
1046:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
1047:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     if ((pData == NULL) || (Size == 0U))
1048:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
1049:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       return HAL_ERROR;
1050:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
1051:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1052:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Process Locked */
1053:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     __HAL_LOCK(hirda);
1054:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1055:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->pTxBuffPtr = pData;
1056:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->TxXferSize = Size;
ARM GAS  /tmp/ccN5ASm9.s 			page 20


1057:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->TxXferCount = Size;
1058:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1059:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
1060:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->gState = HAL_IRDA_STATE_BUSY_TX;
1061:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1062:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Set the IRDA DMA transfer complete callback */
1063:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->hdmatx->XferCpltCallback = IRDA_DMATransmitCplt;
1064:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1065:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Set the IRDA DMA half transfer complete callback */
1066:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->hdmatx->XferHalfCpltCallback = IRDA_DMATransmitHalfCplt;
1067:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1068:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Set the DMA error callback */
1069:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->hdmatx->XferErrorCallback = IRDA_DMAError;
1070:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1071:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Set the DMA abort callback */
1072:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->hdmatx->XferAbortCallback = NULL;
1073:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1074:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Enable the IRDA transmit DMA stream */
1075:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     tmp = (const uint32_t *)&pData;
1076:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     if (HAL_DMA_Start_IT(hirda->hdmatx, *(const uint32_t *)tmp, (uint32_t)&hirda->Instance->DR, Siz
1077:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
1078:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       /* Clear the TC flag in the SR register by writing 0 to it */
1079:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       __HAL_IRDA_CLEAR_FLAG(hirda, IRDA_FLAG_TC);
1080:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1081:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       /* Process Unlocked */
1082:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       __HAL_UNLOCK(hirda);
1083:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1084:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       /* Enable the DMA transfer for transmit request by setting the DMAT bit
1085:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       in the USART CR3 register */
1086:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       SET_BIT(hirda->Instance->CR3, USART_CR3_DMAT);
1087:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1088:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       return HAL_OK;
1089:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
1090:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     else
1091:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
1092:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       /* Set error code to DMA */
1093:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       hirda->ErrorCode = HAL_IRDA_ERROR_DMA;
1094:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1095:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       /* Process Unlocked */
1096:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       __HAL_UNLOCK(hirda);
1097:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1098:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       /* Restore hirda->gState to ready */
1099:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       hirda->gState = HAL_IRDA_STATE_READY;
1100:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1101:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       return HAL_ERROR;
1102:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
1103:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
1104:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   else
1105:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
1106:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     return HAL_BUSY;
1107:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
1108:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
1109:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1110:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
1111:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @brief Receives an amount of data in DMA mode.
1112:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @note  When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-M
1113:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *        the received data is handled as a set of u16. In this case, Size must reflect the number
ARM GAS  /tmp/ccN5ASm9.s 			page 21


1114:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *        of u16 available through pData.
1115:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param hirda Pointer to a IRDA_HandleTypeDef structure that contains
1116:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *              the configuration information for the specified IRDA module.
1117:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param pData Pointer to data buffer (u8 or u16 data elements).
1118:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param Size  Amount of data elements (u8 or u16) to be received.
1119:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @note   When the IRDA parity is enabled (PCE = 1) the data received contain the parity bit.
1120:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @retval HAL status
1121:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
1122:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_Receive_DMA(IRDA_HandleTypeDef *hirda, uint8_t *pData, uint16_t Size)
1123:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** {
1124:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   uint32_t *tmp;
1125:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1126:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Check that a Rx process is not already ongoing */
1127:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if (hirda->RxState == HAL_IRDA_STATE_READY)
1128:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
1129:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     if ((pData == NULL) || (Size == 0U))
1130:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
1131:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       return HAL_ERROR;
1132:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
1133:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1134:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Process Locked */
1135:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     __HAL_LOCK(hirda);
1136:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1137:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->pRxBuffPtr = pData;
1138:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->RxXferSize = Size;
1139:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1140:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
1141:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_BUSY_RX;
1142:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1143:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Set the IRDA DMA transfer complete callback */
1144:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->hdmarx->XferCpltCallback = IRDA_DMAReceiveCplt;
1145:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1146:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Set the IRDA DMA half transfer complete callback */
1147:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->hdmarx->XferHalfCpltCallback = IRDA_DMAReceiveHalfCplt;
1148:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1149:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Set the DMA error callback */
1150:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->hdmarx->XferErrorCallback = IRDA_DMAError;
1151:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1152:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Set the DMA abort callback */
1153:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->hdmarx->XferAbortCallback = NULL;
1154:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1155:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Enable the DMA stream */
1156:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     tmp = (uint32_t *)&pData;
1157:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     if (HAL_DMA_Start_IT(hirda->hdmarx, (uint32_t)&hirda->Instance->DR, *(uint32_t *)tmp, Size) == 
1158:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
1159:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the s
1160:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       __HAL_IRDA_CLEAR_OREFLAG(hirda);
1161:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1162:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       /* Process Unlocked */
1163:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       __HAL_UNLOCK(hirda);
1164:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1165:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       if (hirda->Init.Parity != IRDA_PARITY_NONE)
1166:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
1167:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         /* Enable the IRDA Parity Error Interrupt */
1168:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         SET_BIT(hirda->Instance->CR1, USART_CR1_PEIE);
1169:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
1170:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
ARM GAS  /tmp/ccN5ASm9.s 			page 22


1171:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       /* Enable the IRDA Error Interrupt: (Frame error, Noise error, Overrun error) */
1172:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       SET_BIT(hirda->Instance->CR3, USART_CR3_EIE);
1173:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1174:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       /* Enable the DMA transfer for the receiver request by setting the DMAR bit
1175:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       in the USART CR3 register */
1176:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       SET_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
1177:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1178:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       return HAL_OK;
1179:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
1180:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     else
1181:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
1182:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       /* Set error code to DMA */
1183:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       hirda->ErrorCode = HAL_IRDA_ERROR_DMA;
1184:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1185:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       /* Process Unlocked */
1186:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       __HAL_UNLOCK(hirda);
1187:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1188:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       /* Restore hirda->RxState to ready */
1189:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       hirda->RxState = HAL_IRDA_STATE_READY;
1190:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1191:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       return HAL_ERROR;
1192:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
1193:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
1194:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   else
1195:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
1196:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     return HAL_BUSY;
1197:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
1198:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
1199:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1200:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
1201:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @brief Pauses the DMA Transfer.
1202:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
1203:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
1204:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @retval HAL status
1205:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
1206:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_DMAPause(IRDA_HandleTypeDef *hirda)
1207:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** {
1208:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   uint32_t dmarequest = 0x00U;
1209:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1210:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Process Locked */
1211:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   __HAL_LOCK(hirda);
1212:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1213:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   dmarequest = HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAT);
1214:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if ((hirda->gState == HAL_IRDA_STATE_BUSY_TX) && dmarequest)
1215:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
1216:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Disable the IRDA DMA Tx request */
1217:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAT);
1218:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
1219:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1220:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   dmarequest = HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR);
1221:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if ((hirda->RxState == HAL_IRDA_STATE_BUSY_RX) && dmarequest)
1222:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
1223:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
1224:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR1, USART_CR1_PEIE);
1225:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
1226:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1227:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Disable the IRDA DMA Rx request */
ARM GAS  /tmp/ccN5ASm9.s 			page 23


1228:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
1229:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
1230:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1231:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Process Unlocked */
1232:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   __HAL_UNLOCK(hirda);
1233:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1234:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   return HAL_OK;
1235:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
1236:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1237:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
1238:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @brief Resumes the DMA Transfer.
1239:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
1240:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
1241:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @retval HAL status
1242:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
1243:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_DMAResume(IRDA_HandleTypeDef *hirda)
1244:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** {
1245:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Process Locked */
1246:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   __HAL_LOCK(hirda);
1247:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1248:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if (hirda->gState == HAL_IRDA_STATE_BUSY_TX)
1249:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
1250:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Enable the IRDA DMA Tx request */
1251:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     SET_BIT(hirda->Instance->CR3, USART_CR3_DMAT);
1252:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
1253:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1254:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if (hirda->RxState == HAL_IRDA_STATE_BUSY_RX)
1255:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
1256:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Clear the Overrun flag before resuming the Rx transfer */
1257:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     __HAL_IRDA_CLEAR_OREFLAG(hirda);
1258:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1259:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Re-enable PE and ERR (Frame error, noise error, overrun error) interrupts */
1260:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     if (hirda->Init.Parity != IRDA_PARITY_NONE)
1261:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {    
1262:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       SET_BIT(hirda->Instance->CR1, USART_CR1_PEIE);
1263:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
1264:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     SET_BIT(hirda->Instance->CR3, USART_CR3_EIE);
1265:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1266:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Enable the IRDA DMA Rx request */
1267:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     SET_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
1268:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
1269:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1270:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Process Unlocked */
1271:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   __HAL_UNLOCK(hirda);
1272:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1273:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   return HAL_OK;
1274:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
1275:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1276:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
1277:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @brief Stops the DMA Transfer.
1278:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
1279:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
1280:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @retval HAL status
1281:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
1282:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_DMAStop(IRDA_HandleTypeDef *hirda)
1283:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** {
1284:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   uint32_t dmarequest = 0x00U;
ARM GAS  /tmp/ccN5ASm9.s 			page 24


1285:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* The Lock is not implemented on this API to allow the user application
1286:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****      to call the HAL IRDA API under callbacks HAL_IRDA_TxCpltCallback() / HAL_IRDA_RxCpltCallback()
1287:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****      when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
1288:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****      and the correspond call back is executed HAL_IRDA_TxCpltCallback() / HAL_IRDA_RxCpltCallback()
1289:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
1290:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1291:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Stop IRDA DMA Tx request if ongoing */
1292:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   dmarequest = HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAT);
1293:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if ((hirda->gState == HAL_IRDA_STATE_BUSY_TX) && dmarequest)
1294:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
1295:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAT);
1296:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1297:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Abort the IRDA DMA Tx channel */
1298:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     if (hirda->hdmatx != NULL)
1299:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
1300:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       HAL_DMA_Abort(hirda->hdmatx);
1301:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
1302:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     IRDA_EndTxTransfer(hirda);
1303:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
1304:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1305:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Stop IRDA DMA Rx request if ongoing */
1306:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   dmarequest = HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR);
1307:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if ((hirda->RxState == HAL_IRDA_STATE_BUSY_RX) && dmarequest)
1308:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
1309:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
1310:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1311:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Abort the IRDA DMA Rx channel */
1312:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     if (hirda->hdmarx != NULL)
1313:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
1314:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       HAL_DMA_Abort(hirda->hdmarx);
1315:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
1316:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     IRDA_EndRxTransfer(hirda);
1317:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
1318:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1319:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   return HAL_OK;
1320:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
1321:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1322:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
1323:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @brief  Abort ongoing transfers (blocking mode).
1324:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda IRDA handle.
1325:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1326:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *         This procedure performs following operations :
1327:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *           - Disable PPP Interrupts
1328:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1329:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1330:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *           - Set handle State to READY
1331:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1332:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @retval HAL status
1333:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** */
1334:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_Abort(IRDA_HandleTypeDef *hirda)
1335:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** {
1336:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1337:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_
1338:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
1339:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1340:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Disable the IRDA DMA Tx request if enabled */
1341:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if (HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAT))
ARM GAS  /tmp/ccN5ASm9.s 			page 25


1342:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
1343:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAT);
1344:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1345:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Abort the IRDA DMA Tx channel : use blocking DMA Abort API (no callback) */
1346:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     if (hirda->hdmatx != NULL)
1347:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
1348:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       /* Set the IRDA DMA Abort callback to Null.
1349:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****          No call back execution at end of DMA abort procedure */
1350:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       hirda->hdmatx->XferAbortCallback = NULL;
1351:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1352:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       HAL_DMA_Abort(hirda->hdmatx);
1353:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
1354:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
1355:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1356:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Disable the IRDA DMA Rx request if enabled */
1357:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if (HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR))
1358:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
1359:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
1360:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1361:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Abort the IRDA DMA Rx channel : use blocking DMA Abort API (no callback) */
1362:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     if (hirda->hdmarx != NULL)
1363:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
1364:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       /* Set the IRDA DMA Abort callback to Null.
1365:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****          No call back execution at end of DMA abort procedure */
1366:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       hirda->hdmarx->XferAbortCallback = NULL;
1367:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1368:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       HAL_DMA_Abort(hirda->hdmarx);
1369:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
1370:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
1371:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1372:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Reset Tx and Rx transfer counters */
1373:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->TxXferCount = 0x00U;
1374:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->RxXferCount = 0x00U;
1375:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1376:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Reset ErrorCode */
1377:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
1378:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1379:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Restore hirda->RxState and hirda->gState to Ready */
1380:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_READY;
1381:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->gState = HAL_IRDA_STATE_READY;
1382:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1383:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   return HAL_OK;
1384:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
1385:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1386:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
1387:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @brief  Abort ongoing Transmit transfer (blocking mode).
1388:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda IRDA handle.
1389:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1390:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *         This procedure performs following operations :
1391:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *           - Disable PPP Interrupts
1392:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1393:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1394:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *           - Set handle State to READY
1395:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1396:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @retval HAL status
1397:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** */
1398:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_AbortTransmit(IRDA_HandleTypeDef *hirda)
ARM GAS  /tmp/ccN5ASm9.s 			page 26


1399:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** {
1400:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Disable TXEIE and TCIE interrupts */
1401:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
1402:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1403:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Disable the IRDA DMA Tx request if enabled */
1404:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if (HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAT))
1405:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
1406:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAT);
1407:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1408:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Abort the IRDA DMA Tx channel : use blocking DMA Abort API (no callback) */
1409:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     if (hirda->hdmatx != NULL)
1410:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
1411:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       /* Set the IRDA DMA Abort callback to Null.
1412:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****          No call back execution at end of DMA abort procedure */
1413:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       hirda->hdmatx->XferAbortCallback = NULL;
1414:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1415:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       HAL_DMA_Abort(hirda->hdmatx);
1416:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
1417:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
1418:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1419:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Reset Tx transfer counter */
1420:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->TxXferCount = 0x00U;
1421:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1422:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Restore hirda->gState to Ready */
1423:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->gState = HAL_IRDA_STATE_READY;
1424:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1425:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   return HAL_OK;
1426:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
1427:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1428:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
1429:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @brief  Abort ongoing Receive transfer (blocking mode).
1430:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda IRDA handle.
1431:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1432:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *         This procedure performs following operations :
1433:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *           - Disable PPP Interrupts
1434:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1435:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1436:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *           - Set handle State to READY
1437:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1438:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @retval HAL status
1439:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** */
1440:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_AbortReceive(IRDA_HandleTypeDef *hirda)
1441:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** {
1442:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1443:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
1444:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
1445:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1446:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Disable the IRDA DMA Rx request if enabled */
1447:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if (HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR))
1448:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
1449:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
1450:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1451:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Abort the IRDA DMA Rx channel : use blocking DMA Abort API (no callback) */
1452:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     if (hirda->hdmarx != NULL)
1453:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
1454:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       /* Set the IRDA DMA Abort callback to Null.
1455:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****          No call back execution at end of DMA abort procedure */
ARM GAS  /tmp/ccN5ASm9.s 			page 27


1456:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       hirda->hdmarx->XferAbortCallback = NULL;
1457:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1458:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       HAL_DMA_Abort(hirda->hdmarx);
1459:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
1460:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
1461:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1462:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Reset Rx transfer counter */
1463:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->RxXferCount = 0x00U;
1464:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1465:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Restore hirda->RxState to Ready */
1466:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_READY;
1467:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1468:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   return HAL_OK;
1469:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
1470:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1471:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
1472:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @brief  Abort ongoing transfers (Interrupt mode).
1473:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda IRDA handle.
1474:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1475:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *         This procedure performs following operations :
1476:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *           - Disable PPP Interrupts
1477:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1478:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
1479:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *           - Set handle State to READY
1480:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *           - At abort completion, call user abort complete callback
1481:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
1482:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
1483:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @retval HAL status
1484:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** */
1485:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_Abort_IT(IRDA_HandleTypeDef *hirda)
1486:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** {
1487:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   uint32_t AbortCplt = 0x01U;
1488:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1489:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1490:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_
1491:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
1492:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1493:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* If DMA Tx and/or DMA Rx Handles are associated to IRDA Handle, DMA Abort complete callbacks sh
1494:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****      before any call to DMA Abort functions */
1495:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* DMA Tx Handle is valid */
1496:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if (hirda->hdmatx != NULL)
1497:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
1498:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Set DMA Abort Complete callback if IRDA DMA Tx request if enabled.
1499:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****        Otherwise, set it to NULL */
1500:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     if (HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAT))
1501:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
1502:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       hirda->hdmatx->XferAbortCallback = IRDA_DMATxAbortCallback;
1503:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
1504:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     else
1505:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
1506:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       hirda->hdmatx->XferAbortCallback = NULL;
1507:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
1508:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
1509:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* DMA Rx Handle is valid */
1510:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if (hirda->hdmarx != NULL)
1511:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
1512:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Set DMA Abort Complete callback if IRDA DMA Rx request if enabled.
ARM GAS  /tmp/ccN5ASm9.s 			page 28


1513:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****        Otherwise, set it to NULL */
1514:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     if (HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR))
1515:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
1516:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       hirda->hdmarx->XferAbortCallback = IRDA_DMARxAbortCallback;
1517:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
1518:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     else
1519:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
1520:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       hirda->hdmarx->XferAbortCallback = NULL;
1521:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
1522:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
1523:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1524:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Disable the IRDA DMA Tx request if enabled */
1525:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if (HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAT))
1526:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
1527:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Disable DMA Tx at IRDA level */
1528:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAT);
1529:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1530:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Abort the IRDA DMA Tx channel : use non blocking DMA Abort API (callback) */
1531:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     if (hirda->hdmatx != NULL)
1532:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
1533:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       /* IRDA Tx DMA Abort callback has already been initialised :
1534:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****          will lead to call HAL_IRDA_AbortCpltCallback() at end of DMA abort procedure */
1535:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1536:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       /* Abort DMA TX */
1537:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       if (HAL_DMA_Abort_IT(hirda->hdmatx) != HAL_OK)
1538:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
1539:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         hirda->hdmatx->XferAbortCallback = NULL;
1540:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
1541:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       else
1542:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
1543:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         AbortCplt = 0x00U;
1544:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
1545:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
1546:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
1547:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1548:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Disable the IRDA DMA Rx request if enabled */
1549:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if (HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR))
1550:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
1551:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
1552:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1553:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Abort the IRDA DMA Rx channel : use non blocking DMA Abort API (callback) */
1554:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     if (hirda->hdmarx != NULL)
1555:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
1556:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       /* IRDA Rx DMA Abort callback has already been initialised :
1557:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****          will lead to call HAL_IRDA_AbortCpltCallback() at end of DMA abort procedure */
1558:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1559:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       /* Abort DMA RX */
1560:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       if (HAL_DMA_Abort_IT(hirda->hdmarx) != HAL_OK)
1561:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
1562:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         hirda->hdmarx->XferAbortCallback = NULL;
1563:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         AbortCplt = 0x01U;
1564:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
1565:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       else
1566:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
1567:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         AbortCplt = 0x00U;
1568:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
1569:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
ARM GAS  /tmp/ccN5ASm9.s 			page 29


1570:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
1571:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1572:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* if no DMA abort complete callback execution is required => call user Abort Complete callback *
1573:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if (AbortCplt == 0x01U)
1574:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
1575:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Reset Tx and Rx transfer counters */
1576:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->TxXferCount = 0x00U;
1577:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->RxXferCount = 0x00U;
1578:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1579:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Reset ErrorCode */
1580:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
1581:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1582:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Restore hirda->gState and hirda->RxState to Ready */
1583:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->gState  = HAL_IRDA_STATE_READY;
1584:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_READY;
1585:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1586:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
1587:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
1588:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Call registered Abort complete callback */
1589:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->AbortCpltCallback(hirda);
1590:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #else
1591:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Call legacy weak Abort complete callback */
1592:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     HAL_IRDA_AbortCpltCallback(hirda);
1593:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
1594:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
1595:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1596:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   return HAL_OK;
1597:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
1598:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1599:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
1600:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @brief  Abort ongoing Transmit transfer (Interrupt mode).
1601:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda IRDA handle.
1602:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1603:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *         This procedure performs following operations :
1604:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *           - Disable IRDA Interrupts (Tx)
1605:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1606:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
1607:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *           - Set handle State to READY
1608:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *           - At abort completion, call user abort complete callback
1609:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
1610:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
1611:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @retval HAL status
1612:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** */
1613:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_AbortTransmit_IT(IRDA_HandleTypeDef *hirda)
1614:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** {
1615:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Disable TXEIE and TCIE interrupts */
1616:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
1617:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1618:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Disable the IRDA DMA Tx request if enabled */
1619:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if (HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAT))
1620:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
1621:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAT);
1622:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1623:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Abort the IRDA DMA Tx channel : use non blocking DMA Abort API (callback) */
1624:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     if (hirda->hdmatx != NULL)
1625:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
1626:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       /* Set the IRDA DMA Abort callback :
ARM GAS  /tmp/ccN5ASm9.s 			page 30


1627:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****          will lead to call HAL_IRDA_AbortCpltCallback() at end of DMA abort procedure */
1628:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       hirda->hdmatx->XferAbortCallback = IRDA_DMATxOnlyAbortCallback;
1629:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1630:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       /* Abort DMA TX */
1631:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       if (HAL_DMA_Abort_IT(hirda->hdmatx) != HAL_OK)
1632:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
1633:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         /* Call Directly hirda->hdmatx->XferAbortCallback function in case of error */
1634:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         hirda->hdmatx->XferAbortCallback(hirda->hdmatx);
1635:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
1636:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
1637:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     else
1638:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
1639:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       /* Reset Tx transfer counter */
1640:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       hirda->TxXferCount = 0x00U;
1641:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1642:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       /* Restore hirda->gState to Ready */
1643:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       hirda->gState = HAL_IRDA_STATE_READY;
1644:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1645:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       /* As no DMA to be aborted, call directly user Abort complete callback */
1646:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
1647:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       /* Call registered Abort Transmit Complete Callback */
1648:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       hirda->AbortTransmitCpltCallback(hirda);
1649:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #else
1650:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       /* Call legacy weak Abort Transmit Complete Callback */
1651:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       HAL_IRDA_AbortTransmitCpltCallback(hirda);
1652:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
1653:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
1654:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
1655:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   else
1656:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
1657:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Reset Tx transfer counter */
1658:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->TxXferCount = 0x00U;
1659:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1660:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Restore hirda->gState to Ready */
1661:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->gState = HAL_IRDA_STATE_READY;
1662:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1663:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
1664:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
1665:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Call registered Abort Transmit Complete Callback */
1666:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->AbortTransmitCpltCallback(hirda);
1667:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #else
1668:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Call legacy weak Abort Transmit Complete Callback */
1669:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     HAL_IRDA_AbortTransmitCpltCallback(hirda);
1670:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
1671:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
1672:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1673:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   return HAL_OK;
1674:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
1675:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1676:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
1677:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @brief  Abort ongoing Receive transfer (Interrupt mode).
1678:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda IRDA handle.
1679:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1680:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *         This procedure performs following operations :
1681:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *           - Disable PPP Interrupts
1682:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1683:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
ARM GAS  /tmp/ccN5ASm9.s 			page 31


1684:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *           - Set handle State to READY
1685:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *           - At abort completion, call user abort complete callback
1686:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
1687:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
1688:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @retval HAL status
1689:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** */
1690:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_AbortReceive_IT(IRDA_HandleTypeDef *hirda)
1691:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** {
1692:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1693:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
1694:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
1695:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1696:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Disable the IRDA DMA Rx request if enabled */
1697:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if (HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR))
1698:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
1699:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
1700:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1701:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Abort the IRDA DMA Rx channel : use non blocking DMA Abort API (callback) */
1702:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     if (hirda->hdmarx != NULL)
1703:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
1704:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       /* Set the IRDA DMA Abort callback :
1705:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****          will lead to call HAL_IRDA_AbortCpltCallback() at end of DMA abort procedure */
1706:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       hirda->hdmarx->XferAbortCallback = IRDA_DMARxOnlyAbortCallback;
1707:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1708:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       /* Abort DMA RX */
1709:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       if (HAL_DMA_Abort_IT(hirda->hdmarx) != HAL_OK)
1710:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
1711:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         /* Call Directly hirda->hdmarx->XferAbortCallback function in case of error */
1712:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         hirda->hdmarx->XferAbortCallback(hirda->hdmarx);
1713:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
1714:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
1715:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     else
1716:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
1717:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       /* Reset Rx transfer counter */
1718:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       hirda->RxXferCount = 0x00U;
1719:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1720:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       /* Restore hirda->RxState to Ready */
1721:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       hirda->RxState = HAL_IRDA_STATE_READY;
1722:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1723:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       /* As no DMA to be aborted, call directly user Abort complete callback */
1724:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
1725:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       /* Call registered Abort Receive Complete Callback */
1726:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       hirda->AbortReceiveCpltCallback(hirda);
1727:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #else
1728:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       /* Call legacy weak Abort Receive Complete Callback */
1729:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       HAL_IRDA_AbortReceiveCpltCallback(hirda);
1730:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
1731:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
1732:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
1733:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   else
1734:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
1735:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Reset Rx transfer counter */
1736:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->RxXferCount = 0x00U;
1737:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1738:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Restore hirda->RxState to Ready */
1739:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_READY;
1740:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
ARM GAS  /tmp/ccN5ASm9.s 			page 32


1741:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
1742:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
1743:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Call registered Abort Receive Complete Callback */
1744:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->AbortReceiveCpltCallback(hirda);
1745:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #else
1746:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Call legacy weak Abort Receive Complete Callback */
1747:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     HAL_IRDA_AbortReceiveCpltCallback(hirda);
1748:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
1749:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
1750:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1751:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   return HAL_OK;
1752:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
1753:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1754:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
1755:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @brief  This function handles IRDA interrupt request.
1756:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
1757:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
1758:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @retval None
1759:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
1760:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** void HAL_IRDA_IRQHandler(IRDA_HandleTypeDef *hirda)
1761:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** {
1762:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   uint32_t isrflags   = READ_REG(hirda->Instance->SR);
1763:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   uint32_t cr1its     = READ_REG(hirda->Instance->CR1);
1764:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   uint32_t cr3its     = READ_REG(hirda->Instance->CR3);
1765:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   uint32_t errorflags = 0x00U;
1766:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   uint32_t dmarequest = 0x00U;
1767:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1768:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* If no error occurs */
1769:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
1770:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if (errorflags == RESET)
1771:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
1772:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* IRDA in mode Receiver -----------------------------------------------*/
1773:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
1774:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
1775:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       IRDA_Receive_IT(hirda);
1776:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       return;
1777:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
1778:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
1779:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1780:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* If some errors occur */
1781:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE
1782:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
1783:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* IRDA parity error interrupt occurred -------------------------------*/
1784:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
1785:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
1786:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       hirda->ErrorCode |= HAL_IRDA_ERROR_PE;
1787:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
1788:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1789:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* IRDA noise error interrupt occurred --------------------------------*/
1790:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
1791:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
1792:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       hirda->ErrorCode |= HAL_IRDA_ERROR_NE;
1793:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
1794:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1795:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* IRDA frame error interrupt occurred --------------------------------*/
1796:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
1797:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
ARM GAS  /tmp/ccN5ASm9.s 			page 33


1798:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       hirda->ErrorCode |= HAL_IRDA_ERROR_FE;
1799:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
1800:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1801:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* IRDA Over-Run interrupt occurred -----------------------------------*/
1802:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its
1803:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
1804:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       hirda->ErrorCode |= HAL_IRDA_ERROR_ORE;
1805:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
1806:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Call IRDA Error Call back function if need be -----------------------*/
1807:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     if (hirda->ErrorCode != HAL_IRDA_ERROR_NONE)
1808:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
1809:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       /* IRDA in mode Receiver ---------------------------------------------*/
1810:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
1811:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
1812:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         IRDA_Receive_IT(hirda);
1813:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
1814:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1815:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       /* If Overrun error occurs, or if any error occurs in DMA mode reception,
1816:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****          consider error as blocking */
1817:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       dmarequest = HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR);
1818:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       if (((hirda->ErrorCode & HAL_IRDA_ERROR_ORE) != RESET) || dmarequest)
1819:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
1820:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         /* Blocking error : transfer is aborted
1821:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****            Set the IRDA state ready to be able to start again the process,
1822:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****            Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
1823:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         IRDA_EndRxTransfer(hirda);
1824:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1825:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         /* Disable the IRDA DMA Rx request if enabled */
1826:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         if (HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR))
1827:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         {
1828:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****           CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
1829:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1830:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****           /* Abort the IRDA DMA Rx channel */
1831:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****           if (hirda->hdmarx != NULL)
1832:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****           {
1833:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****             /* Set the IRDA DMA Abort callback :
1834:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****             will lead to call HAL_IRDA_ErrorCallback() at end of DMA abort procedure */
1835:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****             hirda->hdmarx->XferAbortCallback = IRDA_DMAAbortOnError;
1836:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1837:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****             /* Abort DMA RX */
1838:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****             if (HAL_DMA_Abort_IT(hirda->hdmarx) != HAL_OK)
1839:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****             {
1840:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****               /* Call Directly XferAbortCallback function in case of error */
1841:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****               hirda->hdmarx->XferAbortCallback(hirda->hdmarx);
1842:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****             }
1843:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****           }
1844:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****           else
1845:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****           {
1846:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
1847:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****             /* Call registered user error callback */
1848:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****             hirda->ErrorCallback(hirda);
1849:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #else
1850:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****             /* Call legacy weak user error callback */
1851:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****             HAL_IRDA_ErrorCallback(hirda);
1852:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
1853:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****           }
1854:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         }
ARM GAS  /tmp/ccN5ASm9.s 			page 34


1855:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         else
1856:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         {
1857:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
1858:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****           /* Call registered user error callback */
1859:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****           hirda->ErrorCallback(hirda);
1860:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #else
1861:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****           /* Call legacy weak user error callback */
1862:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****           HAL_IRDA_ErrorCallback(hirda);
1863:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
1864:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         }
1865:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
1866:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       else
1867:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
1868:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         /* Non Blocking error : transfer could go on.
1869:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****            Error is notified to user through user error callback */
1870:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
1871:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         /* Call registered user error callback */
1872:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         hirda->ErrorCallback(hirda);
1873:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #else
1874:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         /* Call legacy weak user error callback */
1875:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         HAL_IRDA_ErrorCallback(hirda);
1876:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
1877:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1878:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
1879:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
1880:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
1881:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     return;
1882:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   } /* End if some error occurs */
1883:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1884:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* IRDA in mode Transmitter ------------------------------------------------*/
1885:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
1886:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
1887:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     IRDA_Transmit_IT(hirda);
1888:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     return;
1889:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
1890:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1891:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* IRDA in mode Transmitter end --------------------------------------------*/
1892:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
1893:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
1894:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     IRDA_EndTransmit_IT(hirda);
1895:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     return;
1896:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
1897:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
1898:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1899:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
1900:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @brief  Tx Transfer complete callback.
1901:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
1902:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
1903:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @retval None
1904:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
1905:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** __weak void HAL_IRDA_TxCpltCallback(IRDA_HandleTypeDef *hirda)
1906:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** {
1907:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
1908:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   UNUSED(hirda);
1909:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1910:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1911:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****             the HAL_IRDA_TxCpltCallback can be implemented in the user file.
ARM GAS  /tmp/ccN5ASm9.s 			page 35


1912:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****    */
1913:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
1914:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1915:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
1916:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @brief  Tx Half Transfer completed callback.
1917:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
1918:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *                the configuration information for the specified USART module.
1919:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @retval None
1920:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
1921:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** __weak void HAL_IRDA_TxHalfCpltCallback(IRDA_HandleTypeDef *hirda)
1922:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** {
1923:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
1924:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   UNUSED(hirda);
1925:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1926:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1927:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****             the HAL_IRDA_TxHalfCpltCallback can be implemented in the user file.
1928:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****    */
1929:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
1930:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1931:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
1932:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @brief  Rx Transfer complete callback.
1933:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
1934:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
1935:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @retval None
1936:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
1937:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** __weak void HAL_IRDA_RxCpltCallback(IRDA_HandleTypeDef *hirda)
1938:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** {
1939:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
1940:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   UNUSED(hirda);
1941:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1942:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1943:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****             the HAL_IRDA_RxCpltCallback can be implemented in the user file.
1944:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****    */
1945:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
1946:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1947:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
1948:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @brief  Rx Half Transfer complete callback.
1949:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
1950:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
1951:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @retval None
1952:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
1953:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** __weak void HAL_IRDA_RxHalfCpltCallback(IRDA_HandleTypeDef *hirda)
1954:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** {
1955:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
1956:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   UNUSED(hirda);
1957:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1958:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1959:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****             the HAL_IRDA_RxHalfCpltCallback can be implemented in the user file.
1960:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****    */
1961:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
1962:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1963:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
1964:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @brief  IRDA error callback.
1965:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
1966:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
1967:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @retval None
1968:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
ARM GAS  /tmp/ccN5ASm9.s 			page 36


1969:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** __weak void HAL_IRDA_ErrorCallback(IRDA_HandleTypeDef *hirda)
1970:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** {
1971:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
1972:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   UNUSED(hirda);
1973:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1974:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1975:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****             the HAL_IRDA_ErrorCallback can be implemented in the user file.
1976:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****    */
1977:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
1978:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1979:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
1980:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @brief  IRDA Abort Complete callback.
1981:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda Pointer to a IRDA_HandleTypeDef structure that contains
1982:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
1983:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @retval None
1984:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
1985:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** __weak void HAL_IRDA_AbortCpltCallback(IRDA_HandleTypeDef *hirda)
1986:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** {
1987:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
1988:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   UNUSED(hirda);
1989:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1990:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1991:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****             the HAL_IRDA_AbortCpltCallback can be implemented in the user file.
1992:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****    */
1993:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
1994:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
1995:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
1996:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @brief  IRDA Abort Transmit Complete callback.
1997:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda Pointer to a IRDA_HandleTypeDef structure that contains
1998:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
1999:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @retval None
2000:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
2001:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** __weak void HAL_IRDA_AbortTransmitCpltCallback(IRDA_HandleTypeDef *hirda)
2002:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** {
2003:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
2004:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   UNUSED(hirda);
2005:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2006:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2007:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****             the HAL_IRDA_AbortTransmitCpltCallback can be implemented in the user file.
2008:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****    */
2009:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
2010:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2011:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
2012:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @brief  IRDA Abort Receive Complete callback.
2013:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda Pointer to a IRDA_HandleTypeDef structure that contains
2014:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
2015:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @retval None
2016:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
2017:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** __weak void HAL_IRDA_AbortReceiveCpltCallback(IRDA_HandleTypeDef *hirda)
2018:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** {
2019:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
2020:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   UNUSED(hirda);
2021:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2022:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2023:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****             the HAL_IRDA_AbortReceiveCpltCallback can be implemented in the user file.
2024:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****    */
2025:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
ARM GAS  /tmp/ccN5ASm9.s 			page 37


2026:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2027:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
2028:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @}
2029:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
2030:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2031:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /** @defgroup IRDA_Exported_Functions_Group3 Peripheral State and Errors functions
2032:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *  @brief   IRDA State and Errors functions
2033:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *
2034:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** @verbatim
2035:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   ==============================================================================
2036:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****                   ##### Peripheral State and Errors functions #####
2037:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   ==============================================================================
2038:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   [..]
2039:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     This subsection provides a set of functions allowing to return the State of IrDA
2040:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     communication process and also return Peripheral Errors occurred during communication process
2041:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****      (+) HAL_IRDA_GetState() API can be helpful to check in run-time the state of the IrDA peripher
2042:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****      (+) HAL_IRDA_GetError() check in run-time errors that could be occurred during communication.
2043:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2044:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** @endverbatim
2045:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @{
2046:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
2047:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2048:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
2049:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @brief  Return the IRDA state.
2050:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
2051:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *                the configuration information for the specified IRDA.
2052:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @retval HAL state
2053:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
2054:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** HAL_IRDA_StateTypeDef HAL_IRDA_GetState(const IRDA_HandleTypeDef *hirda)
2055:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** {
2056:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   uint32_t temp1 = 0x00U, temp2 = 0x00U;
2057:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   temp1 = hirda->gState;
2058:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   temp2 = hirda->RxState;
2059:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2060:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   return (HAL_IRDA_StateTypeDef)(temp1 | temp2);
2061:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
2062:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2063:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
2064:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @brief  Return the IRDA error code
2065:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
2066:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *              the configuration information for the specified IRDA.
2067:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @retval IRDA Error Code
2068:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
2069:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** uint32_t HAL_IRDA_GetError(const IRDA_HandleTypeDef *hirda)
2070:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** {
2071:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   return hirda->ErrorCode;
2072:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
2073:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2074:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
2075:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @}
2076:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
2077:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2078:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
2079:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @}
2080:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
2081:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2082:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /** @defgroup IRDA_Private_Functions IRDA Private Functions
ARM GAS  /tmp/ccN5ASm9.s 			page 38


2083:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @{
2084:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
2085:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2086:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
2087:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
2088:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @brief  Initialize the callbacks to their default values.
2089:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda IRDA handle.
2090:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @retval none
2091:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
2092:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** void IRDA_InitCallbacksToDefault(IRDA_HandleTypeDef *hirda)
2093:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** {
2094:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Init the IRDA Callback settings */
2095:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->TxHalfCpltCallback        = HAL_IRDA_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltC
2096:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->TxCpltCallback            = HAL_IRDA_TxCpltCallback;            /* Legacy weak TxCpltCallb
2097:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->RxHalfCpltCallback        = HAL_IRDA_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltC
2098:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->RxCpltCallback            = HAL_IRDA_RxCpltCallback;            /* Legacy weak RxCpltCallb
2099:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->ErrorCallback             = HAL_IRDA_ErrorCallback;             /* Legacy weak ErrorCallba
2100:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->AbortCpltCallback         = HAL_IRDA_AbortCpltCallback;         /* Legacy weak AbortCpltCa
2101:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->AbortTransmitCpltCallback = HAL_IRDA_AbortTransmitCpltCallback; /* Legacy weak AbortTransm
2102:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->AbortReceiveCpltCallback  = HAL_IRDA_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiv
2103:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2104:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
2105:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACKS */
2106:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2107:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
2108:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @brief  DMA IRDA transmit process complete callback.
2109:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
2110:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *               the configuration information for the specified DMA.
2111:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @retval None
2112:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
2113:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** static void IRDA_DMATransmitCplt(DMA_HandleTypeDef *hdma)
2114:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** {
2115:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2116:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* DMA Normal mode */
2117:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
2118:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
2119:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->TxXferCount = 0U;
2120:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2121:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Disable the DMA transfer for transmit request by resetting the DMAT bit
2122:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****        in the IRDA CR3 register */
2123:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAT);
2124:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2125:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Enable the IRDA Transmit Complete Interrupt */
2126:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     SET_BIT(hirda->Instance->CR1, USART_CR1_TCIE);
2127:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
2128:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* DMA Circular mode */
2129:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   else
2130:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
2131:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
2132:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Call registered Tx complete callback */
2133:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->TxCpltCallback(hirda);
2134:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #else
2135:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Call legacy weak Tx complete callback */
2136:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     HAL_IRDA_TxCpltCallback(hirda);
2137:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
2138:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
2139:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
ARM GAS  /tmp/ccN5ASm9.s 			page 39


2140:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2141:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
2142:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @brief DMA IRDA receive process half complete callback
2143:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
2144:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *               the configuration information for the specified DMA.
2145:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @retval None
2146:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
2147:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** static void IRDA_DMATransmitHalfCplt(DMA_HandleTypeDef *hdma)
2148:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** {
2149:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2150:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2151:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
2152:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Call registered Tx Half complete callback */
2153:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->TxHalfCpltCallback(hirda);
2154:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #else
2155:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Call legacy weak Tx complete callback */
2156:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   HAL_IRDA_TxHalfCpltCallback(hirda);
2157:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
2158:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
2159:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2160:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
2161:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @brief  DMA IRDA receive process complete callback.
2162:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
2163:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *               the configuration information for the specified DMA.
2164:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @retval None
2165:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
2166:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** static void IRDA_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
2167:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** {
2168:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2169:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2170:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* DMA Normal mode */
2171:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
2172:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
2173:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->RxXferCount = 0U;
2174:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2175:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
2176:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR1, USART_CR1_PEIE);
2177:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
2178:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2179:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
2180:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****        in the IRDA CR3 register */
2181:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
2182:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2183:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* At end of Rx process, restore hirda->RxState to Ready */
2184:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_READY;
2185:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
2186:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2187:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
2188:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Call registered Rx complete callback */
2189:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->RxCpltCallback(hirda);
2190:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #else
2191:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Call legacy weak Rx complete callback */
2192:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   HAL_IRDA_RxCpltCallback(hirda);
2193:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACKS */
2194:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
2195:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2196:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
ARM GAS  /tmp/ccN5ASm9.s 			page 40


2197:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @brief DMA IRDA receive process half complete callback.
2198:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
2199:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *               the configuration information for the specified DMA.
2200:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @retval None
2201:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
2202:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** static void IRDA_DMAReceiveHalfCplt(DMA_HandleTypeDef *hdma)
2203:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** {
2204:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2205:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2206:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
2207:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /*Call registered Rx Half complete callback*/
2208:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->RxHalfCpltCallback(hirda);
2209:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #else
2210:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Call legacy weak Rx Half complete callback */
2211:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   HAL_IRDA_RxHalfCpltCallback(hirda);
2212:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
2213:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
2214:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2215:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
2216:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @brief  DMA IRDA communication error callback.
2217:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
2218:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *               the configuration information for the specified DMA.
2219:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @retval None
2220:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
2221:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** static void IRDA_DMAError(DMA_HandleTypeDef *hdma)
2222:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** {
2223:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   uint32_t dmarequest = 0x00U;
2224:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2225:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2226:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Stop IRDA DMA Tx request if ongoing */
2227:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   dmarequest = HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAT);
2228:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if ((hirda->gState == HAL_IRDA_STATE_BUSY_TX) && dmarequest)
2229:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
2230:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->TxXferCount = 0U;
2231:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     IRDA_EndTxTransfer(hirda);
2232:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
2233:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2234:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Stop IRDA DMA Rx request if ongoing */
2235:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   dmarequest = HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR);
2236:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if ((hirda->RxState == HAL_IRDA_STATE_BUSY_RX) && dmarequest)
2237:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
2238:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->RxXferCount = 0U;
2239:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     IRDA_EndRxTransfer(hirda);
2240:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
2241:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2242:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->ErrorCode |= HAL_IRDA_ERROR_DMA;
2243:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2244:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
2245:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Call registered user error callback */
2246:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->ErrorCallback(hirda);
2247:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #else
2248:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Call legacy weak user error callback */
2249:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   HAL_IRDA_ErrorCallback(hirda);
2250:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
2251:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
2252:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2253:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
ARM GAS  /tmp/ccN5ASm9.s 			page 41


2254:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @brief  This function handles IRDA Communication Timeout. It waits
2255:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *         until a flag is no longer in the specified status.
2256:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
2257:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *                the configuration information for the specified IRDA.
2258:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param  Flag specifies the IRDA flag to check.
2259:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param  Status The actual Flag status (SET or RESET).
2260:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param  Tickstart Tick start value
2261:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param  Timeout Timeout duration
2262:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @retval HAL status
2263:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
2264:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** static HAL_StatusTypeDef IRDA_WaitOnFlagUntilTimeout(IRDA_HandleTypeDef *hirda, uint32_t Flag, Flag
2265:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** {
2266:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Wait until flag is set */
2267:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   while ((__HAL_IRDA_GET_FLAG(hirda, Flag) ? SET : RESET) == Status)
2268:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
2269:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     /* Check for the Timeout */
2270:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     if (Timeout != HAL_MAX_DELAY)
2271:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
2272:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
2273:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
2274:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for t
2275:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
2276:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
2277:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2278:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         hirda->gState  = HAL_IRDA_STATE_READY;
2279:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         hirda->RxState = HAL_IRDA_STATE_READY;
2280:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2281:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         /* Process Unlocked */
2282:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         __HAL_UNLOCK(hirda);
2283:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2284:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         return HAL_TIMEOUT;
2285:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
2286:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
2287:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
2288:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   return HAL_OK;
2289:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
2290:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2291:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
2292:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @brief  End ongoing Tx transfer on IRDA peripheral (following error detection or Transmit compl
2293:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda IRDA handle.
2294:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @retval None
2295:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
2296:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** static void IRDA_EndTxTransfer(IRDA_HandleTypeDef *hirda)
2297:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** {
  29              		.loc 1 2297 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
2298:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Disable TXEIE and TCIE interrupts */
2299:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
  34              		.loc 1 2299 3 view .LVU1
  35 0000 0268     		ldr	r2, [r0]
  36 0002 D368     		ldr	r3, [r2, #12]
  37 0004 23F0C003 		bic	r3, r3, #192
  38 0008 D360     		str	r3, [r2, #12]
2300:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
ARM GAS  /tmp/ccN5ASm9.s 			page 42


2301:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* At end of Tx process, restore hirda->gState to Ready */
2302:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->gState = HAL_IRDA_STATE_READY;
  39              		.loc 1 2302 3 view .LVU2
  40              		.loc 1 2302 17 is_stmt 0 view .LVU3
  41 000a 2023     		movs	r3, #32
  42 000c 80F83530 		strb	r3, [r0, #53]
2303:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
  43              		.loc 1 2303 1 view .LVU4
  44 0010 7047     		bx	lr
  45              		.cfi_endproc
  46              	.LFE275:
  48              		.section	.text.IRDA_EndRxTransfer,"ax",%progbits
  49              		.align	1
  50              		.syntax unified
  51              		.thumb
  52              		.thumb_func
  53              		.fpu fpv4-sp-d16
  55              	IRDA_EndRxTransfer:
  56              	.LVL1:
  57              	.LFB276:
2304:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2305:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
2306:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @brief  End ongoing Rx transfer on IRDA peripheral (following error detection or Reception comp
2307:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda IRDA handle.
2308:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @retval None
2309:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
2310:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** static void IRDA_EndRxTransfer(IRDA_HandleTypeDef *hirda)
2311:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** {
  58              		.loc 1 2311 1 is_stmt 1 view -0
  59              		.cfi_startproc
  60              		@ args = 0, pretend = 0, frame = 0
  61              		@ frame_needed = 0, uses_anonymous_args = 0
  62              		@ link register save eliminated.
2312:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
2313:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  63              		.loc 1 2313 3 view .LVU6
  64 0000 0268     		ldr	r2, [r0]
  65 0002 D368     		ldr	r3, [r2, #12]
  66 0004 23F49073 		bic	r3, r3, #288
  67 0008 D360     		str	r3, [r2, #12]
2314:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
  68              		.loc 1 2314 3 view .LVU7
  69 000a 0268     		ldr	r2, [r0]
  70 000c 5369     		ldr	r3, [r2, #20]
  71 000e 23F00103 		bic	r3, r3, #1
  72 0012 5361     		str	r3, [r2, #20]
2315:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2316:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* At end of Rx process, restore hirda->RxState to Ready */
2317:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_READY;
  73              		.loc 1 2317 3 view .LVU8
  74              		.loc 1 2317 18 is_stmt 0 view .LVU9
  75 0014 2023     		movs	r3, #32
  76 0016 80F83630 		strb	r3, [r0, #54]
2318:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
  77              		.loc 1 2318 1 view .LVU10
  78 001a 7047     		bx	lr
  79              		.cfi_endproc
ARM GAS  /tmp/ccN5ASm9.s 			page 43


  80              	.LFE276:
  82              		.section	.text.IRDA_Transmit_IT,"ax",%progbits
  83              		.align	1
  84              		.syntax unified
  85              		.thumb
  86              		.thumb_func
  87              		.fpu fpv4-sp-d16
  89              	IRDA_Transmit_IT:
  90              	.LVL2:
  91              	.LFB282:
2319:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2320:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
2321:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @brief  DMA IRDA communication abort callback, when initiated by HAL services on Error
2322:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *         (To be called at end of DMA Abort procedure following error occurrence).
2323:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param  hdma DMA handle.
2324:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @retval None
2325:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
2326:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** static void IRDA_DMAAbortOnError(DMA_HandleTypeDef *hdma)
2327:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** {
2328:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2329:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->RxXferCount = 0x00U;
2330:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->TxXferCount = 0x00U;
2331:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2332:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
2333:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Call registered user error callback */
2334:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->ErrorCallback(hirda);
2335:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #else
2336:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Call legacy weak user error callback */
2337:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   HAL_IRDA_ErrorCallback(hirda);
2338:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
2339:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
2340:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2341:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
2342:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @brief  DMA IRDA Tx communication abort callback, when initiated by user
2343:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *         (To be called at end of DMA Tx Abort procedure following user abort request).
2344:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
2345:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *         Abort still ongoing for Rx DMA Handle.
2346:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param  hdma DMA handle.
2347:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @retval None
2348:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
2349:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** static void IRDA_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
2350:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** {
2351:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2352:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2353:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->hdmatx->XferAbortCallback = NULL;
2354:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2355:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Check if an Abort process is still ongoing */
2356:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if (hirda->hdmarx != NULL)
2357:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
2358:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     if (hirda->hdmarx->XferAbortCallback != NULL)
2359:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
2360:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       return;
2361:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
2362:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
2363:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2364:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callba
2365:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->TxXferCount = 0x00U;
ARM GAS  /tmp/ccN5ASm9.s 			page 44


2366:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->RxXferCount = 0x00U;
2367:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2368:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Reset ErrorCode */
2369:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
2370:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2371:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Restore hirda->gState and hirda->RxState to Ready */
2372:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->gState  = HAL_IRDA_STATE_READY;
2373:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_READY;
2374:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2375:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Call user Abort complete callback */
2376:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
2377:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Call registered Abort complete callback */
2378:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->AbortCpltCallback(hirda);
2379:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #else
2380:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Call legacy weak Abort complete callback */
2381:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   HAL_IRDA_AbortCpltCallback(hirda);
2382:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
2383:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
2384:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2385:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
2386:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @brief  DMA IRDA Rx communication abort callback, when initiated by user
2387:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *         (To be called at end of DMA Rx Abort procedure following user abort request).
2388:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
2389:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *         Abort still ongoing for Tx DMA Handle.
2390:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param  hdma DMA handle.
2391:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @retval None
2392:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
2393:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** static void IRDA_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
2394:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** {
2395:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2396:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2397:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->hdmarx->XferAbortCallback = NULL;
2398:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2399:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Check if an Abort process is still ongoing */
2400:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if (hirda->hdmatx != NULL)
2401:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
2402:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     if (hirda->hdmatx->XferAbortCallback != NULL)
2403:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
2404:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       return;
2405:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
2406:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
2407:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2408:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callba
2409:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->TxXferCount = 0x00U;
2410:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->RxXferCount = 0x00U;
2411:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2412:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Reset ErrorCode */
2413:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
2414:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2415:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Restore hirda->gState and hirda->RxState to Ready */
2416:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->gState  = HAL_IRDA_STATE_READY;
2417:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_READY;
2418:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2419:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Call user Abort complete callback */
2420:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
2421:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Call registered Abort complete callback */
2422:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->AbortCpltCallback(hirda);
ARM GAS  /tmp/ccN5ASm9.s 			page 45


2423:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #else
2424:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Call legacy weak Abort complete callback */
2425:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   HAL_IRDA_AbortCpltCallback(hirda);
2426:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
2427:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
2428:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2429:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
2430:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @brief  DMA IRDA Tx communication abort callback, when initiated by user by a call to
2431:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *         HAL_IRDA_AbortTransmit_IT API (Abort only Tx transfer)
2432:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *         (This callback is executed at end of DMA Tx Abort procedure following user abort reques
2433:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *         and leads to user Tx Abort Complete callback execution).
2434:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param  hdma DMA handle.
2435:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @retval None
2436:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
2437:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** static void IRDA_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
2438:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** {
2439:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2440:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2441:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->TxXferCount = 0x00U;
2442:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2443:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Restore hirda->gState to Ready */
2444:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->gState = HAL_IRDA_STATE_READY;
2445:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2446:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Call user Abort complete callback */
2447:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
2448:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Call registered Abort Transmit Complete Callback */
2449:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->AbortTransmitCpltCallback(hirda);
2450:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #else
2451:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Call legacy weak Abort Transmit Complete Callback */
2452:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   HAL_IRDA_AbortTransmitCpltCallback(hirda);
2453:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
2454:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
2455:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2456:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
2457:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @brief  DMA IRDA Rx communication abort callback, when initiated by user by a call to
2458:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *         HAL_IRDA_AbortReceive_IT API (Abort only Rx transfer)
2459:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *         (This callback is executed at end of DMA Rx Abort procedure following user abort reques
2460:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *         and leads to user Rx Abort Complete callback execution).
2461:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param  hdma DMA handle.
2462:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @retval None
2463:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
2464:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** static void IRDA_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
2465:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** {
2466:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2467:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2468:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->RxXferCount = 0x00U;
2469:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2470:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Restore hirda->RxState to Ready */
2471:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_READY;
2472:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2473:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Call user Abort complete callback */
2474:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
2475:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Call registered Abort Receive Complete Callback */
2476:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->AbortReceiveCpltCallback(hirda);
2477:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #else
2478:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Call legacy weak Abort Receive Complete Callback */
2479:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   HAL_IRDA_AbortReceiveCpltCallback(hirda);
ARM GAS  /tmp/ccN5ASm9.s 			page 46


2480:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
2481:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
2482:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2483:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
2484:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****  * @brief  Send an amount of data in non blocking mode.
2485:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****  * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
2486:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****  *                the configuration information for the specified IRDA module.
2487:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****  * @retval HAL status
2488:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****  */
2489:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** static HAL_StatusTypeDef IRDA_Transmit_IT(IRDA_HandleTypeDef *hirda)
2490:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** {
  92              		.loc 1 2490 1 is_stmt 1 view -0
  93              		.cfi_startproc
  94              		@ args = 0, pretend = 0, frame = 0
  95              		@ frame_needed = 0, uses_anonymous_args = 0
  96              		@ link register save eliminated.
2491:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   const uint16_t *tmp;
  97              		.loc 1 2491 3 view .LVU12
2492:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2493:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Check that a Tx process is ongoing */
2494:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if (hirda->gState == HAL_IRDA_STATE_BUSY_TX)
  98              		.loc 1 2494 3 view .LVU13
  99              		.loc 1 2494 12 is_stmt 0 view .LVU14
 100 0000 90F83530 		ldrb	r3, [r0, #53]	@ zero_extendqisi2
 101 0004 DBB2     		uxtb	r3, r3
 102              		.loc 1 2494 6 view .LVU15
 103 0006 212B     		cmp	r3, #33
 104 0008 01D0     		beq	.L10
2495:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
2496:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     if (hirda->Init.WordLength == IRDA_WORDLENGTH_9B)
2497:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
2498:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       tmp = (const uint16_t *) hirda->pTxBuffPtr;
2499:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       hirda->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
2500:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       if (hirda->Init.Parity == IRDA_PARITY_NONE)
2501:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
2502:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         hirda->pTxBuffPtr += 2U;
2503:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
2504:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       else
2505:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
2506:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         hirda->pTxBuffPtr += 1U;
2507:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
2508:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
2509:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     else
2510:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
2511:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       hirda->Instance->DR = (uint8_t)(*hirda->pTxBuffPtr++ & (uint8_t)0x00FF);
2512:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
2513:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2514:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     if (--hirda->TxXferCount == 0U)
2515:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
2516:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       /* Disable the IRDA Transmit Data Register Empty Interrupt */
2517:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       CLEAR_BIT(hirda->Instance->CR1, USART_CR1_TXEIE);
2518:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2519:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       /* Enable the IRDA Transmit Complete Interrupt */
2520:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       SET_BIT(hirda->Instance->CR1, USART_CR1_TCIE);
2521:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
2522:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2523:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     return HAL_OK;
ARM GAS  /tmp/ccN5ASm9.s 			page 47


2524:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
2525:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   else
2526:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
2527:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     return HAL_BUSY;
 105              		.loc 1 2527 12 view .LVU16
 106 000a 0220     		movs	r0, #2
 107              	.LVL3:
2528:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
2529:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
 108              		.loc 1 2529 1 view .LVU17
 109 000c 7047     		bx	lr
 110              	.LVL4:
 111              	.L10:
2496:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 112              		.loc 1 2496 5 is_stmt 1 view .LVU18
2496:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 113              		.loc 1 2496 20 is_stmt 0 view .LVU19
 114 000e 8368     		ldr	r3, [r0, #8]
2496:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 115              		.loc 1 2496 8 view .LVU20
 116 0010 B3F5805F 		cmp	r3, #4096
 117 0014 17D0     		beq	.L11
2511:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 118              		.loc 1 2511 7 is_stmt 1 view .LVU21
2511:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 119              		.loc 1 2511 45 is_stmt 0 view .LVU22
 120 0016 C369     		ldr	r3, [r0, #28]
2511:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 121              		.loc 1 2511 57 view .LVU23
 122 0018 5A1C     		adds	r2, r3, #1
 123 001a C261     		str	r2, [r0, #28]
2511:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 124              		.loc 1 2511 39 view .LVU24
 125 001c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
2511:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 126              		.loc 1 2511 12 view .LVU25
 127 001e 0368     		ldr	r3, [r0]
2511:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 128              		.loc 1 2511 27 view .LVU26
 129 0020 5A60     		str	r2, [r3, #4]
 130              	.L7:
2514:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 131              		.loc 1 2514 5 is_stmt 1 view .LVU27
2514:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 132              		.loc 1 2514 16 is_stmt 0 view .LVU28
 133 0022 438C     		ldrh	r3, [r0, #34]
 134 0024 9BB2     		uxth	r3, r3
2514:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 135              		.loc 1 2514 9 view .LVU29
 136 0026 013B     		subs	r3, r3, #1
 137 0028 9BB2     		uxth	r3, r3
2514:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 138              		.loc 1 2514 8 view .LVU30
 139 002a 4384     		strh	r3, [r0, #34]	@ movhi
 140 002c 4BB9     		cbnz	r3, .L8
2517:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 141              		.loc 1 2517 7 is_stmt 1 view .LVU31
ARM GAS  /tmp/ccN5ASm9.s 			page 48


 142 002e 0268     		ldr	r2, [r0]
 143 0030 D368     		ldr	r3, [r2, #12]
 144 0032 23F08003 		bic	r3, r3, #128
 145 0036 D360     		str	r3, [r2, #12]
2520:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 146              		.loc 1 2520 7 view .LVU32
 147 0038 0268     		ldr	r2, [r0]
 148 003a D368     		ldr	r3, [r2, #12]
 149 003c 43F04003 		orr	r3, r3, #64
 150 0040 D360     		str	r3, [r2, #12]
 151              	.L8:
2523:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 152              		.loc 1 2523 5 view .LVU33
2523:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 153              		.loc 1 2523 12 is_stmt 0 view .LVU34
 154 0042 0020     		movs	r0, #0
 155              	.LVL5:
2523:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 156              		.loc 1 2523 12 view .LVU35
 157 0044 7047     		bx	lr
 158              	.LVL6:
 159              	.L11:
2498:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       hirda->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 160              		.loc 1 2498 7 is_stmt 1 view .LVU36
2498:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       hirda->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 161              		.loc 1 2498 11 is_stmt 0 view .LVU37
 162 0046 C369     		ldr	r3, [r0, #28]
 163              	.LVL7:
2499:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       if (hirda->Init.Parity == IRDA_PARITY_NONE)
 164              		.loc 1 2499 7 is_stmt 1 view .LVU38
2499:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       if (hirda->Init.Parity == IRDA_PARITY_NONE)
 165              		.loc 1 2499 40 is_stmt 0 view .LVU39
 166 0048 1B88     		ldrh	r3, [r3]
 167              	.LVL8:
2499:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       if (hirda->Init.Parity == IRDA_PARITY_NONE)
 168              		.loc 1 2499 12 view .LVU40
 169 004a 0268     		ldr	r2, [r0]
2499:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       if (hirda->Init.Parity == IRDA_PARITY_NONE)
 170              		.loc 1 2499 29 view .LVU41
 171 004c C3F30803 		ubfx	r3, r3, #0, #9
2499:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       if (hirda->Init.Parity == IRDA_PARITY_NONE)
 172              		.loc 1 2499 27 view .LVU42
 173 0050 5360     		str	r3, [r2, #4]
 174              	.LVL9:
2500:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
 175              		.loc 1 2500 7 is_stmt 1 view .LVU43
2500:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
 176              		.loc 1 2500 22 is_stmt 0 view .LVU44
 177 0052 C368     		ldr	r3, [r0, #12]
2500:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
 178              		.loc 1 2500 10 view .LVU45
 179 0054 1BB9     		cbnz	r3, .L6
2502:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
 180              		.loc 1 2502 9 is_stmt 1 view .LVU46
2502:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
 181              		.loc 1 2502 27 is_stmt 0 view .LVU47
 182 0056 C369     		ldr	r3, [r0, #28]
ARM GAS  /tmp/ccN5ASm9.s 			page 49


 183 0058 0233     		adds	r3, r3, #2
 184 005a C361     		str	r3, [r0, #28]
 185 005c E1E7     		b	.L7
 186              	.L6:
2506:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
 187              		.loc 1 2506 9 is_stmt 1 view .LVU48
2506:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
 188              		.loc 1 2506 27 is_stmt 0 view .LVU49
 189 005e C369     		ldr	r3, [r0, #28]
 190 0060 0133     		adds	r3, r3, #1
 191 0062 C361     		str	r3, [r0, #28]
 192 0064 DDE7     		b	.L7
 193              		.cfi_endproc
 194              	.LFE282:
 196              		.global	__aeabi_uldivmod
 197              		.section	.text.IRDA_SetConfig,"ax",%progbits
 198              		.align	1
 199              		.syntax unified
 200              		.thumb
 201              		.thumb_func
 202              		.fpu fpv4-sp-d16
 204              	IRDA_SetConfig:
 205              	.LVL10:
 206              	.LFB285:
2530:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2531:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
2532:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @brief  Wraps up transmission in non blocking mode.
2533:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
2534:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
2535:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @retval HAL status
2536:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
2537:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** static HAL_StatusTypeDef IRDA_EndTransmit_IT(IRDA_HandleTypeDef *hirda)
2538:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** {
2539:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Disable the IRDA Transmit Complete Interrupt */
2540:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR1, USART_CR1_TCIE);
2541:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2542:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Disable the IRDA Error Interrupt: (Frame error, noise error, overrun error) */
2543:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
2544:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2545:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Tx process is ended, restore hirda->gState to Ready */
2546:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->gState = HAL_IRDA_STATE_READY;
2547:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2548:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
2549:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Call registered Tx complete callback */
2550:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->TxCpltCallback(hirda);
2551:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #else
2552:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Call legacy weak Tx complete callback */
2553:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   HAL_IRDA_TxCpltCallback(hirda);
2554:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
2555:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2556:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   return HAL_OK;
2557:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
2558:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2559:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
2560:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @brief  Receives an amount of data in non blocking mode.
2561:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
2562:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
ARM GAS  /tmp/ccN5ASm9.s 			page 50


2563:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @retval HAL status
2564:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
2565:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** static HAL_StatusTypeDef IRDA_Receive_IT(IRDA_HandleTypeDef *hirda)
2566:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** {
2567:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   uint16_t *tmp;
2568:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   uint16_t  uhdata;
2569:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2570:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Check that a Rx process is ongoing */
2571:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if (hirda->RxState == HAL_IRDA_STATE_BUSY_RX)
2572:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
2573:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     uhdata = (uint16_t) READ_REG(hirda->Instance->DR);
2574:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     if (hirda->Init.WordLength == IRDA_WORDLENGTH_9B)
2575:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
2576:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       tmp = (uint16_t *) hirda->pRxBuffPtr;
2577:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       if (hirda->Init.Parity == IRDA_PARITY_NONE)
2578:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
2579:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         *tmp = (uint16_t)(uhdata & (uint16_t)0x01FF);
2580:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         hirda->pRxBuffPtr += 2U;
2581:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
2582:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       else
2583:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
2584:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         *tmp = (uint16_t)(uhdata & (uint16_t)0x00FF);
2585:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         hirda->pRxBuffPtr += 1U;
2586:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
2587:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
2588:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     else
2589:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
2590:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       if (hirda->Init.Parity == IRDA_PARITY_NONE)
2591:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
2592:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         *hirda->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)0x00FF);
2593:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
2594:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       else
2595:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
2596:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         *hirda->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)0x007F);
2597:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
2598:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
2599:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2600:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     if (--hirda->RxXferCount == 0U)
2601:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
2602:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       /* Disable the IRDA Data Register not empty Interrupt */
2603:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       CLEAR_BIT(hirda->Instance->CR1, USART_CR1_RXNEIE);
2604:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2605:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       /* Disable the IRDA Parity Error Interrupt */
2606:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       CLEAR_BIT(hirda->Instance->CR1, USART_CR1_PEIE);
2607:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2608:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       /* Disable the IRDA Error Interrupt: (Frame error, noise error, overrun error) */
2609:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
2610:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2611:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       /* Rx process is completed, restore hirda->RxState to Ready */
2612:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       hirda->RxState = HAL_IRDA_STATE_READY;
2613:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2614:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
2615:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       /* Call registered Rx complete callback */
2616:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       hirda->RxCpltCallback(hirda);
2617:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #else
2618:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       /* Call legacy weak Rx complete callback */
2619:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       HAL_IRDA_RxCpltCallback(hirda);
ARM GAS  /tmp/ccN5ASm9.s 			page 51


2620:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACKS */
2621:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2622:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       return HAL_OK;
2623:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
2624:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     return HAL_OK;
2625:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
2626:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   else
2627:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
2628:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     return HAL_BUSY;
2629:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
2630:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
2631:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2632:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** /**
2633:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @brief  Configures the IRDA peripheral.
2634:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda  Pointer to a IRDA_HandleTypeDef structure that contains
2635:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
2636:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   * @retval None
2637:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   */
2638:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** static void IRDA_SetConfig(IRDA_HandleTypeDef *hirda)
2639:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** {
 207              		.loc 1 2639 1 is_stmt 1 view -0
 208              		.cfi_startproc
 209              		@ args = 0, pretend = 0, frame = 0
 210              		@ frame_needed = 0, uses_anonymous_args = 0
 211              		.loc 1 2639 1 is_stmt 0 view .LVU51
 212 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 213              	.LCFI0:
 214              		.cfi_def_cfa_offset 24
 215              		.cfi_offset 3, -24
 216              		.cfi_offset 4, -20
 217              		.cfi_offset 5, -16
 218              		.cfi_offset 6, -12
 219              		.cfi_offset 7, -8
 220              		.cfi_offset 14, -4
 221 0002 0446     		mov	r4, r0
2640:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   uint32_t pclk;
 222              		.loc 1 2640 3 is_stmt 1 view .LVU52
2641:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2642:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Check the parameters */
2643:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   assert_param(IS_IRDA_INSTANCE(hirda->Instance));
 223              		.loc 1 2643 3 view .LVU53
2644:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   assert_param(IS_IRDA_BAUDRATE(hirda->Init.BaudRate));
 224              		.loc 1 2644 3 view .LVU54
2645:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   assert_param(IS_IRDA_WORD_LENGTH(hirda->Init.WordLength));
 225              		.loc 1 2645 3 view .LVU55
2646:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   assert_param(IS_IRDA_PARITY(hirda->Init.Parity));
 226              		.loc 1 2646 3 view .LVU56
2647:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   assert_param(IS_IRDA_MODE(hirda->Init.Mode));
 227              		.loc 1 2647 3 view .LVU57
2648:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   assert_param(IS_IRDA_POWERMODE(hirda->Init.IrDAMode));
 228              		.loc 1 2648 3 view .LVU58
2649:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2650:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /*-------------------------- USART CR2 Configuration ------------------------*/
2651:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Clear STOP[13:12] bits */
2652:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR2, USART_CR2_STOP);
 229              		.loc 1 2652 3 view .LVU59
 230 0004 0268     		ldr	r2, [r0]
ARM GAS  /tmp/ccN5ASm9.s 			page 52


 231 0006 1369     		ldr	r3, [r2, #16]
 232 0008 23F44053 		bic	r3, r3, #12288
 233 000c 1361     		str	r3, [r2, #16]
2653:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2654:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
2655:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Clear M, PCE, PS, TE and RE bits */
2656:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USAR
 234              		.loc 1 2656 3 view .LVU60
 235 000e 0268     		ldr	r2, [r0]
 236 0010 D368     		ldr	r3, [r2, #12]
 237 0012 23F4B053 		bic	r3, r3, #5632
 238 0016 23F00C03 		bic	r3, r3, #12
 239 001a D360     		str	r3, [r2, #12]
2657:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2658:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Configure the USART Word Length, Parity and mode:
2659:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****      Set the M bits according to hirda->Init.WordLength value
2660:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****      Set PCE and PS bits according to hirda->Init.Parity value
2661:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****      Set TE and RE bits according to hirda->Init.Mode value */
2662:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Write to USART CR1 */
2663:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   SET_BIT(hirda->Instance->CR1, (hirda->Init.WordLength | hirda->Init.Parity | hirda->Init.Mode));
 240              		.loc 1 2663 3 view .LVU61
 241 001c 0168     		ldr	r1, [r0]
 242 001e CA68     		ldr	r2, [r1, #12]
 243 0020 8368     		ldr	r3, [r0, #8]
 244 0022 C068     		ldr	r0, [r0, #12]
 245              	.LVL11:
 246              		.loc 1 2663 3 is_stmt 0 view .LVU62
 247 0024 0343     		orrs	r3, r3, r0
 248 0026 2069     		ldr	r0, [r4, #16]
 249 0028 0343     		orrs	r3, r3, r0
 250 002a 1343     		orrs	r3, r3, r2
 251 002c CB60     		str	r3, [r1, #12]
2664:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2665:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /*-------------------------- USART CR3 Configuration -----------------------*/
2666:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Clear CTSE and RTSE bits */
2667:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 252              		.loc 1 2667 3 is_stmt 1 view .LVU63
 253 002e 2268     		ldr	r2, [r4]
 254 0030 5369     		ldr	r3, [r2, #20]
 255 0032 23F44073 		bic	r3, r3, #768
 256 0036 5361     		str	r3, [r2, #20]
2668:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
2669:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /*-------------------------- USART BRR Configuration -----------------------*/
2670:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #if defined(USART6) && defined(UART9) && defined(UART10)
2671:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****    if ((hirda->Instance == USART1) || (hirda->Instance == USART6) || (hirda->Instance == UART9) || 
2672:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****    {
2673:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     pclk = HAL_RCC_GetPCLK2Freq();
2674:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     SET_BIT(hirda->Instance->BRR, IRDA_BRR(pclk, hirda->Init.BaudRate));
2675:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****    }
2676:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #elif defined(USART6)
2677:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if((hirda->Instance == USART1) || (hirda->Instance == USART6))
 257              		.loc 1 2677 3 view .LVU64
 258              		.loc 1 2677 12 is_stmt 0 view .LVU65
 259 0038 2368     		ldr	r3, [r4]
 260              		.loc 1 2677 5 view .LVU66
 261 003a 334A     		ldr	r2, .L17
 262 003c 9342     		cmp	r3, r2
ARM GAS  /tmp/ccN5ASm9.s 			page 53


 263 003e 33D0     		beq	.L13
 264              		.loc 1 2677 34 discriminator 1 view .LVU67
 265 0040 02F58062 		add	r2, r2, #1024
 266 0044 9342     		cmp	r3, r2
 267 0046 2FD0     		beq	.L13
2678:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
2679:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     pclk = HAL_RCC_GetPCLK2Freq();
2680:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     SET_BIT(hirda->Instance->BRR, IRDA_BRR(pclk, hirda->Init.BaudRate));
2681:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
2682:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #else
2683:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if(hirda->Instance == USART1)
2684:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
2685:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     pclk = HAL_RCC_GetPCLK2Freq();
2686:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     SET_BIT(hirda->Instance->BRR, IRDA_BRR(pclk, hirda->Init.BaudRate));
2687:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
2688:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #endif /* USART6 */
2689:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   else
2690:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
2691:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     pclk = HAL_RCC_GetPCLK1Freq();
 268              		.loc 1 2691 5 is_stmt 1 view .LVU68
 269              		.loc 1 2691 12 is_stmt 0 view .LVU69
 270 0048 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 271              	.LVL12:
2692:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     SET_BIT(hirda->Instance->BRR, IRDA_BRR(pclk, hirda->Init.BaudRate));
 272              		.loc 1 2692 5 is_stmt 1 view .LVU70
 273 004c 2668     		ldr	r6, [r4]
 274 004e B568     		ldr	r5, [r6, #8]
 275 0050 4FF0000C 		mov	ip, #0
 276 0054 0718     		adds	r7, r0, r0
 277 0056 4CEB0C01 		adc	r1, ip, ip
 278 005a 3F18     		adds	r7, r7, r0
 279 005c 41EB0C01 		adc	r1, r1, ip
 280 0060 CB00     		lsls	r3, r1, #3
 281 0062 43EA5773 		orr	r3, r3, r7, lsr #29
 282 0066 FA00     		lsls	r2, r7, #3
 283 0068 1746     		mov	r7, r2
 284 006a 1946     		mov	r1, r3
 285 006c 6368     		ldr	r3, [r4, #4]
 286 006e 9A00     		lsls	r2, r3, #2
 287 0070 9B0F     		lsrs	r3, r3, #30
 288 0072 3818     		adds	r0, r7, r0
 289              	.LVL13:
 290              		.loc 1 2692 5 is_stmt 0 view .LVU71
 291 0074 41EB0C01 		adc	r1, r1, ip
 292 0078 FFF7FEFF 		bl	__aeabi_uldivmod
 293              	.LVL14:
 294 007c 234C     		ldr	r4, .L17+4
 295              	.LVL15:
 296              		.loc 1 2692 5 view .LVU72
 297 007e A4FB0032 		umull	r3, r2, r4, r0
 298 0082 5109     		lsrs	r1, r2, #5
 299 0084 6423     		movs	r3, #100
 300 0086 03FB1103 		mls	r3, r3, r1, r0
 301 008a 1B01     		lsls	r3, r3, #4
 302 008c 3233     		adds	r3, r3, #50
 303 008e A4FB0323 		umull	r2, r3, r4, r3
 304 0092 5B09     		lsrs	r3, r3, #5
ARM GAS  /tmp/ccN5ASm9.s 			page 54


 305 0094 03F0F002 		and	r2, r3, #240
 306 0098 02EB0112 		add	r2, r2, r1, lsl #4
 307 009c 03F00F03 		and	r3, r3, #15
 308 00a0 1344     		add	r3, r3, r2
 309 00a2 2B43     		orrs	r3, r3, r5
 310 00a4 B360     		str	r3, [r6, #8]
2693:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
2694:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
 311              		.loc 1 2694 1 view .LVU73
 312 00a6 2EE0     		b	.L12
 313              	.LVL16:
 314              	.L13:
2679:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     SET_BIT(hirda->Instance->BRR, IRDA_BRR(pclk, hirda->Init.BaudRate));
 315              		.loc 1 2679 5 is_stmt 1 view .LVU74
2679:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     SET_BIT(hirda->Instance->BRR, IRDA_BRR(pclk, hirda->Init.BaudRate));
 316              		.loc 1 2679 12 is_stmt 0 view .LVU75
 317 00a8 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 318              	.LVL17:
2680:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 319              		.loc 1 2680 5 is_stmt 1 view .LVU76
 320 00ac 2668     		ldr	r6, [r4]
 321 00ae B568     		ldr	r5, [r6, #8]
 322 00b0 4FF0000C 		mov	ip, #0
 323 00b4 0718     		adds	r7, r0, r0
 324 00b6 4CEB0C01 		adc	r1, ip, ip
 325 00ba 3F18     		adds	r7, r7, r0
 326 00bc 41EB0C01 		adc	r1, r1, ip
 327 00c0 CB00     		lsls	r3, r1, #3
 328 00c2 43EA5773 		orr	r3, r3, r7, lsr #29
 329 00c6 FA00     		lsls	r2, r7, #3
 330 00c8 1746     		mov	r7, r2
 331 00ca 1946     		mov	r1, r3
 332 00cc 6368     		ldr	r3, [r4, #4]
 333 00ce 9A00     		lsls	r2, r3, #2
 334 00d0 9B0F     		lsrs	r3, r3, #30
 335 00d2 3818     		adds	r0, r7, r0
 336              	.LVL18:
2680:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 337              		.loc 1 2680 5 is_stmt 0 view .LVU77
 338 00d4 41EB0C01 		adc	r1, r1, ip
 339 00d8 FFF7FEFF 		bl	__aeabi_uldivmod
 340              	.LVL19:
 341 00dc 0B4C     		ldr	r4, .L17+4
 342              	.LVL20:
2680:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 343              		.loc 1 2680 5 view .LVU78
 344 00de A4FB0032 		umull	r3, r2, r4, r0
 345 00e2 5109     		lsrs	r1, r2, #5
 346 00e4 6423     		movs	r3, #100
 347 00e6 03FB1103 		mls	r3, r3, r1, r0
 348 00ea 1B01     		lsls	r3, r3, #4
 349 00ec 3233     		adds	r3, r3, #50
 350 00ee A4FB0323 		umull	r2, r3, r4, r3
 351 00f2 5B09     		lsrs	r3, r3, #5
 352 00f4 03F0F002 		and	r2, r3, #240
 353 00f8 02EB0112 		add	r2, r2, r1, lsl #4
 354 00fc 03F00F03 		and	r3, r3, #15
ARM GAS  /tmp/ccN5ASm9.s 			page 55


 355 0100 1344     		add	r3, r3, r2
 356 0102 2B43     		orrs	r3, r3, r5
 357 0104 B360     		str	r3, [r6, #8]
 358              	.L12:
 359              		.loc 1 2694 1 view .LVU79
 360 0106 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 361              	.L18:
 362              		.align	2
 363              	.L17:
 364 0108 00100140 		.word	1073811456
 365 010c 1F85EB51 		.word	1374389535
 366              		.cfi_endproc
 367              	.LFE285:
 369              		.section	.text.IRDA_WaitOnFlagUntilTimeout,"ax",%progbits
 370              		.align	1
 371              		.syntax unified
 372              		.thumb
 373              		.thumb_func
 374              		.fpu fpv4-sp-d16
 376              	IRDA_WaitOnFlagUntilTimeout:
 377              	.LVL21:
 378              	.LFB274:
2265:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Wait until flag is set */
 379              		.loc 1 2265 1 is_stmt 1 view -0
 380              		.cfi_startproc
 381              		@ args = 4, pretend = 0, frame = 0
 382              		@ frame_needed = 0, uses_anonymous_args = 0
2265:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Wait until flag is set */
 383              		.loc 1 2265 1 is_stmt 0 view .LVU81
 384 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 385              	.LCFI1:
 386              		.cfi_def_cfa_offset 32
 387              		.cfi_offset 3, -32
 388              		.cfi_offset 4, -28
 389              		.cfi_offset 5, -24
 390              		.cfi_offset 6, -20
 391              		.cfi_offset 7, -16
 392              		.cfi_offset 8, -12
 393              		.cfi_offset 9, -8
 394              		.cfi_offset 14, -4
 395 0004 0546     		mov	r5, r0
 396 0006 0F46     		mov	r7, r1
 397 0008 1646     		mov	r6, r2
 398 000a 9946     		mov	r9, r3
 399 000c DDF82080 		ldr	r8, [sp, #32]
2267:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 400              		.loc 1 2267 3 is_stmt 1 view .LVU82
 401              	.LVL22:
 402              	.L21:
2267:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 403              		.loc 1 2267 9 view .LVU83
2267:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 404              		.loc 1 2267 11 is_stmt 0 view .LVU84
 405 0010 2C68     		ldr	r4, [r5]
 406 0012 2468     		ldr	r4, [r4]
2267:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 407              		.loc 1 2267 50 view .LVU85
ARM GAS  /tmp/ccN5ASm9.s 			page 56


 408 0014 37EA0403 		bics	r3, r7, r4
 409 0018 0CBF     		ite	eq
 410 001a 0124     		moveq	r4, #1
 411 001c 0024     		movne	r4, #0
2267:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 412              		.loc 1 2267 9 view .LVU86
 413 001e B442     		cmp	r4, r6
 414 0020 1FD1     		bne	.L26
2270:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 415              		.loc 1 2270 5 is_stmt 1 view .LVU87
2270:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 416              		.loc 1 2270 8 is_stmt 0 view .LVU88
 417 0022 B8F1FF3F 		cmp	r8, #-1
 418 0026 F3D0     		beq	.L21
2272:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
 419              		.loc 1 2272 7 is_stmt 1 view .LVU89
2272:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
 420              		.loc 1 2272 10 is_stmt 0 view .LVU90
 421 0028 B8F1000F 		cmp	r8, #0
 422 002c 05D0     		beq	.L22
2272:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
 423              		.loc 1 2272 32 discriminator 1 view .LVU91
 424 002e FFF7FEFF 		bl	HAL_GetTick
 425              	.LVL23:
2272:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
 426              		.loc 1 2272 46 discriminator 1 view .LVU92
 427 0032 A0EB0900 		sub	r0, r0, r9
2272:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
 428              		.loc 1 2272 27 discriminator 1 view .LVU93
 429 0036 4045     		cmp	r0, r8
 430 0038 EAD9     		bls	.L21
 431              	.L22:
2275:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 432              		.loc 1 2275 9 is_stmt 1 view .LVU94
 433 003a 2A68     		ldr	r2, [r5]
 434 003c D368     		ldr	r3, [r2, #12]
 435 003e 23F4D073 		bic	r3, r3, #416
 436 0042 D360     		str	r3, [r2, #12]
2276:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 437              		.loc 1 2276 9 view .LVU95
 438 0044 2A68     		ldr	r2, [r5]
 439 0046 5369     		ldr	r3, [r2, #20]
 440 0048 23F00103 		bic	r3, r3, #1
 441 004c 5361     		str	r3, [r2, #20]
2278:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         hirda->RxState = HAL_IRDA_STATE_READY;
 442              		.loc 1 2278 9 view .LVU96
2278:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         hirda->RxState = HAL_IRDA_STATE_READY;
 443              		.loc 1 2278 24 is_stmt 0 view .LVU97
 444 004e 2023     		movs	r3, #32
 445 0050 85F83530 		strb	r3, [r5, #53]
2279:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 446              		.loc 1 2279 9 is_stmt 1 view .LVU98
2279:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 447              		.loc 1 2279 24 is_stmt 0 view .LVU99
 448 0054 85F83630 		strb	r3, [r5, #54]
2282:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 449              		.loc 1 2282 9 is_stmt 1 view .LVU100
ARM GAS  /tmp/ccN5ASm9.s 			page 57


2282:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 450              		.loc 1 2282 9 view .LVU101
 451 0058 0023     		movs	r3, #0
 452 005a 85F83430 		strb	r3, [r5, #52]
2282:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 453              		.loc 1 2282 9 view .LVU102
2284:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
 454              		.loc 1 2284 9 view .LVU103
2284:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
 455              		.loc 1 2284 16 is_stmt 0 view .LVU104
 456 005e 0320     		movs	r0, #3
 457 0060 00E0     		b	.L23
 458              	.L26:
2288:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
 459              		.loc 1 2288 10 view .LVU105
 460 0062 0020     		movs	r0, #0
 461              	.L23:
2289:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 462              		.loc 1 2289 1 view .LVU106
 463 0064 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
2289:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 464              		.loc 1 2289 1 view .LVU107
 465              		.cfi_endproc
 466              	.LFE274:
 468              		.section	.text.HAL_IRDA_MspInit,"ax",%progbits
 469              		.align	1
 470              		.weak	HAL_IRDA_MspInit
 471              		.syntax unified
 472              		.thumb
 473              		.thumb_func
 474              		.fpu fpv4-sp-d16
 476              	HAL_IRDA_MspInit:
 477              	.LVL24:
 478              	.LFB241:
 413:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
 479              		.loc 1 413 1 is_stmt 1 view -0
 480              		.cfi_startproc
 481              		@ args = 0, pretend = 0, frame = 0
 482              		@ frame_needed = 0, uses_anonymous_args = 0
 483              		@ link register save eliminated.
 415:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 484              		.loc 1 415 3 view .LVU109
 420:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 485              		.loc 1 420 1 is_stmt 0 view .LVU110
 486 0000 7047     		bx	lr
 487              		.cfi_endproc
 488              	.LFE241:
 490              		.section	.text.HAL_IRDA_Init,"ax",%progbits
 491              		.align	1
 492              		.global	HAL_IRDA_Init
 493              		.syntax unified
 494              		.thumb
 495              		.thumb_func
 496              		.fpu fpv4-sp-d16
 498              	HAL_IRDA_Init:
 499              	.LVL25:
 500              	.LFB239:
ARM GAS  /tmp/ccN5ASm9.s 			page 58


 294:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Check the IRDA handle allocation */
 501              		.loc 1 294 1 is_stmt 1 view -0
 502              		.cfi_startproc
 503              		@ args = 0, pretend = 0, frame = 0
 504              		@ frame_needed = 0, uses_anonymous_args = 0
 296:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 505              		.loc 1 296 3 view .LVU112
 296:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 506              		.loc 1 296 6 is_stmt 0 view .LVU113
 507 0000 0028     		cmp	r0, #0
 508 0002 3FD0     		beq	.L31
 294:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Check the IRDA handle allocation */
 509              		.loc 1 294 1 view .LVU114
 510 0004 10B5     		push	{r4, lr}
 511              	.LCFI2:
 512              		.cfi_def_cfa_offset 8
 513              		.cfi_offset 4, -8
 514              		.cfi_offset 14, -4
 515 0006 0446     		mov	r4, r0
 302:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Check the IRDA mode parameter in the IRDA handle */
 516              		.loc 1 302 3 is_stmt 1 view .LVU115
 304:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 517              		.loc 1 304 3 view .LVU116
 306:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 518              		.loc 1 306 3 view .LVU117
 306:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 519              		.loc 1 306 12 is_stmt 0 view .LVU118
 520 0008 90F83530 		ldrb	r3, [r0, #53]	@ zero_extendqisi2
 306:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 521              		.loc 1 306 6 view .LVU119
 522 000c 002B     		cmp	r3, #0
 523 000e 34D0     		beq	.L36
 524              	.LVL26:
 525              	.L30:
 327:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 526              		.loc 1 327 3 is_stmt 1 view .LVU120
 327:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 527              		.loc 1 327 17 is_stmt 0 view .LVU121
 528 0010 2423     		movs	r3, #36
 529 0012 84F83530 		strb	r3, [r4, #53]
 330:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 530              		.loc 1 330 3 is_stmt 1 view .LVU122
 531 0016 2268     		ldr	r2, [r4]
 532 0018 D368     		ldr	r3, [r2, #12]
 533 001a 23F40053 		bic	r3, r3, #8192
 534 001e D360     		str	r3, [r2, #12]
 333:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 535              		.loc 1 333 3 view .LVU123
 536 0020 2046     		mov	r0, r4
 537 0022 FFF7FEFF 		bl	IRDA_SetConfig
 538              	.LVL27:
 338:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL));
 539              		.loc 1 338 3 view .LVU124
 540 0026 2268     		ldr	r2, [r4]
 541 0028 1369     		ldr	r3, [r2, #16]
 542 002a 23F4F043 		bic	r3, r3, #30720
 543 002e 1361     		str	r3, [r2, #16]
ARM GAS  /tmp/ccN5ASm9.s 			page 59


 339:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 544              		.loc 1 339 3 view .LVU125
 545 0030 2268     		ldr	r2, [r4]
 546 0032 5369     		ldr	r3, [r2, #20]
 547 0034 23F02803 		bic	r3, r3, #40
 548 0038 5361     		str	r3, [r2, #20]
 342:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 549              		.loc 1 342 3 view .LVU126
 550 003a 2268     		ldr	r2, [r4]
 551 003c D368     		ldr	r3, [r2, #12]
 552 003e 43F40053 		orr	r3, r3, #8192
 553 0042 D360     		str	r3, [r2, #12]
 345:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 554              		.loc 1 345 3 view .LVU127
 555 0044 2268     		ldr	r2, [r4]
 556 0046 9369     		ldr	r3, [r2, #24]
 557 0048 23F0FF03 		bic	r3, r3, #255
 558 004c 217D     		ldrb	r1, [r4, #20]	@ zero_extendqisi2
 559 004e 0B43     		orrs	r3, r3, r1
 560 0050 9361     		str	r3, [r2, #24]
 348:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 561              		.loc 1 348 3 view .LVU128
 562 0052 2268     		ldr	r2, [r4]
 563 0054 5369     		ldr	r3, [r2, #20]
 564 0056 23F00403 		bic	r3, r3, #4
 565 005a A169     		ldr	r1, [r4, #24]
 566 005c 0B43     		orrs	r3, r3, r1
 567 005e 5361     		str	r3, [r2, #20]
 351:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 568              		.loc 1 351 3 view .LVU129
 569 0060 2268     		ldr	r2, [r4]
 570 0062 5369     		ldr	r3, [r2, #20]
 571 0064 43F00203 		orr	r3, r3, #2
 572 0068 5361     		str	r3, [r2, #20]
 354:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->gState = HAL_IRDA_STATE_READY;
 573              		.loc 1 354 3 view .LVU130
 354:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->gState = HAL_IRDA_STATE_READY;
 574              		.loc 1 354 20 is_stmt 0 view .LVU131
 575 006a 0020     		movs	r0, #0
 576 006c A063     		str	r0, [r4, #56]
 355:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_READY;
 577              		.loc 1 355 3 is_stmt 1 view .LVU132
 355:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_READY;
 578              		.loc 1 355 17 is_stmt 0 view .LVU133
 579 006e 2023     		movs	r3, #32
 580 0070 84F83530 		strb	r3, [r4, #53]
 356:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 581              		.loc 1 356 3 is_stmt 1 view .LVU134
 356:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 582              		.loc 1 356 18 is_stmt 0 view .LVU135
 583 0074 84F83630 		strb	r3, [r4, #54]
 358:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
 584              		.loc 1 358 3 is_stmt 1 view .LVU136
 359:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 585              		.loc 1 359 1 is_stmt 0 view .LVU137
 586 0078 10BD     		pop	{r4, pc}
 587              	.LVL28:
ARM GAS  /tmp/ccN5ASm9.s 			page 60


 588              	.L36:
 309:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 589              		.loc 1 309 5 is_stmt 1 view .LVU138
 309:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 590              		.loc 1 309 17 is_stmt 0 view .LVU139
 591 007a 80F83430 		strb	r3, [r0, #52]
 323:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACKS */
 592              		.loc 1 323 5 is_stmt 1 view .LVU140
 593 007e FFF7FEFF 		bl	HAL_IRDA_MspInit
 594              	.LVL29:
 323:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACKS */
 595              		.loc 1 323 5 is_stmt 0 view .LVU141
 596 0082 C5E7     		b	.L30
 597              	.LVL30:
 598              	.L31:
 599              	.LCFI3:
 600              		.cfi_def_cfa_offset 0
 601              		.cfi_restore 4
 602              		.cfi_restore 14
 298:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 603              		.loc 1 298 12 view .LVU142
 604 0084 0120     		movs	r0, #1
 605              	.LVL31:
 359:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 606              		.loc 1 359 1 view .LVU143
 607 0086 7047     		bx	lr
 608              		.cfi_endproc
 609              	.LFE239:
 611              		.section	.text.HAL_IRDA_MspDeInit,"ax",%progbits
 612              		.align	1
 613              		.weak	HAL_IRDA_MspDeInit
 614              		.syntax unified
 615              		.thumb
 616              		.thumb_func
 617              		.fpu fpv4-sp-d16
 619              	HAL_IRDA_MspDeInit:
 620              	.LVL32:
 621              	.LFB242:
 429:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
 622              		.loc 1 429 1 is_stmt 1 view -0
 623              		.cfi_startproc
 624              		@ args = 0, pretend = 0, frame = 0
 625              		@ frame_needed = 0, uses_anonymous_args = 0
 626              		@ link register save eliminated.
 431:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 627              		.loc 1 431 3 view .LVU145
 436:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 628              		.loc 1 436 1 is_stmt 0 view .LVU146
 629 0000 7047     		bx	lr
 630              		.cfi_endproc
 631              	.LFE242:
 633              		.section	.text.HAL_IRDA_DeInit,"ax",%progbits
 634              		.align	1
 635              		.global	HAL_IRDA_DeInit
 636              		.syntax unified
 637              		.thumb
 638              		.thumb_func
ARM GAS  /tmp/ccN5ASm9.s 			page 61


 639              		.fpu fpv4-sp-d16
 641              	HAL_IRDA_DeInit:
 642              	.LVL33:
 643              	.LFB240:
 368:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Check the IRDA handle allocation */
 644              		.loc 1 368 1 is_stmt 1 view -0
 645              		.cfi_startproc
 646              		@ args = 0, pretend = 0, frame = 0
 647              		@ frame_needed = 0, uses_anonymous_args = 0
 370:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 648              		.loc 1 370 3 view .LVU148
 370:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 649              		.loc 1 370 6 is_stmt 0 view .LVU149
 650 0000 A0B1     		cbz	r0, .L40
 368:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Check the IRDA handle allocation */
 651              		.loc 1 368 1 view .LVU150
 652 0002 10B5     		push	{r4, lr}
 653              	.LCFI4:
 654              		.cfi_def_cfa_offset 8
 655              		.cfi_offset 4, -8
 656              		.cfi_offset 14, -4
 657 0004 0446     		mov	r4, r0
 376:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 658              		.loc 1 376 3 is_stmt 1 view .LVU151
 378:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 659              		.loc 1 378 3 view .LVU152
 378:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 660              		.loc 1 378 17 is_stmt 0 view .LVU153
 661 0006 2423     		movs	r3, #36
 662 0008 80F83530 		strb	r3, [r0, #53]
 381:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 663              		.loc 1 381 3 is_stmt 1 view .LVU154
 664 000c 0268     		ldr	r2, [r0]
 665 000e D368     		ldr	r3, [r2, #12]
 666 0010 23F40053 		bic	r3, r3, #8192
 667 0014 D360     		str	r3, [r2, #12]
 392:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACKS */
 668              		.loc 1 392 3 view .LVU155
 669 0016 FFF7FEFF 		bl	HAL_IRDA_MspDeInit
 670              	.LVL34:
 395:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 671              		.loc 1 395 3 view .LVU156
 395:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 672              		.loc 1 395 20 is_stmt 0 view .LVU157
 673 001a 0020     		movs	r0, #0
 674 001c A063     		str	r0, [r4, #56]
 397:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_RESET;
 675              		.loc 1 397 3 is_stmt 1 view .LVU158
 397:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_RESET;
 676              		.loc 1 397 17 is_stmt 0 view .LVU159
 677 001e 84F83500 		strb	r0, [r4, #53]
 398:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 678              		.loc 1 398 3 is_stmt 1 view .LVU160
 398:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 679              		.loc 1 398 18 is_stmt 0 view .LVU161
 680 0022 84F83600 		strb	r0, [r4, #54]
 401:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
ARM GAS  /tmp/ccN5ASm9.s 			page 62


 681              		.loc 1 401 3 is_stmt 1 view .LVU162
 401:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 682              		.loc 1 401 3 view .LVU163
 683 0026 84F83400 		strb	r0, [r4, #52]
 401:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 684              		.loc 1 401 3 view .LVU164
 403:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
 685              		.loc 1 403 3 view .LVU165
 404:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 686              		.loc 1 404 1 is_stmt 0 view .LVU166
 687 002a 10BD     		pop	{r4, pc}
 688              	.LVL35:
 689              	.L40:
 690              	.LCFI5:
 691              		.cfi_def_cfa_offset 0
 692              		.cfi_restore 4
 693              		.cfi_restore 14
 372:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 694              		.loc 1 372 12 view .LVU167
 695 002c 0120     		movs	r0, #1
 696              	.LVL36:
 404:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 697              		.loc 1 404 1 view .LVU168
 698 002e 7047     		bx	lr
 699              		.cfi_endproc
 700              	.LFE240:
 702              		.section	.text.HAL_IRDA_Transmit,"ax",%progbits
 703              		.align	1
 704              		.global	HAL_IRDA_Transmit
 705              		.syntax unified
 706              		.thumb
 707              		.thumb_func
 708              		.fpu fpv4-sp-d16
 710              	HAL_IRDA_Transmit:
 711              	.LVL37:
 712              	.LFB243:
 765:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   const uint16_t *tmp;
 713              		.loc 1 765 1 is_stmt 1 view -0
 714              		.cfi_startproc
 715              		@ args = 0, pretend = 0, frame = 0
 716              		@ frame_needed = 0, uses_anonymous_args = 0
 765:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   const uint16_t *tmp;
 717              		.loc 1 765 1 is_stmt 0 view .LVU170
 718 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 719              	.LCFI6:
 720              		.cfi_def_cfa_offset 24
 721              		.cfi_offset 4, -24
 722              		.cfi_offset 5, -20
 723              		.cfi_offset 6, -16
 724              		.cfi_offset 7, -12
 725              		.cfi_offset 8, -8
 726              		.cfi_offset 14, -4
 727 0004 82B0     		sub	sp, sp, #8
 728              	.LCFI7:
 729              		.cfi_def_cfa_offset 32
 730 0006 1E46     		mov	r6, r3
 766:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   uint32_t tickstart = 0U;
ARM GAS  /tmp/ccN5ASm9.s 			page 63


 731              		.loc 1 766 3 is_stmt 1 view .LVU171
 767:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 732              		.loc 1 767 3 view .LVU172
 733              	.LVL38:
 770:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 734              		.loc 1 770 3 view .LVU173
 770:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 735              		.loc 1 770 12 is_stmt 0 view .LVU174
 736 0008 90F83530 		ldrb	r3, [r0, #53]	@ zero_extendqisi2
 737              	.LVL39:
 770:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 738              		.loc 1 770 12 view .LVU175
 739 000c DBB2     		uxtb	r3, r3
 770:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 740              		.loc 1 770 6 view .LVU176
 741 000e 202B     		cmp	r3, #32
 742 0010 58D1     		bne	.L52
 743 0012 0446     		mov	r4, r0
 744 0014 0D46     		mov	r5, r1
 745 0016 9046     		mov	r8, r2
 772:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 746              		.loc 1 772 5 is_stmt 1 view .LVU177
 772:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 747              		.loc 1 772 8 is_stmt 0 view .LVU178
 748 0018 0029     		cmp	r1, #0
 749 001a 57D0     		beq	.L53
 772:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 750              		.loc 1 772 25 discriminator 1 view .LVU179
 751 001c 002A     		cmp	r2, #0
 752 001e 57D0     		beq	.L54
 778:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 753              		.loc 1 778 5 is_stmt 1 view .LVU180
 778:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 754              		.loc 1 778 5 view .LVU181
 755 0020 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2
 756 0024 012B     		cmp	r3, #1
 757 0026 55D0     		beq	.L55
 778:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 758              		.loc 1 778 5 discriminator 2 view .LVU182
 759 0028 0123     		movs	r3, #1
 760 002a 80F83430 		strb	r3, [r0, #52]
 778:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 761              		.loc 1 778 5 discriminator 2 view .LVU183
 780:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->gState = HAL_IRDA_STATE_BUSY_TX;
 762              		.loc 1 780 5 discriminator 2 view .LVU184
 780:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->gState = HAL_IRDA_STATE_BUSY_TX;
 763              		.loc 1 780 22 is_stmt 0 discriminator 2 view .LVU185
 764 002e 0023     		movs	r3, #0
 765 0030 8363     		str	r3, [r0, #56]
 781:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 766              		.loc 1 781 5 is_stmt 1 discriminator 2 view .LVU186
 781:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 767              		.loc 1 781 19 is_stmt 0 discriminator 2 view .LVU187
 768 0032 2123     		movs	r3, #33
 769 0034 80F83530 		strb	r3, [r0, #53]
 784:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 770              		.loc 1 784 5 is_stmt 1 discriminator 2 view .LVU188
ARM GAS  /tmp/ccN5ASm9.s 			page 64


 784:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 771              		.loc 1 784 17 is_stmt 0 discriminator 2 view .LVU189
 772 0038 FFF7FEFF 		bl	HAL_GetTick
 773              	.LVL40:
 784:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 774              		.loc 1 784 17 discriminator 2 view .LVU190
 775 003c 0746     		mov	r7, r0
 776              	.LVL41:
 786:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->TxXferCount = Size;
 777              		.loc 1 786 5 is_stmt 1 discriminator 2 view .LVU191
 786:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->TxXferCount = Size;
 778              		.loc 1 786 23 is_stmt 0 discriminator 2 view .LVU192
 779 003e A4F82080 		strh	r8, [r4, #32]	@ movhi
 787:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     while (hirda->TxXferCount > 0U)
 780              		.loc 1 787 5 is_stmt 1 discriminator 2 view .LVU193
 787:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     while (hirda->TxXferCount > 0U)
 781              		.loc 1 787 24 is_stmt 0 discriminator 2 view .LVU194
 782 0042 A4F82280 		strh	r8, [r4, #34]	@ movhi
 788:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 783              		.loc 1 788 5 is_stmt 1 discriminator 2 view .LVU195
 788:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 784              		.loc 1 788 11 is_stmt 0 discriminator 2 view .LVU196
 785 0046 17E0     		b	.L47
 786              	.LVL42:
 787              	.L61:
 793:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         {
 788              		.loc 1 793 9 is_stmt 1 view .LVU197
 793:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         {
 789              		.loc 1 793 13 is_stmt 0 view .LVU198
 790 0048 0096     		str	r6, [sp]
 791 004a 3B46     		mov	r3, r7
 792 004c 0022     		movs	r2, #0
 793 004e 8021     		movs	r1, #128
 794 0050 2046     		mov	r0, r4
 795 0052 FFF7FEFF 		bl	IRDA_WaitOnFlagUntilTimeout
 796              	.LVL43:
 793:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         {
 797              		.loc 1 793 12 view .LVU199
 798 0056 0028     		cmp	r0, #0
 799 0058 3ED1     		bne	.L56
 797:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         hirda->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800              		.loc 1 797 9 is_stmt 1 view .LVU200
 801              	.LVL44:
 798:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         if (hirda->Init.Parity == IRDA_PARITY_NONE)
 802              		.loc 1 798 9 view .LVU201
 798:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         if (hirda->Init.Parity == IRDA_PARITY_NONE)
 803              		.loc 1 798 32 is_stmt 0 view .LVU202
 804 005a 2B88     		ldrh	r3, [r5]
 798:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         if (hirda->Init.Parity == IRDA_PARITY_NONE)
 805              		.loc 1 798 14 view .LVU203
 806 005c 2268     		ldr	r2, [r4]
 798:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         if (hirda->Init.Parity == IRDA_PARITY_NONE)
 807              		.loc 1 798 37 view .LVU204
 808 005e C3F30803 		ubfx	r3, r3, #0, #9
 798:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         if (hirda->Init.Parity == IRDA_PARITY_NONE)
 809              		.loc 1 798 29 view .LVU205
 810 0062 5360     		str	r3, [r2, #4]
ARM GAS  /tmp/ccN5ASm9.s 			page 65


 799:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         {
 811              		.loc 1 799 9 is_stmt 1 view .LVU206
 799:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         {
 812              		.loc 1 799 24 is_stmt 0 view .LVU207
 813 0064 E368     		ldr	r3, [r4, #12]
 799:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         {
 814              		.loc 1 799 12 view .LVU208
 815 0066 0BB9     		cbnz	r3, .L49
 801:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         }
 816              		.loc 1 801 11 is_stmt 1 view .LVU209
 801:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         }
 817              		.loc 1 801 17 is_stmt 0 view .LVU210
 818 0068 0235     		adds	r5, r5, #2
 819              	.LVL45:
 801:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         }
 820              		.loc 1 801 17 view .LVU211
 821 006a 05E0     		b	.L47
 822              	.LVL46:
 823              	.L49:
 805:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         }
 824              		.loc 1 805 11 is_stmt 1 view .LVU212
 805:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         }
 825              		.loc 1 805 17 is_stmt 0 view .LVU213
 826 006c 0135     		adds	r5, r5, #1
 827              	.LVL47:
 805:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         }
 828              		.loc 1 805 17 view .LVU214
 829 006e 03E0     		b	.L47
 830              	.LVL48:
 831              	.L62:
 814:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
 832              		.loc 1 814 9 is_stmt 1 view .LVU215
 814:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
 833              		.loc 1 814 32 is_stmt 0 view .LVU216
 834 0070 15F8012B 		ldrb	r2, [r5], #1	@ zero_extendqisi2
 835              	.LVL49:
 814:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
 836              		.loc 1 814 14 view .LVU217
 837 0074 2368     		ldr	r3, [r4]
 814:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
 838              		.loc 1 814 29 view .LVU218
 839 0076 5A60     		str	r2, [r3, #4]
 840              	.L47:
 788:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 841              		.loc 1 788 11 is_stmt 1 view .LVU219
 788:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 842              		.loc 1 788 17 is_stmt 0 view .LVU220
 843 0078 638C     		ldrh	r3, [r4, #34]
 844 007a 9BB2     		uxth	r3, r3
 788:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 845              		.loc 1 788 11 view .LVU221
 846 007c 9BB1     		cbz	r3, .L60
 790:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       if (hirda->Init.WordLength == IRDA_WORDLENGTH_9B)
 847              		.loc 1 790 7 is_stmt 1 view .LVU222
 790:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       if (hirda->Init.WordLength == IRDA_WORDLENGTH_9B)
 848              		.loc 1 790 12 is_stmt 0 view .LVU223
 849 007e 628C     		ldrh	r2, [r4, #34]
ARM GAS  /tmp/ccN5ASm9.s 			page 66


 850 0080 92B2     		uxth	r2, r2
 790:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       if (hirda->Init.WordLength == IRDA_WORDLENGTH_9B)
 851              		.loc 1 790 25 view .LVU224
 852 0082 013A     		subs	r2, r2, #1
 853 0084 92B2     		uxth	r2, r2
 854 0086 6284     		strh	r2, [r4, #34]	@ movhi
 791:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
 855              		.loc 1 791 7 is_stmt 1 view .LVU225
 791:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
 856              		.loc 1 791 22 is_stmt 0 view .LVU226
 857 0088 A368     		ldr	r3, [r4, #8]
 791:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
 858              		.loc 1 791 10 view .LVU227
 859 008a B3F5805F 		cmp	r3, #4096
 860 008e DBD0     		beq	.L61
 810:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         {
 861              		.loc 1 810 9 is_stmt 1 view .LVU228
 810:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         {
 862              		.loc 1 810 13 is_stmt 0 view .LVU229
 863 0090 0096     		str	r6, [sp]
 864 0092 3B46     		mov	r3, r7
 865 0094 0022     		movs	r2, #0
 866 0096 8021     		movs	r1, #128
 867 0098 2046     		mov	r0, r4
 868 009a FFF7FEFF 		bl	IRDA_WaitOnFlagUntilTimeout
 869              	.LVL50:
 810:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         {
 870              		.loc 1 810 12 view .LVU230
 871 009e 0028     		cmp	r0, #0
 872 00a0 E6D0     		beq	.L62
 812:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         }
 873              		.loc 1 812 18 view .LVU231
 874 00a2 0320     		movs	r0, #3
 875 00a4 0FE0     		b	.L46
 876              	.L60:
 818:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 877              		.loc 1 818 5 is_stmt 1 view .LVU232
 818:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 878              		.loc 1 818 9 is_stmt 0 view .LVU233
 879 00a6 0096     		str	r6, [sp]
 880 00a8 3B46     		mov	r3, r7
 881 00aa 0022     		movs	r2, #0
 882 00ac 4021     		movs	r1, #64
 883 00ae 2046     		mov	r0, r4
 884 00b0 FFF7FEFF 		bl	IRDA_WaitOnFlagUntilTimeout
 885              	.LVL51:
 818:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 886              		.loc 1 818 8 view .LVU234
 887 00b4 90B9     		cbnz	r0, .L58
 824:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 888              		.loc 1 824 5 is_stmt 1 view .LVU235
 824:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 889              		.loc 1 824 19 is_stmt 0 view .LVU236
 890 00b6 2023     		movs	r3, #32
 891 00b8 84F83530 		strb	r3, [r4, #53]
 827:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 892              		.loc 1 827 5 is_stmt 1 view .LVU237
ARM GAS  /tmp/ccN5ASm9.s 			page 67


 827:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 893              		.loc 1 827 5 view .LVU238
 894 00bc 0023     		movs	r3, #0
 895 00be 84F83430 		strb	r3, [r4, #52]
 827:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 896              		.loc 1 827 5 view .LVU239
 829:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 897              		.loc 1 829 5 view .LVU240
 829:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 898              		.loc 1 829 12 is_stmt 0 view .LVU241
 899 00c2 00E0     		b	.L46
 900              	.LVL52:
 901              	.L52:
 833:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 902              		.loc 1 833 12 view .LVU242
 903 00c4 0220     		movs	r0, #2
 904              	.LVL53:
 905              	.L46:
 835:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 906              		.loc 1 835 1 view .LVU243
 907 00c6 02B0     		add	sp, sp, #8
 908              	.LCFI8:
 909              		.cfi_remember_state
 910              		.cfi_def_cfa_offset 24
 911              		@ sp needed
 912 00c8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 913              	.LVL54:
 914              	.L53:
 915              	.LCFI9:
 916              		.cfi_restore_state
 774:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 917              		.loc 1 774 15 view .LVU244
 918 00cc 0120     		movs	r0, #1
 919              	.LVL55:
 774:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 920              		.loc 1 774 15 view .LVU245
 921 00ce FAE7     		b	.L46
 922              	.LVL56:
 923              	.L54:
 774:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 924              		.loc 1 774 15 view .LVU246
 925 00d0 0120     		movs	r0, #1
 926              	.LVL57:
 774:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 927              		.loc 1 774 15 view .LVU247
 928 00d2 F8E7     		b	.L46
 929              	.LVL58:
 930              	.L55:
 778:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 931              		.loc 1 778 5 view .LVU248
 932 00d4 0220     		movs	r0, #2
 933              	.LVL59:
 778:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 934              		.loc 1 778 5 view .LVU249
 935 00d6 F6E7     		b	.L46
 936              	.LVL60:
 937              	.L56:
ARM GAS  /tmp/ccN5ASm9.s 			page 68


 795:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         }
 938              		.loc 1 795 18 view .LVU250
 939 00d8 0320     		movs	r0, #3
 940 00da F4E7     		b	.L46
 941              	.L58:
 820:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 942              		.loc 1 820 14 view .LVU251
 943 00dc 0320     		movs	r0, #3
 944 00de F2E7     		b	.L46
 945              		.cfi_endproc
 946              	.LFE243:
 948              		.section	.text.HAL_IRDA_Receive,"ax",%progbits
 949              		.align	1
 950              		.global	HAL_IRDA_Receive
 951              		.syntax unified
 952              		.thumb
 953              		.thumb_func
 954              		.fpu fpv4-sp-d16
 956              	HAL_IRDA_Receive:
 957              	.LVL61:
 958              	.LFB244:
 850:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   uint16_t *tmp;
 959              		.loc 1 850 1 is_stmt 1 view -0
 960              		.cfi_startproc
 961              		@ args = 0, pretend = 0, frame = 0
 962              		@ frame_needed = 0, uses_anonymous_args = 0
 850:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   uint16_t *tmp;
 963              		.loc 1 850 1 is_stmt 0 view .LVU253
 964 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 965              	.LCFI10:
 966              		.cfi_def_cfa_offset 24
 967              		.cfi_offset 4, -24
 968              		.cfi_offset 5, -20
 969              		.cfi_offset 6, -16
 970              		.cfi_offset 7, -12
 971              		.cfi_offset 8, -8
 972              		.cfi_offset 14, -4
 973 0004 82B0     		sub	sp, sp, #8
 974              	.LCFI11:
 975              		.cfi_def_cfa_offset 32
 976 0006 1E46     		mov	r6, r3
 851:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   uint32_t tickstart = 0U;
 977              		.loc 1 851 3 is_stmt 1 view .LVU254
 852:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 978              		.loc 1 852 3 view .LVU255
 979              	.LVL62:
 855:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 980              		.loc 1 855 3 view .LVU256
 855:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 981              		.loc 1 855 12 is_stmt 0 view .LVU257
 982 0008 90F83630 		ldrb	r3, [r0, #54]	@ zero_extendqisi2
 983              	.LVL63:
 855:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 984              		.loc 1 855 12 view .LVU258
 985 000c DBB2     		uxtb	r3, r3
 855:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 986              		.loc 1 855 6 view .LVU259
ARM GAS  /tmp/ccN5ASm9.s 			page 69


 987 000e 202B     		cmp	r3, #32
 988 0010 5BD1     		bne	.L71
 989 0012 0446     		mov	r4, r0
 990 0014 0D46     		mov	r5, r1
 991 0016 9046     		mov	r8, r2
 857:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 992              		.loc 1 857 5 is_stmt 1 view .LVU260
 857:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 993              		.loc 1 857 8 is_stmt 0 view .LVU261
 994 0018 0029     		cmp	r1, #0
 995 001a 5AD0     		beq	.L72
 857:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 996              		.loc 1 857 25 discriminator 1 view .LVU262
 997 001c 002A     		cmp	r2, #0
 998 001e 5AD0     		beq	.L73
 863:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 999              		.loc 1 863 5 is_stmt 1 view .LVU263
 863:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1000              		.loc 1 863 5 view .LVU264
 1001 0020 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2
 1002 0024 012B     		cmp	r3, #1
 1003 0026 58D0     		beq	.L74
 863:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1004              		.loc 1 863 5 discriminator 2 view .LVU265
 1005 0028 0123     		movs	r3, #1
 1006 002a 80F83430 		strb	r3, [r0, #52]
 863:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1007              		.loc 1 863 5 discriminator 2 view .LVU266
 865:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_BUSY_RX;
 1008              		.loc 1 865 5 discriminator 2 view .LVU267
 865:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_BUSY_RX;
 1009              		.loc 1 865 22 is_stmt 0 discriminator 2 view .LVU268
 1010 002e 0023     		movs	r3, #0
 1011 0030 8363     		str	r3, [r0, #56]
 866:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1012              		.loc 1 866 5 is_stmt 1 discriminator 2 view .LVU269
 866:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1013              		.loc 1 866 20 is_stmt 0 discriminator 2 view .LVU270
 1014 0032 2223     		movs	r3, #34
 1015 0034 80F83630 		strb	r3, [r0, #54]
 869:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1016              		.loc 1 869 5 is_stmt 1 discriminator 2 view .LVU271
 869:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1017              		.loc 1 869 17 is_stmt 0 discriminator 2 view .LVU272
 1018 0038 FFF7FEFF 		bl	HAL_GetTick
 1019              	.LVL64:
 869:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1020              		.loc 1 869 17 discriminator 2 view .LVU273
 1021 003c 0746     		mov	r7, r0
 1022              	.LVL65:
 871:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->RxXferCount = Size;
 1023              		.loc 1 871 5 is_stmt 1 discriminator 2 view .LVU274
 871:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->RxXferCount = Size;
 1024              		.loc 1 871 23 is_stmt 0 discriminator 2 view .LVU275
 1025 003e A4F82880 		strh	r8, [r4, #40]	@ movhi
 872:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1026              		.loc 1 872 5 is_stmt 1 discriminator 2 view .LVU276
ARM GAS  /tmp/ccN5ASm9.s 			page 70


 872:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1027              		.loc 1 872 24 is_stmt 0 discriminator 2 view .LVU277
 1028 0042 A4F82A80 		strh	r8, [r4, #42]	@ movhi
 875:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 1029              		.loc 1 875 5 is_stmt 1 discriminator 2 view .LVU278
 875:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 1030              		.loc 1 875 11 is_stmt 0 discriminator 2 view .LVU279
 1031 0046 1DE0     		b	.L65
 1032              	.LVL66:
 1033              	.L79:
 881:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         {
 1034              		.loc 1 881 9 is_stmt 1 view .LVU280
 881:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         {
 1035              		.loc 1 881 13 is_stmt 0 view .LVU281
 1036 0048 0096     		str	r6, [sp]
 1037 004a 3B46     		mov	r3, r7
 1038 004c 0022     		movs	r2, #0
 1039 004e 2021     		movs	r1, #32
 1040 0050 2046     		mov	r0, r4
 1041 0052 FFF7FEFF 		bl	IRDA_WaitOnFlagUntilTimeout
 1042              	.LVL67:
 881:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         {
 1043              		.loc 1 881 12 view .LVU282
 1044 0056 0028     		cmp	r0, #0
 1045 0058 41D1     		bne	.L75
 885:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         if (hirda->Init.Parity == IRDA_PARITY_NONE)
 1046              		.loc 1 885 9 is_stmt 1 view .LVU283
 1047              	.LVL68:
 886:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         {
 1048              		.loc 1 886 9 view .LVU284
 886:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         {
 1049              		.loc 1 886 24 is_stmt 0 view .LVU285
 1050 005a E368     		ldr	r3, [r4, #12]
 886:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         {
 1051              		.loc 1 886 12 view .LVU286
 1052 005c 33B9     		cbnz	r3, .L67
 888:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****           pData += 2U;
 1053              		.loc 1 888 11 is_stmt 1 view .LVU287
 888:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****           pData += 2U;
 1054              		.loc 1 888 34 is_stmt 0 view .LVU288
 1055 005e 2368     		ldr	r3, [r4]
 888:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****           pData += 2U;
 1056              		.loc 1 888 44 view .LVU289
 1057 0060 5B68     		ldr	r3, [r3, #4]
 888:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****           pData += 2U;
 1058              		.loc 1 888 18 view .LVU290
 1059 0062 C3F30803 		ubfx	r3, r3, #0, #9
 888:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****           pData += 2U;
 1060              		.loc 1 888 16 view .LVU291
 1061 0066 25F8023B 		strh	r3, [r5], #2	@ movhi
 1062              	.LVL69:
 889:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         }
 1063              		.loc 1 889 11 is_stmt 1 view .LVU292
 889:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         }
 1064              		.loc 1 889 11 is_stmt 0 view .LVU293
 1065 006a 0BE0     		b	.L65
 1066              	.LVL70:
ARM GAS  /tmp/ccN5ASm9.s 			page 71


 1067              	.L67:
 893:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****           pData += 1U;
 1068              		.loc 1 893 11 is_stmt 1 view .LVU294
 893:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****           pData += 1U;
 1069              		.loc 1 893 34 is_stmt 0 view .LVU295
 1070 006c 2368     		ldr	r3, [r4]
 893:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****           pData += 1U;
 1071              		.loc 1 893 44 view .LVU296
 1072 006e 5B68     		ldr	r3, [r3, #4]
 893:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****           pData += 1U;
 1073              		.loc 1 893 18 view .LVU297
 1074 0070 DBB2     		uxtb	r3, r3
 893:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****           pData += 1U;
 1075              		.loc 1 893 16 view .LVU298
 1076 0072 25F8013B 		strh	r3, [r5], #1	@ movhi
 1077              	.LVL71:
 894:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         }
 1078              		.loc 1 894 11 is_stmt 1 view .LVU299
 894:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         }
 1079              		.loc 1 894 11 is_stmt 0 view .LVU300
 1080 0076 05E0     		b	.L65
 1081              	.LVL72:
 1082              	.L69:
 909:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         }
 1083              		.loc 1 909 11 is_stmt 1 view .LVU301
 909:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         }
 1084              		.loc 1 909 37 is_stmt 0 view .LVU302
 1085 0078 2368     		ldr	r3, [r4]
 909:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         }
 1086              		.loc 1 909 47 view .LVU303
 1087 007a 5B68     		ldr	r3, [r3, #4]
 1088              	.LVL73:
 909:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         }
 1089              		.loc 1 909 22 view .LVU304
 1090 007c 03F07F03 		and	r3, r3, #127
 909:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         }
 1091              		.loc 1 909 20 view .LVU305
 1092 0080 05F8013B 		strb	r3, [r5], #1
 1093              	.LVL74:
 1094              	.L65:
 875:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 1095              		.loc 1 875 11 is_stmt 1 view .LVU306
 875:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 1096              		.loc 1 875 17 is_stmt 0 view .LVU307
 1097 0084 638D     		ldrh	r3, [r4, #42]
 1098 0086 9BB2     		uxth	r3, r3
 875:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 1099              		.loc 1 875 11 view .LVU308
 1100 0088 C3B1     		cbz	r3, .L78
 877:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1101              		.loc 1 877 7 is_stmt 1 view .LVU309
 877:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1102              		.loc 1 877 12 is_stmt 0 view .LVU310
 1103 008a 628D     		ldrh	r2, [r4, #42]
 1104 008c 92B2     		uxth	r2, r2
 877:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1105              		.loc 1 877 25 view .LVU311
ARM GAS  /tmp/ccN5ASm9.s 			page 72


 1106 008e 013A     		subs	r2, r2, #1
 1107 0090 92B2     		uxth	r2, r2
 1108 0092 6285     		strh	r2, [r4, #42]	@ movhi
 879:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
 1109              		.loc 1 879 7 is_stmt 1 view .LVU312
 879:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
 1110              		.loc 1 879 22 is_stmt 0 view .LVU313
 1111 0094 A368     		ldr	r3, [r4, #8]
 879:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
 1112              		.loc 1 879 10 view .LVU314
 1113 0096 B3F5805F 		cmp	r3, #4096
 1114 009a D5D0     		beq	.L79
 899:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         {
 1115              		.loc 1 899 9 is_stmt 1 view .LVU315
 899:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         {
 1116              		.loc 1 899 13 is_stmt 0 view .LVU316
 1117 009c 0096     		str	r6, [sp]
 1118 009e 3B46     		mov	r3, r7
 1119 00a0 0022     		movs	r2, #0
 1120 00a2 2021     		movs	r1, #32
 1121 00a4 2046     		mov	r0, r4
 1122 00a6 FFF7FEFF 		bl	IRDA_WaitOnFlagUntilTimeout
 1123              	.LVL75:
 899:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         {
 1124              		.loc 1 899 12 view .LVU317
 1125 00aa D0B9     		cbnz	r0, .L76
 903:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         {
 1126              		.loc 1 903 9 is_stmt 1 view .LVU318
 903:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         {
 1127              		.loc 1 903 24 is_stmt 0 view .LVU319
 1128 00ac E368     		ldr	r3, [r4, #12]
 903:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         {
 1129              		.loc 1 903 12 view .LVU320
 1130 00ae 002B     		cmp	r3, #0
 1131 00b0 E2D1     		bne	.L69
 905:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         }
 1132              		.loc 1 905 11 is_stmt 1 view .LVU321
 905:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         }
 1133              		.loc 1 905 37 is_stmt 0 view .LVU322
 1134 00b2 2368     		ldr	r3, [r4]
 905:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         }
 1135              		.loc 1 905 47 view .LVU323
 1136 00b4 5B68     		ldr	r3, [r3, #4]
 1137              	.LVL76:
 905:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         }
 1138              		.loc 1 905 20 view .LVU324
 1139 00b6 05F8013B 		strb	r3, [r5], #1
 1140              	.LVL77:
 905:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         }
 1141              		.loc 1 905 20 view .LVU325
 1142 00ba E3E7     		b	.L65
 1143              	.L78:
 915:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1144              		.loc 1 915 5 is_stmt 1 view .LVU326
 915:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1145              		.loc 1 915 20 is_stmt 0 view .LVU327
 1146 00bc 2023     		movs	r3, #32
ARM GAS  /tmp/ccN5ASm9.s 			page 73


 1147 00be 84F83630 		strb	r3, [r4, #54]
 918:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1148              		.loc 1 918 5 is_stmt 1 view .LVU328
 918:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1149              		.loc 1 918 5 view .LVU329
 1150 00c2 0020     		movs	r0, #0
 1151 00c4 84F83400 		strb	r0, [r4, #52]
 918:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1152              		.loc 1 918 5 view .LVU330
 920:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 1153              		.loc 1 920 5 view .LVU331
 920:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 1154              		.loc 1 920 12 is_stmt 0 view .LVU332
 1155 00c8 00E0     		b	.L64
 1156              	.LVL78:
 1157              	.L71:
 924:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 1158              		.loc 1 924 12 view .LVU333
 1159 00ca 0220     		movs	r0, #2
 1160              	.LVL79:
 1161              	.L64:
 926:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1162              		.loc 1 926 1 view .LVU334
 1163 00cc 02B0     		add	sp, sp, #8
 1164              	.LCFI12:
 1165              		.cfi_remember_state
 1166              		.cfi_def_cfa_offset 24
 1167              		@ sp needed
 1168 00ce BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1169              	.LVL80:
 1170              	.L72:
 1171              	.LCFI13:
 1172              		.cfi_restore_state
 859:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 1173              		.loc 1 859 15 view .LVU335
 1174 00d2 0120     		movs	r0, #1
 1175              	.LVL81:
 859:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 1176              		.loc 1 859 15 view .LVU336
 1177 00d4 FAE7     		b	.L64
 1178              	.LVL82:
 1179              	.L73:
 859:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 1180              		.loc 1 859 15 view .LVU337
 1181 00d6 0120     		movs	r0, #1
 1182              	.LVL83:
 859:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 1183              		.loc 1 859 15 view .LVU338
 1184 00d8 F8E7     		b	.L64
 1185              	.LVL84:
 1186              	.L74:
 863:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1187              		.loc 1 863 5 view .LVU339
 1188 00da 0220     		movs	r0, #2
 1189              	.LVL85:
 863:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1190              		.loc 1 863 5 view .LVU340
ARM GAS  /tmp/ccN5ASm9.s 			page 74


 1191 00dc F6E7     		b	.L64
 1192              	.LVL86:
 1193              	.L75:
 883:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         }
 1194              		.loc 1 883 18 view .LVU341
 1195 00de 0320     		movs	r0, #3
 1196 00e0 F4E7     		b	.L64
 1197              	.L76:
 901:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         }
 1198              		.loc 1 901 18 view .LVU342
 1199 00e2 0320     		movs	r0, #3
 1200 00e4 F2E7     		b	.L64
 1201              		.cfi_endproc
 1202              	.LFE244:
 1204              		.section	.text.HAL_IRDA_Transmit_IT,"ax",%progbits
 1205              		.align	1
 1206              		.global	HAL_IRDA_Transmit_IT
 1207              		.syntax unified
 1208              		.thumb
 1209              		.thumb_func
 1210              		.fpu fpv4-sp-d16
 1212              	HAL_IRDA_Transmit_IT:
 1213              	.LVL87:
 1214              	.LFB245:
 940:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Check that a Tx process is not already ongoing */
 1215              		.loc 1 940 1 is_stmt 1 view -0
 1216              		.cfi_startproc
 1217              		@ args = 0, pretend = 0, frame = 0
 1218              		@ frame_needed = 0, uses_anonymous_args = 0
 1219              		@ link register save eliminated.
 942:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 1220              		.loc 1 942 3 view .LVU344
 942:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 1221              		.loc 1 942 12 is_stmt 0 view .LVU345
 1222 0000 90F83530 		ldrb	r3, [r0, #53]	@ zero_extendqisi2
 1223 0004 DBB2     		uxtb	r3, r3
 942:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 1224              		.loc 1 942 6 view .LVU346
 1225 0006 202B     		cmp	r3, #32
 1226 0008 16D1     		bne	.L82
 944:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 1227              		.loc 1 944 5 is_stmt 1 view .LVU347
 944:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 1228              		.loc 1 944 8 is_stmt 0 view .LVU348
 1229 000a B9B1     		cbz	r1, .L83
 944:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 1230              		.loc 1 944 25 discriminator 1 view .LVU349
 1231 000c C2B1     		cbz	r2, .L84
 950:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1232              		.loc 1 950 5 is_stmt 1 view .LVU350
 950:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1233              		.loc 1 950 5 view .LVU351
 1234 000e 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2
 1235 0012 012B     		cmp	r3, #1
 1236 0014 16D0     		beq	.L85
 950:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1237              		.loc 1 950 5 discriminator 2 view .LVU352
ARM GAS  /tmp/ccN5ASm9.s 			page 75


 950:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1238              		.loc 1 950 5 discriminator 2 view .LVU353
 952:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->TxXferSize = Size;
 1239              		.loc 1 952 5 discriminator 2 view .LVU354
 952:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->TxXferSize = Size;
 1240              		.loc 1 952 23 is_stmt 0 discriminator 2 view .LVU355
 1241 0016 C161     		str	r1, [r0, #28]
 953:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->TxXferCount = Size;
 1242              		.loc 1 953 5 is_stmt 1 discriminator 2 view .LVU356
 953:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->TxXferCount = Size;
 1243              		.loc 1 953 23 is_stmt 0 discriminator 2 view .LVU357
 1244 0018 0284     		strh	r2, [r0, #32]	@ movhi
 954:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1245              		.loc 1 954 5 is_stmt 1 discriminator 2 view .LVU358
 954:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1246              		.loc 1 954 24 is_stmt 0 discriminator 2 view .LVU359
 1247 001a 4284     		strh	r2, [r0, #34]	@ movhi
 956:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->gState = HAL_IRDA_STATE_BUSY_TX;
 1248              		.loc 1 956 5 is_stmt 1 discriminator 2 view .LVU360
 956:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->gState = HAL_IRDA_STATE_BUSY_TX;
 1249              		.loc 1 956 22 is_stmt 0 discriminator 2 view .LVU361
 1250 001c 0023     		movs	r3, #0
 1251 001e 8363     		str	r3, [r0, #56]
 957:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1252              		.loc 1 957 5 is_stmt 1 discriminator 2 view .LVU362
 957:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1253              		.loc 1 957 19 is_stmt 0 discriminator 2 view .LVU363
 1254 0020 2122     		movs	r2, #33
 1255              	.LVL88:
 957:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1256              		.loc 1 957 19 discriminator 2 view .LVU364
 1257 0022 80F83520 		strb	r2, [r0, #53]
 960:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1258              		.loc 1 960 5 is_stmt 1 discriminator 2 view .LVU365
 960:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1259              		.loc 1 960 5 discriminator 2 view .LVU366
 1260 0026 80F83430 		strb	r3, [r0, #52]
 960:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1261              		.loc 1 960 5 discriminator 2 view .LVU367
 963:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1262              		.loc 1 963 5 discriminator 2 view .LVU368
 1263 002a 0168     		ldr	r1, [r0]
 1264              	.LVL89:
 963:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1265              		.loc 1 963 5 is_stmt 0 discriminator 2 view .LVU369
 1266 002c CA68     		ldr	r2, [r1, #12]
 1267 002e 42F08002 		orr	r2, r2, #128
 1268 0032 CA60     		str	r2, [r1, #12]
 1269              	.LVL90:
 965:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 1270              		.loc 1 965 5 is_stmt 1 discriminator 2 view .LVU370
 965:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 1271              		.loc 1 965 12 is_stmt 0 discriminator 2 view .LVU371
 1272 0034 1846     		mov	r0, r3
 1273              	.LVL91:
 965:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 1274              		.loc 1 965 12 discriminator 2 view .LVU372
ARM GAS  /tmp/ccN5ASm9.s 			page 76


 1275 0036 7047     		bx	lr
 1276              	.LVL92:
 1277              	.L82:
 969:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 1278              		.loc 1 969 12 view .LVU373
 1279 0038 0220     		movs	r0, #2
 1280              	.LVL93:
 969:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 1281              		.loc 1 969 12 view .LVU374
 1282 003a 7047     		bx	lr
 1283              	.LVL94:
 1284              	.L83:
 946:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 1285              		.loc 1 946 14 view .LVU375
 1286 003c 0120     		movs	r0, #1
 1287              	.LVL95:
 946:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 1288              		.loc 1 946 14 view .LVU376
 1289 003e 7047     		bx	lr
 1290              	.LVL96:
 1291              	.L84:
 946:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 1292              		.loc 1 946 14 view .LVU377
 1293 0040 0120     		movs	r0, #1
 1294              	.LVL97:
 946:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 1295              		.loc 1 946 14 view .LVU378
 1296 0042 7047     		bx	lr
 1297              	.LVL98:
 1298              	.L85:
 950:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1299              		.loc 1 950 5 view .LVU379
 1300 0044 0220     		movs	r0, #2
 1301              	.LVL99:
 971:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1302              		.loc 1 971 1 view .LVU380
 1303 0046 7047     		bx	lr
 1304              		.cfi_endproc
 1305              	.LFE245:
 1307              		.section	.text.HAL_IRDA_Receive_IT,"ax",%progbits
 1308              		.align	1
 1309              		.global	HAL_IRDA_Receive_IT
 1310              		.syntax unified
 1311              		.thumb
 1312              		.thumb_func
 1313              		.fpu fpv4-sp-d16
 1315              	HAL_IRDA_Receive_IT:
 1316              	.LVL100:
 1317              	.LFB246:
 985:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Check that a Rx process is not already ongoing */
 1318              		.loc 1 985 1 is_stmt 1 view -0
 1319              		.cfi_startproc
 1320              		@ args = 0, pretend = 0, frame = 0
 1321              		@ frame_needed = 0, uses_anonymous_args = 0
 1322              		@ link register save eliminated.
 987:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 1323              		.loc 1 987 3 view .LVU382
ARM GAS  /tmp/ccN5ASm9.s 			page 77


 987:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 1324              		.loc 1 987 12 is_stmt 0 view .LVU383
 1325 0000 90F83630 		ldrb	r3, [r0, #54]	@ zero_extendqisi2
 1326 0004 DBB2     		uxtb	r3, r3
 987:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 1327              		.loc 1 987 6 view .LVU384
 1328 0006 202B     		cmp	r3, #32
 1329 0008 23D1     		bne	.L90
 989:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 1330              		.loc 1 989 5 is_stmt 1 view .LVU385
 989:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 1331              		.loc 1 989 8 is_stmt 0 view .LVU386
 1332 000a 21B3     		cbz	r1, .L91
 989:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 1333              		.loc 1 989 25 discriminator 1 view .LVU387
 1334 000c 2AB3     		cbz	r2, .L92
 995:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1335              		.loc 1 995 5 is_stmt 1 view .LVU388
 995:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1336              		.loc 1 995 5 view .LVU389
 1337 000e 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2
 1338 0012 012B     		cmp	r3, #1
 1339 0014 23D0     		beq	.L93
 995:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1340              		.loc 1 995 5 discriminator 2 view .LVU390
 995:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1341              		.loc 1 995 5 discriminator 2 view .LVU391
 997:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->RxXferSize = Size;
 1342              		.loc 1 997 5 discriminator 2 view .LVU392
 997:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->RxXferSize = Size;
 1343              		.loc 1 997 23 is_stmt 0 discriminator 2 view .LVU393
 1344 0016 4162     		str	r1, [r0, #36]
 998:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->RxXferCount = Size;
 1345              		.loc 1 998 5 is_stmt 1 discriminator 2 view .LVU394
 998:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->RxXferCount = Size;
 1346              		.loc 1 998 23 is_stmt 0 discriminator 2 view .LVU395
 1347 0018 0285     		strh	r2, [r0, #40]	@ movhi
 999:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1348              		.loc 1 999 5 is_stmt 1 discriminator 2 view .LVU396
 999:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1349              		.loc 1 999 24 is_stmt 0 discriminator 2 view .LVU397
 1350 001a 4285     		strh	r2, [r0, #42]	@ movhi
1001:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_BUSY_RX;
 1351              		.loc 1 1001 5 is_stmt 1 discriminator 2 view .LVU398
1001:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_BUSY_RX;
 1352              		.loc 1 1001 22 is_stmt 0 discriminator 2 view .LVU399
 1353 001c 0023     		movs	r3, #0
 1354 001e 8363     		str	r3, [r0, #56]
1002:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1355              		.loc 1 1002 5 is_stmt 1 discriminator 2 view .LVU400
1002:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1356              		.loc 1 1002 20 is_stmt 0 discriminator 2 view .LVU401
 1357 0020 2222     		movs	r2, #34
 1358              	.LVL101:
1002:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1359              		.loc 1 1002 20 discriminator 2 view .LVU402
 1360 0022 80F83620 		strb	r2, [r0, #54]
ARM GAS  /tmp/ccN5ASm9.s 			page 78


1005:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1361              		.loc 1 1005 5 is_stmt 1 discriminator 2 view .LVU403
1005:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1362              		.loc 1 1005 5 discriminator 2 view .LVU404
 1363 0026 80F83430 		strb	r3, [r0, #52]
1005:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1364              		.loc 1 1005 5 discriminator 2 view .LVU405
1007:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 1365              		.loc 1 1007 5 discriminator 2 view .LVU406
1007:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 1366              		.loc 1 1007 20 is_stmt 0 discriminator 2 view .LVU407
 1367 002a C368     		ldr	r3, [r0, #12]
1007:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 1368              		.loc 1 1007 8 discriminator 2 view .LVU408
 1369 002c 5BB1     		cbz	r3, .L88
1010:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 1370              		.loc 1 1010 7 is_stmt 1 view .LVU409
 1371 002e 0268     		ldr	r2, [r0]
 1372 0030 D368     		ldr	r3, [r2, #12]
 1373 0032 43F49073 		orr	r3, r3, #288
 1374 0036 D360     		str	r3, [r2, #12]
 1375              	.LVL102:
 1376              	.L89:
1019:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1377              		.loc 1 1019 5 view .LVU410
 1378 0038 0268     		ldr	r2, [r0]
 1379 003a 5369     		ldr	r3, [r2, #20]
 1380 003c 43F00103 		orr	r3, r3, #1
 1381 0040 5361     		str	r3, [r2, #20]
1021:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 1382              		.loc 1 1021 5 view .LVU411
1021:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 1383              		.loc 1 1021 12 is_stmt 0 view .LVU412
 1384 0042 0020     		movs	r0, #0
 1385              	.LVL103:
1021:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 1386              		.loc 1 1021 12 view .LVU413
 1387 0044 7047     		bx	lr
 1388              	.LVL104:
 1389              	.L88:
1015:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 1390              		.loc 1 1015 8 is_stmt 1 view .LVU414
 1391 0046 0268     		ldr	r2, [r0]
 1392 0048 D368     		ldr	r3, [r2, #12]
 1393 004a 43F02003 		orr	r3, r3, #32
 1394 004e D360     		str	r3, [r2, #12]
 1395              	.LVL105:
1015:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 1396              		.loc 1 1015 8 is_stmt 0 view .LVU415
 1397 0050 F2E7     		b	.L89
 1398              	.LVL106:
 1399              	.L90:
1025:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 1400              		.loc 1 1025 12 view .LVU416
 1401 0052 0220     		movs	r0, #2
 1402              	.LVL107:
1025:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
ARM GAS  /tmp/ccN5ASm9.s 			page 79


 1403              		.loc 1 1025 12 view .LVU417
 1404 0054 7047     		bx	lr
 1405              	.LVL108:
 1406              	.L91:
 991:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 1407              		.loc 1 991 14 view .LVU418
 1408 0056 0120     		movs	r0, #1
 1409              	.LVL109:
 991:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 1410              		.loc 1 991 14 view .LVU419
 1411 0058 7047     		bx	lr
 1412              	.LVL110:
 1413              	.L92:
 991:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 1414              		.loc 1 991 14 view .LVU420
 1415 005a 0120     		movs	r0, #1
 1416              	.LVL111:
 991:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 1417              		.loc 1 991 14 view .LVU421
 1418 005c 7047     		bx	lr
 1419              	.LVL112:
 1420              	.L93:
 995:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1421              		.loc 1 995 5 view .LVU422
 1422 005e 0220     		movs	r0, #2
 1423              	.LVL113:
1027:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1424              		.loc 1 1027 1 view .LVU423
 1425 0060 7047     		bx	lr
 1426              		.cfi_endproc
 1427              	.LFE246:
 1429              		.section	.text.HAL_IRDA_Transmit_DMA,"ax",%progbits
 1430              		.align	1
 1431              		.global	HAL_IRDA_Transmit_DMA
 1432              		.syntax unified
 1433              		.thumb
 1434              		.thumb_func
 1435              		.fpu fpv4-sp-d16
 1437              	HAL_IRDA_Transmit_DMA:
 1438              	.LVL114:
 1439              	.LFB247:
1041:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   const uint32_t *tmp;
 1440              		.loc 1 1041 1 is_stmt 1 view -0
 1441              		.cfi_startproc
 1442              		@ args = 0, pretend = 0, frame = 0
 1443              		@ frame_needed = 0, uses_anonymous_args = 0
1041:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   const uint32_t *tmp;
 1444              		.loc 1 1041 1 is_stmt 0 view .LVU425
 1445 0000 38B5     		push	{r3, r4, r5, lr}
 1446              	.LCFI14:
 1447              		.cfi_def_cfa_offset 16
 1448              		.cfi_offset 3, -16
 1449              		.cfi_offset 4, -12
 1450              		.cfi_offset 5, -8
 1451              		.cfi_offset 14, -4
 1452 0002 1346     		mov	r3, r2
1042:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
ARM GAS  /tmp/ccN5ASm9.s 			page 80


 1453              		.loc 1 1042 3 is_stmt 1 view .LVU426
1045:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 1454              		.loc 1 1045 3 view .LVU427
1045:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 1455              		.loc 1 1045 12 is_stmt 0 view .LVU428
 1456 0004 90F83520 		ldrb	r2, [r0, #53]	@ zero_extendqisi2
 1457              	.LVL115:
1045:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 1458              		.loc 1 1045 12 view .LVU429
 1459 0008 D2B2     		uxtb	r2, r2
1045:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 1460              		.loc 1 1045 6 view .LVU430
 1461 000a 202A     		cmp	r2, #32
 1462 000c 3BD1     		bne	.L97
 1463 000e 0446     		mov	r4, r0
1047:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 1464              		.loc 1 1047 5 is_stmt 1 view .LVU431
1047:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 1465              		.loc 1 1047 8 is_stmt 0 view .LVU432
 1466 0010 0029     		cmp	r1, #0
 1467 0012 3AD0     		beq	.L98
1047:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 1468              		.loc 1 1047 25 discriminator 1 view .LVU433
 1469 0014 002B     		cmp	r3, #0
 1470 0016 3AD0     		beq	.L99
1053:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1471              		.loc 1 1053 5 is_stmt 1 view .LVU434
1053:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1472              		.loc 1 1053 5 view .LVU435
 1473 0018 90F83420 		ldrb	r2, [r0, #52]	@ zero_extendqisi2
 1474 001c 012A     		cmp	r2, #1
 1475 001e 38D0     		beq	.L100
1053:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1476              		.loc 1 1053 5 discriminator 2 view .LVU436
 1477 0020 0122     		movs	r2, #1
 1478 0022 80F83420 		strb	r2, [r0, #52]
1053:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1479              		.loc 1 1053 5 discriminator 2 view .LVU437
1055:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->TxXferSize = Size;
 1480              		.loc 1 1055 5 discriminator 2 view .LVU438
1055:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->TxXferSize = Size;
 1481              		.loc 1 1055 23 is_stmt 0 discriminator 2 view .LVU439
 1482 0026 C161     		str	r1, [r0, #28]
1056:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->TxXferCount = Size;
 1483              		.loc 1 1056 5 is_stmt 1 discriminator 2 view .LVU440
1056:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->TxXferCount = Size;
 1484              		.loc 1 1056 23 is_stmt 0 discriminator 2 view .LVU441
 1485 0028 0384     		strh	r3, [r0, #32]	@ movhi
1057:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1486              		.loc 1 1057 5 is_stmt 1 discriminator 2 view .LVU442
1057:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1487              		.loc 1 1057 24 is_stmt 0 discriminator 2 view .LVU443
 1488 002a 4384     		strh	r3, [r0, #34]	@ movhi
1059:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->gState = HAL_IRDA_STATE_BUSY_TX;
 1489              		.loc 1 1059 5 is_stmt 1 discriminator 2 view .LVU444
1059:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->gState = HAL_IRDA_STATE_BUSY_TX;
 1490              		.loc 1 1059 22 is_stmt 0 discriminator 2 view .LVU445
ARM GAS  /tmp/ccN5ASm9.s 			page 81


 1491 002c 0022     		movs	r2, #0
 1492 002e 8263     		str	r2, [r0, #56]
1060:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1493              		.loc 1 1060 5 is_stmt 1 discriminator 2 view .LVU446
1060:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1494              		.loc 1 1060 19 is_stmt 0 discriminator 2 view .LVU447
 1495 0030 2120     		movs	r0, #33
 1496              	.LVL116:
1060:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1497              		.loc 1 1060 19 discriminator 2 view .LVU448
 1498 0032 84F83500 		strb	r0, [r4, #53]
1063:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1499              		.loc 1 1063 5 is_stmt 1 discriminator 2 view .LVU449
1063:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1500              		.loc 1 1063 10 is_stmt 0 discriminator 2 view .LVU450
 1501 0036 E06A     		ldr	r0, [r4, #44]
1063:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1502              		.loc 1 1063 37 discriminator 2 view .LVU451
 1503 0038 174D     		ldr	r5, .L102
 1504 003a C563     		str	r5, [r0, #60]
1066:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1505              		.loc 1 1066 5 is_stmt 1 discriminator 2 view .LVU452
1066:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1506              		.loc 1 1066 10 is_stmt 0 discriminator 2 view .LVU453
 1507 003c E06A     		ldr	r0, [r4, #44]
1066:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1508              		.loc 1 1066 41 discriminator 2 view .LVU454
 1509 003e 174D     		ldr	r5, .L102+4
 1510 0040 0564     		str	r5, [r0, #64]
1069:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1511              		.loc 1 1069 5 is_stmt 1 discriminator 2 view .LVU455
1069:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1512              		.loc 1 1069 10 is_stmt 0 discriminator 2 view .LVU456
 1513 0042 E06A     		ldr	r0, [r4, #44]
1069:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1514              		.loc 1 1069 38 discriminator 2 view .LVU457
 1515 0044 164D     		ldr	r5, .L102+8
 1516 0046 C564     		str	r5, [r0, #76]
1072:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1517              		.loc 1 1072 5 is_stmt 1 discriminator 2 view .LVU458
1072:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1518              		.loc 1 1072 10 is_stmt 0 discriminator 2 view .LVU459
 1519 0048 E06A     		ldr	r0, [r4, #44]
1072:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1520              		.loc 1 1072 38 discriminator 2 view .LVU460
 1521 004a 0265     		str	r2, [r0, #80]
1075:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     if (HAL_DMA_Start_IT(hirda->hdmatx, *(const uint32_t *)tmp, (uint32_t)&hirda->Instance->DR, Siz
 1522              		.loc 1 1075 5 is_stmt 1 discriminator 2 view .LVU461
 1523              	.LVL117:
1076:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 1524              		.loc 1 1076 5 discriminator 2 view .LVU462
1076:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 1525              		.loc 1 1076 81 is_stmt 0 discriminator 2 view .LVU463
 1526 004c 2268     		ldr	r2, [r4]
1076:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 1527              		.loc 1 1076 9 discriminator 2 view .LVU464
 1528 004e 0432     		adds	r2, r2, #4
ARM GAS  /tmp/ccN5ASm9.s 			page 82


 1529 0050 E06A     		ldr	r0, [r4, #44]
 1530 0052 FFF7FEFF 		bl	HAL_DMA_Start_IT
 1531              	.LVL118:
1076:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 1532              		.loc 1 1076 8 discriminator 2 view .LVU465
 1533 0056 60B9     		cbnz	r0, .L96
1079:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1534              		.loc 1 1079 7 is_stmt 1 view .LVU466
 1535 0058 2368     		ldr	r3, [r4]
 1536 005a 6FF04002 		mvn	r2, #64
 1537 005e 1A60     		str	r2, [r3]
1082:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1538              		.loc 1 1082 7 view .LVU467
1082:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1539              		.loc 1 1082 7 view .LVU468
 1540 0060 0023     		movs	r3, #0
 1541 0062 84F83430 		strb	r3, [r4, #52]
1082:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1542              		.loc 1 1082 7 view .LVU469
1086:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1543              		.loc 1 1086 7 view .LVU470
 1544 0066 2268     		ldr	r2, [r4]
 1545 0068 5369     		ldr	r3, [r2, #20]
 1546 006a 43F08003 		orr	r3, r3, #128
 1547 006e 5361     		str	r3, [r2, #20]
1088:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 1548              		.loc 1 1088 7 view .LVU471
1088:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 1549              		.loc 1 1088 14 is_stmt 0 view .LVU472
 1550 0070 0AE0     		b	.L95
 1551              	.L96:
1093:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1552              		.loc 1 1093 7 is_stmt 1 view .LVU473
1093:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1553              		.loc 1 1093 24 is_stmt 0 view .LVU474
 1554 0072 1023     		movs	r3, #16
 1555 0074 A363     		str	r3, [r4, #56]
1096:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1556              		.loc 1 1096 7 is_stmt 1 view .LVU475
1096:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1557              		.loc 1 1096 7 view .LVU476
 1558 0076 0023     		movs	r3, #0
 1559 0078 84F83430 		strb	r3, [r4, #52]
1096:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1560              		.loc 1 1096 7 view .LVU477
1099:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1561              		.loc 1 1099 7 view .LVU478
1099:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1562              		.loc 1 1099 21 is_stmt 0 view .LVU479
 1563 007c 2023     		movs	r3, #32
 1564 007e 84F83530 		strb	r3, [r4, #53]
1101:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 1565              		.loc 1 1101 7 is_stmt 1 view .LVU480
1101:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 1566              		.loc 1 1101 14 is_stmt 0 view .LVU481
 1567 0082 0120     		movs	r0, #1
 1568 0084 00E0     		b	.L95
ARM GAS  /tmp/ccN5ASm9.s 			page 83


 1569              	.LVL119:
 1570              	.L97:
1106:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 1571              		.loc 1 1106 12 view .LVU482
 1572 0086 0220     		movs	r0, #2
 1573              	.LVL120:
 1574              	.L95:
1108:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1575              		.loc 1 1108 1 view .LVU483
 1576 0088 38BD     		pop	{r3, r4, r5, pc}
 1577              	.LVL121:
 1578              	.L98:
1049:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 1579              		.loc 1 1049 14 view .LVU484
 1580 008a 0120     		movs	r0, #1
 1581              	.LVL122:
1049:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 1582              		.loc 1 1049 14 view .LVU485
 1583 008c FCE7     		b	.L95
 1584              	.LVL123:
 1585              	.L99:
1049:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 1586              		.loc 1 1049 14 view .LVU486
 1587 008e 0120     		movs	r0, #1
 1588              	.LVL124:
1049:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 1589              		.loc 1 1049 14 view .LVU487
 1590 0090 FAE7     		b	.L95
 1591              	.LVL125:
 1592              	.L100:
1053:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1593              		.loc 1 1053 5 view .LVU488
 1594 0092 0220     		movs	r0, #2
 1595              	.LVL126:
1053:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1596              		.loc 1 1053 5 view .LVU489
 1597 0094 F8E7     		b	.L95
 1598              	.L103:
 1599 0096 00BF     		.align	2
 1600              	.L102:
 1601 0098 00000000 		.word	IRDA_DMATransmitCplt
 1602 009c 00000000 		.word	IRDA_DMATransmitHalfCplt
 1603 00a0 00000000 		.word	IRDA_DMAError
 1604              		.cfi_endproc
 1605              	.LFE247:
 1607              		.section	.text.HAL_IRDA_Receive_DMA,"ax",%progbits
 1608              		.align	1
 1609              		.global	HAL_IRDA_Receive_DMA
 1610              		.syntax unified
 1611              		.thumb
 1612              		.thumb_func
 1613              		.fpu fpv4-sp-d16
 1615              	HAL_IRDA_Receive_DMA:
 1616              	.LVL127:
 1617              	.LFB248:
1123:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   uint32_t *tmp;
 1618              		.loc 1 1123 1 is_stmt 1 view -0
ARM GAS  /tmp/ccN5ASm9.s 			page 84


 1619              		.cfi_startproc
 1620              		@ args = 0, pretend = 0, frame = 8
 1621              		@ frame_needed = 0, uses_anonymous_args = 0
1123:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   uint32_t *tmp;
 1622              		.loc 1 1123 1 is_stmt 0 view .LVU491
 1623 0000 1346     		mov	r3, r2
1124:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1624              		.loc 1 1124 3 is_stmt 1 view .LVU492
1127:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 1625              		.loc 1 1127 3 view .LVU493
1127:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 1626              		.loc 1 1127 12 is_stmt 0 view .LVU494
 1627 0002 90F83620 		ldrb	r2, [r0, #54]	@ zero_extendqisi2
 1628              	.LVL128:
1127:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 1629              		.loc 1 1127 12 view .LVU495
 1630 0006 D2B2     		uxtb	r2, r2
1127:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 1631              		.loc 1 1127 6 view .LVU496
 1632 0008 202A     		cmp	r2, #32
 1633 000a 4BD1     		bne	.L108
1123:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   uint32_t *tmp;
 1634              		.loc 1 1123 1 view .LVU497
 1635 000c 30B5     		push	{r4, r5, lr}
 1636              	.LCFI15:
 1637              		.cfi_def_cfa_offset 12
 1638              		.cfi_offset 4, -12
 1639              		.cfi_offset 5, -8
 1640              		.cfi_offset 14, -4
 1641 000e 83B0     		sub	sp, sp, #12
 1642              	.LCFI16:
 1643              		.cfi_def_cfa_offset 24
 1644 0010 0446     		mov	r4, r0
1129:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 1645              		.loc 1 1129 5 is_stmt 1 view .LVU498
1129:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 1646              		.loc 1 1129 8 is_stmt 0 view .LVU499
 1647 0012 0029     		cmp	r1, #0
 1648 0014 48D0     		beq	.L109
1129:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 1649              		.loc 1 1129 25 discriminator 1 view .LVU500
 1650 0016 002B     		cmp	r3, #0
 1651 0018 48D0     		beq	.L110
1135:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1652              		.loc 1 1135 5 is_stmt 1 view .LVU501
1135:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1653              		.loc 1 1135 5 view .LVU502
 1654 001a 90F83420 		ldrb	r2, [r0, #52]	@ zero_extendqisi2
 1655 001e 012A     		cmp	r2, #1
 1656 0020 47D0     		beq	.L111
1135:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1657              		.loc 1 1135 5 discriminator 2 view .LVU503
 1658 0022 0122     		movs	r2, #1
 1659 0024 80F83420 		strb	r2, [r0, #52]
1135:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1660              		.loc 1 1135 5 discriminator 2 view .LVU504
1137:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->RxXferSize = Size;
ARM GAS  /tmp/ccN5ASm9.s 			page 85


 1661              		.loc 1 1137 5 discriminator 2 view .LVU505
1137:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->RxXferSize = Size;
 1662              		.loc 1 1137 23 is_stmt 0 discriminator 2 view .LVU506
 1663 0028 4162     		str	r1, [r0, #36]
1138:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1664              		.loc 1 1138 5 is_stmt 1 discriminator 2 view .LVU507
1138:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1665              		.loc 1 1138 23 is_stmt 0 discriminator 2 view .LVU508
 1666 002a 0385     		strh	r3, [r0, #40]	@ movhi
1140:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_BUSY_RX;
 1667              		.loc 1 1140 5 is_stmt 1 discriminator 2 view .LVU509
1140:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_BUSY_RX;
 1668              		.loc 1 1140 22 is_stmt 0 discriminator 2 view .LVU510
 1669 002c 0022     		movs	r2, #0
 1670 002e 8263     		str	r2, [r0, #56]
1141:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1671              		.loc 1 1141 5 is_stmt 1 discriminator 2 view .LVU511
1141:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1672              		.loc 1 1141 20 is_stmt 0 discriminator 2 view .LVU512
 1673 0030 2220     		movs	r0, #34
 1674              	.LVL129:
1141:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1675              		.loc 1 1141 20 discriminator 2 view .LVU513
 1676 0032 84F83600 		strb	r0, [r4, #54]
1144:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1677              		.loc 1 1144 5 is_stmt 1 discriminator 2 view .LVU514
1144:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1678              		.loc 1 1144 10 is_stmt 0 discriminator 2 view .LVU515
 1679 0036 206B     		ldr	r0, [r4, #48]
1144:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1680              		.loc 1 1144 37 discriminator 2 view .LVU516
 1681 0038 1F4D     		ldr	r5, .L116
 1682 003a C563     		str	r5, [r0, #60]
1147:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1683              		.loc 1 1147 5 is_stmt 1 discriminator 2 view .LVU517
1147:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1684              		.loc 1 1147 10 is_stmt 0 discriminator 2 view .LVU518
 1685 003c 206B     		ldr	r0, [r4, #48]
1147:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1686              		.loc 1 1147 41 discriminator 2 view .LVU519
 1687 003e 1F4D     		ldr	r5, .L116+4
 1688 0040 0564     		str	r5, [r0, #64]
1150:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1689              		.loc 1 1150 5 is_stmt 1 discriminator 2 view .LVU520
1150:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1690              		.loc 1 1150 10 is_stmt 0 discriminator 2 view .LVU521
 1691 0042 206B     		ldr	r0, [r4, #48]
1150:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1692              		.loc 1 1150 38 discriminator 2 view .LVU522
 1693 0044 1E4D     		ldr	r5, .L116+8
 1694 0046 C564     		str	r5, [r0, #76]
1153:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1695              		.loc 1 1153 5 is_stmt 1 discriminator 2 view .LVU523
1153:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1696              		.loc 1 1153 10 is_stmt 0 discriminator 2 view .LVU524
 1697 0048 206B     		ldr	r0, [r4, #48]
1153:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
ARM GAS  /tmp/ccN5ASm9.s 			page 86


 1698              		.loc 1 1153 38 discriminator 2 view .LVU525
 1699 004a 0265     		str	r2, [r0, #80]
1156:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     if (HAL_DMA_Start_IT(hirda->hdmarx, (uint32_t)&hirda->Instance->DR, *(uint32_t *)tmp, Size) == 
 1700              		.loc 1 1156 5 is_stmt 1 discriminator 2 view .LVU526
 1701              	.LVL130:
1157:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 1702              		.loc 1 1157 5 discriminator 2 view .LVU527
1157:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 1703              		.loc 1 1157 57 is_stmt 0 discriminator 2 view .LVU528
 1704 004c 2068     		ldr	r0, [r4]
1157:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 1705              		.loc 1 1157 9 discriminator 2 view .LVU529
 1706 004e 0A46     		mov	r2, r1
 1707 0050 011D     		adds	r1, r0, #4
 1708              	.LVL131:
1157:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 1709              		.loc 1 1157 9 discriminator 2 view .LVU530
 1710 0052 206B     		ldr	r0, [r4, #48]
 1711 0054 FFF7FEFF 		bl	HAL_DMA_Start_IT
 1712              	.LVL132:
1157:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 1713              		.loc 1 1157 8 discriminator 2 view .LVU531
 1714 0058 D0B9     		cbnz	r0, .L106
1160:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1715              		.loc 1 1160 7 is_stmt 1 view .LVU532
 1716              	.LBB2:
1160:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1717              		.loc 1 1160 7 view .LVU533
 1718 005a 0022     		movs	r2, #0
 1719 005c 0192     		str	r2, [sp, #4]
1160:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1720              		.loc 1 1160 7 view .LVU534
 1721 005e 2368     		ldr	r3, [r4]
 1722 0060 1968     		ldr	r1, [r3]
 1723 0062 0191     		str	r1, [sp, #4]
1160:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1724              		.loc 1 1160 7 view .LVU535
 1725 0064 5968     		ldr	r1, [r3, #4]
 1726 0066 0191     		str	r1, [sp, #4]
1160:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1727              		.loc 1 1160 7 view .LVU536
 1728 0068 0199     		ldr	r1, [sp, #4]
 1729              	.LBE2:
1160:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1730              		.loc 1 1160 7 view .LVU537
1163:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1731              		.loc 1 1163 7 view .LVU538
1163:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1732              		.loc 1 1163 7 view .LVU539
 1733 006a 84F83420 		strb	r2, [r4, #52]
1163:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1734              		.loc 1 1163 7 view .LVU540
1165:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
 1735              		.loc 1 1165 7 view .LVU541
1165:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
 1736              		.loc 1 1165 22 is_stmt 0 view .LVU542
 1737 006e E268     		ldr	r2, [r4, #12]
ARM GAS  /tmp/ccN5ASm9.s 			page 87


1165:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
 1738              		.loc 1 1165 10 view .LVU543
 1739 0070 1AB1     		cbz	r2, .L107
1168:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
 1740              		.loc 1 1168 9 is_stmt 1 view .LVU544
 1741 0072 DA68     		ldr	r2, [r3, #12]
 1742 0074 42F48072 		orr	r2, r2, #256
 1743 0078 DA60     		str	r2, [r3, #12]
 1744              	.L107:
1172:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1745              		.loc 1 1172 7 view .LVU545
 1746 007a 2268     		ldr	r2, [r4]
 1747 007c 5369     		ldr	r3, [r2, #20]
 1748 007e 43F00103 		orr	r3, r3, #1
 1749 0082 5361     		str	r3, [r2, #20]
1176:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1750              		.loc 1 1176 7 view .LVU546
 1751 0084 2268     		ldr	r2, [r4]
 1752 0086 5369     		ldr	r3, [r2, #20]
 1753 0088 43F04003 		orr	r3, r3, #64
 1754 008c 5361     		str	r3, [r2, #20]
1178:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 1755              		.loc 1 1178 7 view .LVU547
1178:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 1756              		.loc 1 1178 14 is_stmt 0 view .LVU548
 1757 008e 0EE0     		b	.L105
 1758              	.L106:
1183:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1759              		.loc 1 1183 7 is_stmt 1 view .LVU549
1183:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1760              		.loc 1 1183 24 is_stmt 0 view .LVU550
 1761 0090 1023     		movs	r3, #16
 1762 0092 A363     		str	r3, [r4, #56]
1186:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1763              		.loc 1 1186 7 is_stmt 1 view .LVU551
1186:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1764              		.loc 1 1186 7 view .LVU552
 1765 0094 0023     		movs	r3, #0
 1766 0096 84F83430 		strb	r3, [r4, #52]
1186:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1767              		.loc 1 1186 7 view .LVU553
1189:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1768              		.loc 1 1189 7 view .LVU554
1189:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1769              		.loc 1 1189 22 is_stmt 0 view .LVU555
 1770 009a 2023     		movs	r3, #32
 1771 009c 84F83630 		strb	r3, [r4, #54]
1191:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 1772              		.loc 1 1191 7 is_stmt 1 view .LVU556
1191:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 1773              		.loc 1 1191 14 is_stmt 0 view .LVU557
 1774 00a0 0120     		movs	r0, #1
 1775 00a2 04E0     		b	.L105
 1776              	.LVL133:
 1777              	.L108:
 1778              	.LCFI17:
 1779              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccN5ASm9.s 			page 88


 1780              		.cfi_restore 4
 1781              		.cfi_restore 5
 1782              		.cfi_restore 14
1196:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 1783              		.loc 1 1196 12 view .LVU558
 1784 00a4 0220     		movs	r0, #2
 1785              	.LVL134:
1198:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1786              		.loc 1 1198 1 view .LVU559
 1787 00a6 7047     		bx	lr
 1788              	.LVL135:
 1789              	.L109:
 1790              	.LCFI18:
 1791              		.cfi_def_cfa_offset 24
 1792              		.cfi_offset 4, -12
 1793              		.cfi_offset 5, -8
 1794              		.cfi_offset 14, -4
1131:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 1795              		.loc 1 1131 14 view .LVU560
 1796 00a8 0120     		movs	r0, #1
 1797              	.LVL136:
1131:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 1798              		.loc 1 1131 14 view .LVU561
 1799 00aa 00E0     		b	.L105
 1800              	.LVL137:
 1801              	.L110:
1131:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 1802              		.loc 1 1131 14 view .LVU562
 1803 00ac 0120     		movs	r0, #1
 1804              	.LVL138:
 1805              	.L105:
1198:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1806              		.loc 1 1198 1 view .LVU563
 1807 00ae 03B0     		add	sp, sp, #12
 1808              	.LCFI19:
 1809              		.cfi_remember_state
 1810              		.cfi_def_cfa_offset 12
 1811              		@ sp needed
 1812 00b0 30BD     		pop	{r4, r5, pc}
 1813              	.LVL139:
 1814              	.L111:
 1815              	.LCFI20:
 1816              		.cfi_restore_state
1135:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1817              		.loc 1 1135 5 view .LVU564
 1818 00b2 0220     		movs	r0, #2
 1819              	.LVL140:
1135:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1820              		.loc 1 1135 5 view .LVU565
 1821 00b4 FBE7     		b	.L105
 1822              	.L117:
 1823 00b6 00BF     		.align	2
 1824              	.L116:
 1825 00b8 00000000 		.word	IRDA_DMAReceiveCplt
 1826 00bc 00000000 		.word	IRDA_DMAReceiveHalfCplt
 1827 00c0 00000000 		.word	IRDA_DMAError
 1828              		.cfi_endproc
ARM GAS  /tmp/ccN5ASm9.s 			page 89


 1829              	.LFE248:
 1831              		.section	.text.HAL_IRDA_DMAPause,"ax",%progbits
 1832              		.align	1
 1833              		.global	HAL_IRDA_DMAPause
 1834              		.syntax unified
 1835              		.thumb
 1836              		.thumb_func
 1837              		.fpu fpv4-sp-d16
 1839              	HAL_IRDA_DMAPause:
 1840              	.LVL141:
 1841              	.LFB249:
1207:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   uint32_t dmarequest = 0x00U;
 1842              		.loc 1 1207 1 is_stmt 1 view -0
 1843              		.cfi_startproc
 1844              		@ args = 0, pretend = 0, frame = 0
 1845              		@ frame_needed = 0, uses_anonymous_args = 0
 1846              		@ link register save eliminated.
1208:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1847              		.loc 1 1208 3 view .LVU567
1211:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1848              		.loc 1 1211 3 view .LVU568
1211:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1849              		.loc 1 1211 3 view .LVU569
 1850 0000 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2
 1851 0004 012B     		cmp	r3, #1
 1852 0006 31D0     		beq	.L122
1211:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1853              		.loc 1 1211 3 discriminator 2 view .LVU570
 1854 0008 0123     		movs	r3, #1
 1855 000a 80F83430 		strb	r3, [r0, #52]
1211:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1856              		.loc 1 1211 3 discriminator 2 view .LVU571
1213:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if ((hirda->gState == HAL_IRDA_STATE_BUSY_TX) && dmarequest)
 1857              		.loc 1 1213 3 discriminator 2 view .LVU572
1213:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if ((hirda->gState == HAL_IRDA_STATE_BUSY_TX) && dmarequest)
 1858              		.loc 1 1213 16 is_stmt 0 discriminator 2 view .LVU573
 1859 000e 0168     		ldr	r1, [r0]
 1860 0010 4A69     		ldr	r2, [r1, #20]
 1861 0012 02F08002 		and	r2, r2, #128
 1862              	.LVL142:
1214:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 1863              		.loc 1 1214 3 is_stmt 1 discriminator 2 view .LVU574
1214:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 1864              		.loc 1 1214 13 is_stmt 0 discriminator 2 view .LVU575
 1865 0016 90F83530 		ldrb	r3, [r0, #53]	@ zero_extendqisi2
 1866 001a DBB2     		uxtb	r3, r3
1214:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 1867              		.loc 1 1214 6 discriminator 2 view .LVU576
 1868 001c 212B     		cmp	r3, #33
 1869 001e 0DD0     		beq	.L123
 1870              	.L120:
1220:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if ((hirda->RxState == HAL_IRDA_STATE_BUSY_RX) && dmarequest)
 1871              		.loc 1 1220 3 is_stmt 1 view .LVU577
1220:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if ((hirda->RxState == HAL_IRDA_STATE_BUSY_RX) && dmarequest)
 1872              		.loc 1 1220 16 is_stmt 0 view .LVU578
 1873 0020 0168     		ldr	r1, [r0]
 1874 0022 4A69     		ldr	r2, [r1, #20]
ARM GAS  /tmp/ccN5ASm9.s 			page 90


 1875              	.LVL143:
1220:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if ((hirda->RxState == HAL_IRDA_STATE_BUSY_RX) && dmarequest)
 1876              		.loc 1 1220 16 view .LVU579
 1877 0024 02F04002 		and	r2, r2, #64
 1878              	.LVL144:
1221:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 1879              		.loc 1 1221 3 is_stmt 1 view .LVU580
1221:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 1880              		.loc 1 1221 13 is_stmt 0 view .LVU581
 1881 0028 90F83630 		ldrb	r3, [r0, #54]	@ zero_extendqisi2
 1882 002c DBB2     		uxtb	r3, r3
1221:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 1883              		.loc 1 1221 6 view .LVU582
 1884 002e 222B     		cmp	r3, #34
 1885 0030 0BD0     		beq	.L124
 1886              	.LVL145:
 1887              	.L121:
1232:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1888              		.loc 1 1232 3 is_stmt 1 view .LVU583
1232:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1889              		.loc 1 1232 3 view .LVU584
 1890 0032 0023     		movs	r3, #0
 1891 0034 80F83430 		strb	r3, [r0, #52]
1232:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1892              		.loc 1 1232 3 view .LVU585
1234:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
 1893              		.loc 1 1234 3 view .LVU586
1234:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
 1894              		.loc 1 1234 10 is_stmt 0 view .LVU587
 1895 0038 1846     		mov	r0, r3
 1896              	.LVL146:
1234:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
 1897              		.loc 1 1234 10 view .LVU588
 1898 003a 7047     		bx	lr
 1899              	.LVL147:
 1900              	.L123:
1214:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 1901              		.loc 1 1214 49 discriminator 1 view .LVU589
 1902 003c 002A     		cmp	r2, #0
 1903 003e EFD0     		beq	.L120
1217:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 1904              		.loc 1 1217 5 is_stmt 1 view .LVU590
 1905 0040 4B69     		ldr	r3, [r1, #20]
 1906 0042 23F08003 		bic	r3, r3, #128
 1907 0046 4B61     		str	r3, [r1, #20]
 1908 0048 EAE7     		b	.L120
 1909              	.L124:
1221:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 1910              		.loc 1 1221 50 is_stmt 0 discriminator 1 view .LVU591
 1911 004a 002A     		cmp	r2, #0
 1912 004c F1D0     		beq	.L121
1224:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 1913              		.loc 1 1224 5 is_stmt 1 view .LVU592
 1914 004e CB68     		ldr	r3, [r1, #12]
 1915 0050 23F48073 		bic	r3, r3, #256
 1916 0054 CB60     		str	r3, [r1, #12]
1225:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
ARM GAS  /tmp/ccN5ASm9.s 			page 91


 1917              		.loc 1 1225 5 view .LVU593
 1918 0056 0268     		ldr	r2, [r0]
 1919              	.LVL148:
1225:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1920              		.loc 1 1225 5 is_stmt 0 view .LVU594
 1921 0058 5369     		ldr	r3, [r2, #20]
 1922 005a 23F00103 		bic	r3, r3, #1
 1923 005e 5361     		str	r3, [r2, #20]
1228:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 1924              		.loc 1 1228 5 is_stmt 1 view .LVU595
 1925 0060 0268     		ldr	r2, [r0]
 1926 0062 5369     		ldr	r3, [r2, #20]
 1927 0064 23F04003 		bic	r3, r3, #64
 1928 0068 5361     		str	r3, [r2, #20]
 1929 006a E2E7     		b	.L121
 1930              	.LVL149:
 1931              	.L122:
1211:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1932              		.loc 1 1211 3 is_stmt 0 view .LVU596
 1933 006c 0220     		movs	r0, #2
 1934              	.LVL150:
1235:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1935              		.loc 1 1235 1 view .LVU597
 1936 006e 7047     		bx	lr
 1937              		.cfi_endproc
 1938              	.LFE249:
 1940              		.section	.text.HAL_IRDA_DMAResume,"ax",%progbits
 1941              		.align	1
 1942              		.global	HAL_IRDA_DMAResume
 1943              		.syntax unified
 1944              		.thumb
 1945              		.thumb_func
 1946              		.fpu fpv4-sp-d16
 1948              	HAL_IRDA_DMAResume:
 1949              	.LVL151:
 1950              	.LFB250:
1244:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Process Locked */
 1951              		.loc 1 1244 1 is_stmt 1 view -0
 1952              		.cfi_startproc
 1953              		@ args = 0, pretend = 0, frame = 8
 1954              		@ frame_needed = 0, uses_anonymous_args = 0
 1955              		@ link register save eliminated.
1246:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1956              		.loc 1 1246 3 view .LVU599
1246:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1957              		.loc 1 1246 3 view .LVU600
 1958 0000 90F83430 		ldrb	r3, [r0, #52]	@ zero_extendqisi2
 1959 0004 012B     		cmp	r3, #1
 1960 0006 36D0     		beq	.L130
1246:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1961              		.loc 1 1246 3 discriminator 2 view .LVU601
 1962 0008 0123     		movs	r3, #1
 1963 000a 80F83430 		strb	r3, [r0, #52]
1246:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1964              		.loc 1 1246 3 discriminator 2 view .LVU602
1248:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 1965              		.loc 1 1248 3 discriminator 2 view .LVU603
ARM GAS  /tmp/ccN5ASm9.s 			page 92


1248:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 1966              		.loc 1 1248 12 is_stmt 0 discriminator 2 view .LVU604
 1967 000e 90F83530 		ldrb	r3, [r0, #53]	@ zero_extendqisi2
 1968 0012 DBB2     		uxtb	r3, r3
1248:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 1969              		.loc 1 1248 6 discriminator 2 view .LVU605
 1970 0014 212B     		cmp	r3, #33
 1971 0016 09D0     		beq	.L136
 1972              	.L127:
1254:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 1973              		.loc 1 1254 3 is_stmt 1 view .LVU606
1254:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 1974              		.loc 1 1254 12 is_stmt 0 view .LVU607
 1975 0018 90F83630 		ldrb	r3, [r0, #54]	@ zero_extendqisi2
 1976 001c DBB2     		uxtb	r3, r3
1254:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 1977              		.loc 1 1254 6 view .LVU608
 1978 001e 222B     		cmp	r3, #34
 1979 0020 0AD0     		beq	.L137
1271:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1980              		.loc 1 1271 3 is_stmt 1 view .LVU609
1271:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1981              		.loc 1 1271 3 view .LVU610
 1982 0022 0023     		movs	r3, #0
 1983 0024 80F83430 		strb	r3, [r0, #52]
1271:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1984              		.loc 1 1271 3 view .LVU611
1273:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
 1985              		.loc 1 1273 3 view .LVU612
1273:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
 1986              		.loc 1 1273 10 is_stmt 0 view .LVU613
 1987 0028 1846     		mov	r0, r3
 1988              	.LVL152:
1274:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 1989              		.loc 1 1274 1 view .LVU614
 1990 002a 7047     		bx	lr
 1991              	.LVL153:
 1992              	.L136:
1251:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 1993              		.loc 1 1251 5 is_stmt 1 view .LVU615
 1994 002c 0268     		ldr	r2, [r0]
 1995 002e 5369     		ldr	r3, [r2, #20]
 1996 0030 43F08003 		orr	r3, r3, #128
 1997 0034 5361     		str	r3, [r2, #20]
 1998 0036 EFE7     		b	.L127
 1999              	.L137:
1244:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Process Locked */
 2000              		.loc 1 1244 1 is_stmt 0 view .LVU616
 2001 0038 82B0     		sub	sp, sp, #8
 2002              	.LCFI21:
 2003              		.cfi_def_cfa_offset 8
1257:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2004              		.loc 1 1257 5 is_stmt 1 view .LVU617
 2005              	.LBB3:
1257:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2006              		.loc 1 1257 5 view .LVU618
 2007 003a 0023     		movs	r3, #0
ARM GAS  /tmp/ccN5ASm9.s 			page 93


 2008 003c 0193     		str	r3, [sp, #4]
1257:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2009              		.loc 1 1257 5 view .LVU619
 2010 003e 0368     		ldr	r3, [r0]
 2011 0040 1A68     		ldr	r2, [r3]
 2012 0042 0192     		str	r2, [sp, #4]
1257:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2013              		.loc 1 1257 5 view .LVU620
 2014 0044 5A68     		ldr	r2, [r3, #4]
 2015 0046 0192     		str	r2, [sp, #4]
1257:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2016              		.loc 1 1257 5 view .LVU621
 2017 0048 019A     		ldr	r2, [sp, #4]
 2018              	.LBE3:
1257:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2019              		.loc 1 1257 5 view .LVU622
1260:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {    
 2020              		.loc 1 1260 5 view .LVU623
1260:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {    
 2021              		.loc 1 1260 20 is_stmt 0 view .LVU624
 2022 004a C268     		ldr	r2, [r0, #12]
1260:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {    
 2023              		.loc 1 1260 8 view .LVU625
 2024 004c 1AB1     		cbz	r2, .L129
1262:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 2025              		.loc 1 1262 7 is_stmt 1 view .LVU626
 2026 004e DA68     		ldr	r2, [r3, #12]
 2027 0050 42F48072 		orr	r2, r2, #256
 2028 0054 DA60     		str	r2, [r3, #12]
 2029              	.L129:
1264:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2030              		.loc 1 1264 5 view .LVU627
 2031 0056 0268     		ldr	r2, [r0]
 2032 0058 5369     		ldr	r3, [r2, #20]
 2033 005a 43F00103 		orr	r3, r3, #1
 2034 005e 5361     		str	r3, [r2, #20]
1267:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 2035              		.loc 1 1267 5 view .LVU628
 2036 0060 0268     		ldr	r2, [r0]
 2037 0062 5369     		ldr	r3, [r2, #20]
 2038 0064 43F04003 		orr	r3, r3, #64
 2039 0068 5361     		str	r3, [r2, #20]
1271:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2040              		.loc 1 1271 3 view .LVU629
1271:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2041              		.loc 1 1271 3 view .LVU630
 2042 006a 0023     		movs	r3, #0
 2043 006c 80F83430 		strb	r3, [r0, #52]
1271:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2044              		.loc 1 1271 3 view .LVU631
1273:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
 2045              		.loc 1 1273 3 view .LVU632
1273:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
 2046              		.loc 1 1273 10 is_stmt 0 view .LVU633
 2047 0070 1846     		mov	r0, r3
 2048              	.LVL154:
1274:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
ARM GAS  /tmp/ccN5ASm9.s 			page 94


 2049              		.loc 1 1274 1 view .LVU634
 2050 0072 02B0     		add	sp, sp, #8
 2051              	.LCFI22:
 2052              		.cfi_def_cfa_offset 0
 2053              		@ sp needed
 2054 0074 7047     		bx	lr
 2055              	.LVL155:
 2056              	.L130:
1246:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2057              		.loc 1 1246 3 view .LVU635
 2058 0076 0220     		movs	r0, #2
 2059              	.LVL156:
1246:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2060              		.loc 1 1246 3 view .LVU636
 2061 0078 7047     		bx	lr
 2062              		.cfi_endproc
 2063              	.LFE250:
 2065              		.section	.text.HAL_IRDA_DMAStop,"ax",%progbits
 2066              		.align	1
 2067              		.global	HAL_IRDA_DMAStop
 2068              		.syntax unified
 2069              		.thumb
 2070              		.thumb_func
 2071              		.fpu fpv4-sp-d16
 2073              	HAL_IRDA_DMAStop:
 2074              	.LVL157:
 2075              	.LFB251:
1283:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   uint32_t dmarequest = 0x00U;
 2076              		.loc 1 1283 1 is_stmt 1 view -0
 2077              		.cfi_startproc
 2078              		@ args = 0, pretend = 0, frame = 0
 2079              		@ frame_needed = 0, uses_anonymous_args = 0
1283:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   uint32_t dmarequest = 0x00U;
 2080              		.loc 1 1283 1 is_stmt 0 view .LVU638
 2081 0000 10B5     		push	{r4, lr}
 2082              	.LCFI23:
 2083              		.cfi_def_cfa_offset 8
 2084              		.cfi_offset 4, -8
 2085              		.cfi_offset 14, -4
 2086 0002 0446     		mov	r4, r0
1284:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* The Lock is not implemented on this API to allow the user application
 2087              		.loc 1 1284 3 is_stmt 1 view .LVU639
 2088              	.LVL158:
1292:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if ((hirda->gState == HAL_IRDA_STATE_BUSY_TX) && dmarequest)
 2089              		.loc 1 1292 3 view .LVU640
1292:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if ((hirda->gState == HAL_IRDA_STATE_BUSY_TX) && dmarequest)
 2090              		.loc 1 1292 16 is_stmt 0 view .LVU641
 2091 0004 0168     		ldr	r1, [r0]
 2092 0006 4A69     		ldr	r2, [r1, #20]
 2093              	.LVL159:
1293:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 2094              		.loc 1 1293 3 is_stmt 1 view .LVU642
1293:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 2095              		.loc 1 1293 13 is_stmt 0 view .LVU643
 2096 0008 90F83530 		ldrb	r3, [r0, #53]	@ zero_extendqisi2
 2097 000c DBB2     		uxtb	r3, r3
1293:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
ARM GAS  /tmp/ccN5ASm9.s 			page 95


 2098              		.loc 1 1293 6 view .LVU644
 2099 000e 212B     		cmp	r3, #33
 2100 0010 0AD0     		beq	.L144
 2101              	.LVL160:
 2102              	.L139:
1306:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if ((hirda->RxState == HAL_IRDA_STATE_BUSY_RX) && dmarequest)
 2103              		.loc 1 1306 3 is_stmt 1 view .LVU645
1306:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if ((hirda->RxState == HAL_IRDA_STATE_BUSY_RX) && dmarequest)
 2104              		.loc 1 1306 16 is_stmt 0 view .LVU646
 2105 0012 2168     		ldr	r1, [r4]
 2106 0014 4A69     		ldr	r2, [r1, #20]
 2107 0016 02F04002 		and	r2, r2, #64
 2108              	.LVL161:
1307:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 2109              		.loc 1 1307 3 is_stmt 1 view .LVU647
1307:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 2110              		.loc 1 1307 13 is_stmt 0 view .LVU648
 2111 001a 94F83630 		ldrb	r3, [r4, #54]	@ zero_extendqisi2
 2112 001e DBB2     		uxtb	r3, r3
1307:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 2113              		.loc 1 1307 6 view .LVU649
 2114 0020 222B     		cmp	r3, #34
 2115 0022 11D0     		beq	.L145
 2116              	.LVL162:
 2117              	.L141:
1319:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
 2118              		.loc 1 1319 3 is_stmt 1 view .LVU650
1320:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2119              		.loc 1 1320 1 is_stmt 0 view .LVU651
 2120 0024 0020     		movs	r0, #0
 2121 0026 10BD     		pop	{r4, pc}
 2122              	.LVL163:
 2123              	.L144:
1320:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2124              		.loc 1 1320 1 view .LVU652
 2125 0028 02F08002 		and	r2, r2, #128
 2126              	.LVL164:
1293:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 2127              		.loc 1 1293 49 discriminator 1 view .LVU653
 2128 002c 002A     		cmp	r2, #0
 2129 002e F0D0     		beq	.L139
1295:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2130              		.loc 1 1295 5 is_stmt 1 view .LVU654
 2131 0030 4B69     		ldr	r3, [r1, #20]
 2132 0032 23F08003 		bic	r3, r3, #128
 2133 0036 4B61     		str	r3, [r1, #20]
1298:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 2134              		.loc 1 1298 5 view .LVU655
1298:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 2135              		.loc 1 1298 14 is_stmt 0 view .LVU656
 2136 0038 C06A     		ldr	r0, [r0, #44]
 2137              	.LVL165:
1298:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 2138              		.loc 1 1298 8 view .LVU657
 2139 003a 08B1     		cbz	r0, .L140
1300:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 2140              		.loc 1 1300 7 is_stmt 1 view .LVU658
ARM GAS  /tmp/ccN5ASm9.s 			page 96


 2141 003c FFF7FEFF 		bl	HAL_DMA_Abort
 2142              	.LVL166:
 2143              	.L140:
1302:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 2144              		.loc 1 1302 5 view .LVU659
 2145 0040 2046     		mov	r0, r4
 2146 0042 FFF7FEFF 		bl	IRDA_EndTxTransfer
 2147              	.LVL167:
 2148 0046 E4E7     		b	.L139
 2149              	.LVL168:
 2150              	.L145:
1307:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 2151              		.loc 1 1307 50 is_stmt 0 discriminator 1 view .LVU660
 2152 0048 002A     		cmp	r2, #0
 2153 004a EBD0     		beq	.L141
1309:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2154              		.loc 1 1309 5 is_stmt 1 view .LVU661
 2155 004c 4B69     		ldr	r3, [r1, #20]
 2156 004e 23F04003 		bic	r3, r3, #64
 2157 0052 4B61     		str	r3, [r1, #20]
1312:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 2158              		.loc 1 1312 5 view .LVU662
1312:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 2159              		.loc 1 1312 14 is_stmt 0 view .LVU663
 2160 0054 206B     		ldr	r0, [r4, #48]
1312:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 2161              		.loc 1 1312 8 view .LVU664
 2162 0056 08B1     		cbz	r0, .L142
1314:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 2163              		.loc 1 1314 7 is_stmt 1 view .LVU665
 2164 0058 FFF7FEFF 		bl	HAL_DMA_Abort
 2165              	.LVL169:
 2166              	.L142:
1316:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 2167              		.loc 1 1316 5 view .LVU666
 2168 005c 2046     		mov	r0, r4
 2169 005e FFF7FEFF 		bl	IRDA_EndRxTransfer
 2170              	.LVL170:
 2171 0062 DFE7     		b	.L141
 2172              		.cfi_endproc
 2173              	.LFE251:
 2175              		.section	.text.HAL_IRDA_Abort,"ax",%progbits
 2176              		.align	1
 2177              		.global	HAL_IRDA_Abort
 2178              		.syntax unified
 2179              		.thumb
 2180              		.thumb_func
 2181              		.fpu fpv4-sp-d16
 2183              	HAL_IRDA_Abort:
 2184              	.LVL171:
 2185              	.LFB252:
1335:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 2186              		.loc 1 1335 1 view -0
 2187              		.cfi_startproc
 2188              		@ args = 0, pretend = 0, frame = 0
 2189              		@ frame_needed = 0, uses_anonymous_args = 0
1335:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
ARM GAS  /tmp/ccN5ASm9.s 			page 97


 2190              		.loc 1 1335 1 is_stmt 0 view .LVU668
 2191 0000 10B5     		push	{r4, lr}
 2192              	.LCFI24:
 2193              		.cfi_def_cfa_offset 8
 2194              		.cfi_offset 4, -8
 2195              		.cfi_offset 14, -4
 2196 0002 0446     		mov	r4, r0
1337:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 2197              		.loc 1 1337 3 is_stmt 1 view .LVU669
 2198 0004 0268     		ldr	r2, [r0]
 2199 0006 D368     		ldr	r3, [r2, #12]
 2200 0008 23F4F073 		bic	r3, r3, #480
 2201 000c D360     		str	r3, [r2, #12]
1338:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2202              		.loc 1 1338 3 view .LVU670
 2203 000e 0268     		ldr	r2, [r0]
 2204 0010 5369     		ldr	r3, [r2, #20]
 2205 0012 23F00103 		bic	r3, r3, #1
 2206 0016 5361     		str	r3, [r2, #20]
1341:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 2207              		.loc 1 1341 3 view .LVU671
1341:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 2208              		.loc 1 1341 7 is_stmt 0 view .LVU672
 2209 0018 0368     		ldr	r3, [r0]
 2210 001a 5A69     		ldr	r2, [r3, #20]
1341:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 2211              		.loc 1 1341 6 view .LVU673
 2212 001c 12F0800F 		tst	r2, #128
 2213 0020 0AD0     		beq	.L147
1343:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2214              		.loc 1 1343 5 is_stmt 1 view .LVU674
 2215 0022 5A69     		ldr	r2, [r3, #20]
 2216 0024 22F08002 		bic	r2, r2, #128
 2217 0028 5A61     		str	r2, [r3, #20]
1346:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 2218              		.loc 1 1346 5 view .LVU675
1346:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 2219              		.loc 1 1346 14 is_stmt 0 view .LVU676
 2220 002a C36A     		ldr	r3, [r0, #44]
1346:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 2221              		.loc 1 1346 8 view .LVU677
 2222 002c 23B1     		cbz	r3, .L147
1350:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2223              		.loc 1 1350 7 is_stmt 1 view .LVU678
1350:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2224              		.loc 1 1350 40 is_stmt 0 view .LVU679
 2225 002e 0022     		movs	r2, #0
 2226 0030 1A65     		str	r2, [r3, #80]
1352:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 2227              		.loc 1 1352 7 is_stmt 1 view .LVU680
 2228 0032 C06A     		ldr	r0, [r0, #44]
 2229              	.LVL172:
1352:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 2230              		.loc 1 1352 7 is_stmt 0 view .LVU681
 2231 0034 FFF7FEFF 		bl	HAL_DMA_Abort
 2232              	.LVL173:
 2233              	.L147:
ARM GAS  /tmp/ccN5ASm9.s 			page 98


1357:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 2234              		.loc 1 1357 3 is_stmt 1 view .LVU682
1357:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 2235              		.loc 1 1357 7 is_stmt 0 view .LVU683
 2236 0038 2368     		ldr	r3, [r4]
 2237 003a 5A69     		ldr	r2, [r3, #20]
1357:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 2238              		.loc 1 1357 6 view .LVU684
 2239 003c 12F0400F 		tst	r2, #64
 2240 0040 0AD0     		beq	.L148
1359:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2241              		.loc 1 1359 5 is_stmt 1 view .LVU685
 2242 0042 5A69     		ldr	r2, [r3, #20]
 2243 0044 22F04002 		bic	r2, r2, #64
 2244 0048 5A61     		str	r2, [r3, #20]
1362:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 2245              		.loc 1 1362 5 view .LVU686
1362:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 2246              		.loc 1 1362 14 is_stmt 0 view .LVU687
 2247 004a 236B     		ldr	r3, [r4, #48]
1362:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 2248              		.loc 1 1362 8 view .LVU688
 2249 004c 23B1     		cbz	r3, .L148
1366:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2250              		.loc 1 1366 7 is_stmt 1 view .LVU689
1366:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2251              		.loc 1 1366 40 is_stmt 0 view .LVU690
 2252 004e 0022     		movs	r2, #0
 2253 0050 1A65     		str	r2, [r3, #80]
1368:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 2254              		.loc 1 1368 7 is_stmt 1 view .LVU691
 2255 0052 206B     		ldr	r0, [r4, #48]
 2256 0054 FFF7FEFF 		bl	HAL_DMA_Abort
 2257              	.LVL174:
 2258              	.L148:
1373:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->RxXferCount = 0x00U;
 2259              		.loc 1 1373 3 view .LVU692
1373:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->RxXferCount = 0x00U;
 2260              		.loc 1 1373 22 is_stmt 0 view .LVU693
 2261 0058 0020     		movs	r0, #0
 2262 005a 6084     		strh	r0, [r4, #34]	@ movhi
1374:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2263              		.loc 1 1374 3 is_stmt 1 view .LVU694
1374:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2264              		.loc 1 1374 22 is_stmt 0 view .LVU695
 2265 005c 6085     		strh	r0, [r4, #42]	@ movhi
1377:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2266              		.loc 1 1377 3 is_stmt 1 view .LVU696
1377:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2267              		.loc 1 1377 20 is_stmt 0 view .LVU697
 2268 005e A063     		str	r0, [r4, #56]
1380:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->gState = HAL_IRDA_STATE_READY;
 2269              		.loc 1 1380 3 is_stmt 1 view .LVU698
1380:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->gState = HAL_IRDA_STATE_READY;
 2270              		.loc 1 1380 18 is_stmt 0 view .LVU699
 2271 0060 2023     		movs	r3, #32
 2272 0062 84F83630 		strb	r3, [r4, #54]
ARM GAS  /tmp/ccN5ASm9.s 			page 99


1381:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2273              		.loc 1 1381 3 is_stmt 1 view .LVU700
1381:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2274              		.loc 1 1381 17 is_stmt 0 view .LVU701
 2275 0066 84F83530 		strb	r3, [r4, #53]
1383:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
 2276              		.loc 1 1383 3 is_stmt 1 view .LVU702
1384:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2277              		.loc 1 1384 1 is_stmt 0 view .LVU703
 2278 006a 10BD     		pop	{r4, pc}
1384:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2279              		.loc 1 1384 1 view .LVU704
 2280              		.cfi_endproc
 2281              	.LFE252:
 2283              		.section	.text.HAL_IRDA_AbortTransmit,"ax",%progbits
 2284              		.align	1
 2285              		.global	HAL_IRDA_AbortTransmit
 2286              		.syntax unified
 2287              		.thumb
 2288              		.thumb_func
 2289              		.fpu fpv4-sp-d16
 2291              	HAL_IRDA_AbortTransmit:
 2292              	.LVL175:
 2293              	.LFB253:
1399:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Disable TXEIE and TCIE interrupts */
 2294              		.loc 1 1399 1 is_stmt 1 view -0
 2295              		.cfi_startproc
 2296              		@ args = 0, pretend = 0, frame = 0
 2297              		@ frame_needed = 0, uses_anonymous_args = 0
1399:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Disable TXEIE and TCIE interrupts */
 2298              		.loc 1 1399 1 is_stmt 0 view .LVU706
 2299 0000 10B5     		push	{r4, lr}
 2300              	.LCFI25:
 2301              		.cfi_def_cfa_offset 8
 2302              		.cfi_offset 4, -8
 2303              		.cfi_offset 14, -4
 2304 0002 0446     		mov	r4, r0
1401:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2305              		.loc 1 1401 3 is_stmt 1 view .LVU707
 2306 0004 0268     		ldr	r2, [r0]
 2307 0006 D368     		ldr	r3, [r2, #12]
 2308 0008 23F0C003 		bic	r3, r3, #192
 2309 000c D360     		str	r3, [r2, #12]
1404:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 2310              		.loc 1 1404 3 view .LVU708
1404:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 2311              		.loc 1 1404 7 is_stmt 0 view .LVU709
 2312 000e 0368     		ldr	r3, [r0]
 2313 0010 5A69     		ldr	r2, [r3, #20]
1404:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 2314              		.loc 1 1404 6 view .LVU710
 2315 0012 12F0800F 		tst	r2, #128
 2316 0016 0AD0     		beq	.L151
1406:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2317              		.loc 1 1406 5 is_stmt 1 view .LVU711
 2318 0018 5A69     		ldr	r2, [r3, #20]
 2319 001a 22F08002 		bic	r2, r2, #128
ARM GAS  /tmp/ccN5ASm9.s 			page 100


 2320 001e 5A61     		str	r2, [r3, #20]
1409:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 2321              		.loc 1 1409 5 view .LVU712
1409:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 2322              		.loc 1 1409 14 is_stmt 0 view .LVU713
 2323 0020 C36A     		ldr	r3, [r0, #44]
1409:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 2324              		.loc 1 1409 8 view .LVU714
 2325 0022 23B1     		cbz	r3, .L151
1413:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2326              		.loc 1 1413 7 is_stmt 1 view .LVU715
1413:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2327              		.loc 1 1413 40 is_stmt 0 view .LVU716
 2328 0024 0022     		movs	r2, #0
 2329 0026 1A65     		str	r2, [r3, #80]
1415:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 2330              		.loc 1 1415 7 is_stmt 1 view .LVU717
 2331 0028 C06A     		ldr	r0, [r0, #44]
 2332              	.LVL176:
1415:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 2333              		.loc 1 1415 7 is_stmt 0 view .LVU718
 2334 002a FFF7FEFF 		bl	HAL_DMA_Abort
 2335              	.LVL177:
 2336              	.L151:
1420:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2337              		.loc 1 1420 3 is_stmt 1 view .LVU719
1420:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2338              		.loc 1 1420 22 is_stmt 0 view .LVU720
 2339 002e 0020     		movs	r0, #0
 2340 0030 6084     		strh	r0, [r4, #34]	@ movhi
1423:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2341              		.loc 1 1423 3 is_stmt 1 view .LVU721
1423:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2342              		.loc 1 1423 17 is_stmt 0 view .LVU722
 2343 0032 2023     		movs	r3, #32
 2344 0034 84F83530 		strb	r3, [r4, #53]
1425:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
 2345              		.loc 1 1425 3 is_stmt 1 view .LVU723
1426:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2346              		.loc 1 1426 1 is_stmt 0 view .LVU724
 2347 0038 10BD     		pop	{r4, pc}
1426:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2348              		.loc 1 1426 1 view .LVU725
 2349              		.cfi_endproc
 2350              	.LFE253:
 2352              		.section	.text.HAL_IRDA_AbortReceive,"ax",%progbits
 2353              		.align	1
 2354              		.global	HAL_IRDA_AbortReceive
 2355              		.syntax unified
 2356              		.thumb
 2357              		.thumb_func
 2358              		.fpu fpv4-sp-d16
 2360              	HAL_IRDA_AbortReceive:
 2361              	.LVL178:
 2362              	.LFB254:
1441:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 2363              		.loc 1 1441 1 is_stmt 1 view -0
ARM GAS  /tmp/ccN5ASm9.s 			page 101


 2364              		.cfi_startproc
 2365              		@ args = 0, pretend = 0, frame = 0
 2366              		@ frame_needed = 0, uses_anonymous_args = 0
1441:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 2367              		.loc 1 1441 1 is_stmt 0 view .LVU727
 2368 0000 10B5     		push	{r4, lr}
 2369              	.LCFI26:
 2370              		.cfi_def_cfa_offset 8
 2371              		.cfi_offset 4, -8
 2372              		.cfi_offset 14, -4
 2373 0002 0446     		mov	r4, r0
1443:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 2374              		.loc 1 1443 3 is_stmt 1 view .LVU728
 2375 0004 0268     		ldr	r2, [r0]
 2376 0006 D368     		ldr	r3, [r2, #12]
 2377 0008 23F49073 		bic	r3, r3, #288
 2378 000c D360     		str	r3, [r2, #12]
1444:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2379              		.loc 1 1444 3 view .LVU729
 2380 000e 0268     		ldr	r2, [r0]
 2381 0010 5369     		ldr	r3, [r2, #20]
 2382 0012 23F00103 		bic	r3, r3, #1
 2383 0016 5361     		str	r3, [r2, #20]
1447:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 2384              		.loc 1 1447 3 view .LVU730
1447:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 2385              		.loc 1 1447 7 is_stmt 0 view .LVU731
 2386 0018 0368     		ldr	r3, [r0]
 2387 001a 5A69     		ldr	r2, [r3, #20]
1447:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 2388              		.loc 1 1447 6 view .LVU732
 2389 001c 12F0400F 		tst	r2, #64
 2390 0020 0AD0     		beq	.L154
1449:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2391              		.loc 1 1449 5 is_stmt 1 view .LVU733
 2392 0022 5A69     		ldr	r2, [r3, #20]
 2393 0024 22F04002 		bic	r2, r2, #64
 2394 0028 5A61     		str	r2, [r3, #20]
1452:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 2395              		.loc 1 1452 5 view .LVU734
1452:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 2396              		.loc 1 1452 14 is_stmt 0 view .LVU735
 2397 002a 036B     		ldr	r3, [r0, #48]
1452:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 2398              		.loc 1 1452 8 view .LVU736
 2399 002c 23B1     		cbz	r3, .L154
1456:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2400              		.loc 1 1456 7 is_stmt 1 view .LVU737
1456:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2401              		.loc 1 1456 40 is_stmt 0 view .LVU738
 2402 002e 0022     		movs	r2, #0
 2403 0030 1A65     		str	r2, [r3, #80]
1458:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 2404              		.loc 1 1458 7 is_stmt 1 view .LVU739
 2405 0032 006B     		ldr	r0, [r0, #48]
 2406              	.LVL179:
1458:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
ARM GAS  /tmp/ccN5ASm9.s 			page 102


 2407              		.loc 1 1458 7 is_stmt 0 view .LVU740
 2408 0034 FFF7FEFF 		bl	HAL_DMA_Abort
 2409              	.LVL180:
 2410              	.L154:
1463:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2411              		.loc 1 1463 3 is_stmt 1 view .LVU741
1463:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2412              		.loc 1 1463 22 is_stmt 0 view .LVU742
 2413 0038 0020     		movs	r0, #0
 2414 003a 6085     		strh	r0, [r4, #42]	@ movhi
1466:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2415              		.loc 1 1466 3 is_stmt 1 view .LVU743
1466:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2416              		.loc 1 1466 18 is_stmt 0 view .LVU744
 2417 003c 2023     		movs	r3, #32
 2418 003e 84F83630 		strb	r3, [r4, #54]
1468:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
 2419              		.loc 1 1468 3 is_stmt 1 view .LVU745
1469:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2420              		.loc 1 1469 1 is_stmt 0 view .LVU746
 2421 0042 10BD     		pop	{r4, pc}
1469:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2422              		.loc 1 1469 1 view .LVU747
 2423              		.cfi_endproc
 2424              	.LFE254:
 2426              		.section	.text.HAL_IRDA_TxCpltCallback,"ax",%progbits
 2427              		.align	1
 2428              		.weak	HAL_IRDA_TxCpltCallback
 2429              		.syntax unified
 2430              		.thumb
 2431              		.thumb_func
 2432              		.fpu fpv4-sp-d16
 2434              	HAL_IRDA_TxCpltCallback:
 2435              	.LVL181:
 2436              	.LFB259:
1906:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
 2437              		.loc 1 1906 1 is_stmt 1 view -0
 2438              		.cfi_startproc
 2439              		@ args = 0, pretend = 0, frame = 0
 2440              		@ frame_needed = 0, uses_anonymous_args = 0
 2441              		@ link register save eliminated.
1908:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2442              		.loc 1 1908 3 view .LVU749
1913:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2443              		.loc 1 1913 1 is_stmt 0 view .LVU750
 2444 0000 7047     		bx	lr
 2445              		.cfi_endproc
 2446              	.LFE259:
 2448              		.section	.text.IRDA_DMATransmitCplt,"ax",%progbits
 2449              		.align	1
 2450              		.syntax unified
 2451              		.thumb
 2452              		.thumb_func
 2453              		.fpu fpv4-sp-d16
 2455              	IRDA_DMATransmitCplt:
 2456              	.LVL182:
 2457              	.LFB269:
ARM GAS  /tmp/ccN5ASm9.s 			page 103


2114:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 2458              		.loc 1 2114 1 is_stmt 1 view -0
 2459              		.cfi_startproc
 2460              		@ args = 0, pretend = 0, frame = 0
 2461              		@ frame_needed = 0, uses_anonymous_args = 0
2114:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 2462              		.loc 1 2114 1 is_stmt 0 view .LVU752
 2463 0000 08B5     		push	{r3, lr}
 2464              	.LCFI27:
 2465              		.cfi_def_cfa_offset 8
 2466              		.cfi_offset 3, -8
 2467              		.cfi_offset 14, -4
 2468 0002 0346     		mov	r3, r0
2115:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* DMA Normal mode */
 2469              		.loc 1 2115 3 is_stmt 1 view .LVU753
2115:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* DMA Normal mode */
 2470              		.loc 1 2115 23 is_stmt 0 view .LVU754
 2471 0004 806B     		ldr	r0, [r0, #56]
 2472              	.LVL183:
2117:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 2473              		.loc 1 2117 3 is_stmt 1 view .LVU755
2117:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 2474              		.loc 1 2117 12 is_stmt 0 view .LVU756
 2475 0006 1B68     		ldr	r3, [r3]
 2476              	.LVL184:
2117:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 2477              		.loc 1 2117 22 view .LVU757
 2478 0008 1B68     		ldr	r3, [r3]
2117:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 2479              		.loc 1 2117 6 view .LVU758
 2480 000a 13F4807F 		tst	r3, #256
 2481 000e 0CD1     		bne	.L158
2119:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2482              		.loc 1 2119 5 is_stmt 1 view .LVU759
2119:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2483              		.loc 1 2119 24 is_stmt 0 view .LVU760
 2484 0010 0023     		movs	r3, #0
 2485 0012 4384     		strh	r3, [r0, #34]	@ movhi
2123:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2486              		.loc 1 2123 5 is_stmt 1 view .LVU761
 2487 0014 0268     		ldr	r2, [r0]
 2488 0016 5369     		ldr	r3, [r2, #20]
 2489 0018 23F08003 		bic	r3, r3, #128
 2490 001c 5361     		str	r3, [r2, #20]
2126:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 2491              		.loc 1 2126 5 view .LVU762
 2492 001e 0268     		ldr	r2, [r0]
 2493 0020 D368     		ldr	r3, [r2, #12]
 2494 0022 43F04003 		orr	r3, r3, #64
 2495 0026 D360     		str	r3, [r2, #12]
 2496              	.LVL185:
 2497              	.L157:
2139:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2498              		.loc 1 2139 1 is_stmt 0 view .LVU763
 2499 0028 08BD     		pop	{r3, pc}
 2500              	.LVL186:
 2501              	.L158:
ARM GAS  /tmp/ccN5ASm9.s 			page 104


2136:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
 2502              		.loc 1 2136 5 is_stmt 1 view .LVU764
 2503 002a FFF7FEFF 		bl	HAL_IRDA_TxCpltCallback
 2504              	.LVL187:
2139:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2505              		.loc 1 2139 1 is_stmt 0 view .LVU765
 2506 002e FBE7     		b	.L157
 2507              		.cfi_endproc
 2508              	.LFE269:
 2510              		.section	.text.IRDA_EndTransmit_IT,"ax",%progbits
 2511              		.align	1
 2512              		.syntax unified
 2513              		.thumb
 2514              		.thumb_func
 2515              		.fpu fpv4-sp-d16
 2517              	IRDA_EndTransmit_IT:
 2518              	.LVL188:
 2519              	.LFB283:
2538:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Disable the IRDA Transmit Complete Interrupt */
 2520              		.loc 1 2538 1 is_stmt 1 view -0
 2521              		.cfi_startproc
 2522              		@ args = 0, pretend = 0, frame = 0
 2523              		@ frame_needed = 0, uses_anonymous_args = 0
2538:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Disable the IRDA Transmit Complete Interrupt */
 2524              		.loc 1 2538 1 is_stmt 0 view .LVU767
 2525 0000 08B5     		push	{r3, lr}
 2526              	.LCFI28:
 2527              		.cfi_def_cfa_offset 8
 2528              		.cfi_offset 3, -8
 2529              		.cfi_offset 14, -4
2540:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2530              		.loc 1 2540 3 is_stmt 1 view .LVU768
 2531 0002 0168     		ldr	r1, [r0]
 2532 0004 CA68     		ldr	r2, [r1, #12]
 2533 0006 22F04002 		bic	r2, r2, #64
 2534 000a CA60     		str	r2, [r1, #12]
2543:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2535              		.loc 1 2543 3 view .LVU769
 2536 000c 0168     		ldr	r1, [r0]
 2537 000e 4A69     		ldr	r2, [r1, #20]
 2538 0010 22F00102 		bic	r2, r2, #1
 2539 0014 4A61     		str	r2, [r1, #20]
2546:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2540              		.loc 1 2546 3 view .LVU770
2546:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2541              		.loc 1 2546 17 is_stmt 0 view .LVU771
 2542 0016 2022     		movs	r2, #32
 2543 0018 80F83520 		strb	r2, [r0, #53]
2553:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
 2544              		.loc 1 2553 3 is_stmt 1 view .LVU772
 2545 001c FFF7FEFF 		bl	HAL_IRDA_TxCpltCallback
 2546              	.LVL189:
2556:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
 2547              		.loc 1 2556 3 view .LVU773
2557:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2548              		.loc 1 2557 1 is_stmt 0 view .LVU774
 2549 0020 0020     		movs	r0, #0
ARM GAS  /tmp/ccN5ASm9.s 			page 105


 2550 0022 08BD     		pop	{r3, pc}
 2551              		.cfi_endproc
 2552              	.LFE283:
 2554              		.section	.text.HAL_IRDA_TxHalfCpltCallback,"ax",%progbits
 2555              		.align	1
 2556              		.weak	HAL_IRDA_TxHalfCpltCallback
 2557              		.syntax unified
 2558              		.thumb
 2559              		.thumb_func
 2560              		.fpu fpv4-sp-d16
 2562              	HAL_IRDA_TxHalfCpltCallback:
 2563              	.LVL190:
 2564              	.LFB260:
1922:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
 2565              		.loc 1 1922 1 is_stmt 1 view -0
 2566              		.cfi_startproc
 2567              		@ args = 0, pretend = 0, frame = 0
 2568              		@ frame_needed = 0, uses_anonymous_args = 0
 2569              		@ link register save eliminated.
1924:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2570              		.loc 1 1924 3 view .LVU776
1929:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2571              		.loc 1 1929 1 is_stmt 0 view .LVU777
 2572 0000 7047     		bx	lr
 2573              		.cfi_endproc
 2574              	.LFE260:
 2576              		.section	.text.IRDA_DMATransmitHalfCplt,"ax",%progbits
 2577              		.align	1
 2578              		.syntax unified
 2579              		.thumb
 2580              		.thumb_func
 2581              		.fpu fpv4-sp-d16
 2583              	IRDA_DMATransmitHalfCplt:
 2584              	.LVL191:
 2585              	.LFB270:
2148:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 2586              		.loc 1 2148 1 is_stmt 1 view -0
 2587              		.cfi_startproc
 2588              		@ args = 0, pretend = 0, frame = 0
 2589              		@ frame_needed = 0, uses_anonymous_args = 0
2148:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 2590              		.loc 1 2148 1 is_stmt 0 view .LVU779
 2591 0000 08B5     		push	{r3, lr}
 2592              	.LCFI29:
 2593              		.cfi_def_cfa_offset 8
 2594              		.cfi_offset 3, -8
 2595              		.cfi_offset 14, -4
2149:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2596              		.loc 1 2149 3 is_stmt 1 view .LVU780
 2597              	.LVL192:
2156:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
 2598              		.loc 1 2156 3 view .LVU781
 2599 0002 806B     		ldr	r0, [r0, #56]
 2600              	.LVL193:
2156:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
 2601              		.loc 1 2156 3 is_stmt 0 view .LVU782
 2602 0004 FFF7FEFF 		bl	HAL_IRDA_TxHalfCpltCallback
ARM GAS  /tmp/ccN5ASm9.s 			page 106


 2603              	.LVL194:
2158:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2604              		.loc 1 2158 1 view .LVU783
 2605 0008 08BD     		pop	{r3, pc}
 2606              		.cfi_endproc
 2607              	.LFE270:
 2609              		.section	.text.HAL_IRDA_RxCpltCallback,"ax",%progbits
 2610              		.align	1
 2611              		.weak	HAL_IRDA_RxCpltCallback
 2612              		.syntax unified
 2613              		.thumb
 2614              		.thumb_func
 2615              		.fpu fpv4-sp-d16
 2617              	HAL_IRDA_RxCpltCallback:
 2618              	.LVL195:
 2619              	.LFB261:
1938:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
 2620              		.loc 1 1938 1 is_stmt 1 view -0
 2621              		.cfi_startproc
 2622              		@ args = 0, pretend = 0, frame = 0
 2623              		@ frame_needed = 0, uses_anonymous_args = 0
 2624              		@ link register save eliminated.
1940:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2625              		.loc 1 1940 3 view .LVU785
1945:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2626              		.loc 1 1945 1 is_stmt 0 view .LVU786
 2627 0000 7047     		bx	lr
 2628              		.cfi_endproc
 2629              	.LFE261:
 2631              		.section	.text.IRDA_DMAReceiveCplt,"ax",%progbits
 2632              		.align	1
 2633              		.syntax unified
 2634              		.thumb
 2635              		.thumb_func
 2636              		.fpu fpv4-sp-d16
 2638              	IRDA_DMAReceiveCplt:
 2639              	.LVL196:
 2640              	.LFB271:
2167:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 2641              		.loc 1 2167 1 is_stmt 1 view -0
 2642              		.cfi_startproc
 2643              		@ args = 0, pretend = 0, frame = 0
 2644              		@ frame_needed = 0, uses_anonymous_args = 0
2167:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 2645              		.loc 1 2167 1 is_stmt 0 view .LVU788
 2646 0000 08B5     		push	{r3, lr}
 2647              	.LCFI30:
 2648              		.cfi_def_cfa_offset 8
 2649              		.cfi_offset 3, -8
 2650              		.cfi_offset 14, -4
 2651 0002 0346     		mov	r3, r0
2168:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2652              		.loc 1 2168 3 is_stmt 1 view .LVU789
2168:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2653              		.loc 1 2168 23 is_stmt 0 view .LVU790
 2654 0004 806B     		ldr	r0, [r0, #56]
 2655              	.LVL197:
ARM GAS  /tmp/ccN5ASm9.s 			page 107


2171:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 2656              		.loc 1 2171 3 is_stmt 1 view .LVU791
2171:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 2657              		.loc 1 2171 12 is_stmt 0 view .LVU792
 2658 0006 1B68     		ldr	r3, [r3]
 2659              	.LVL198:
2171:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 2660              		.loc 1 2171 22 view .LVU793
 2661 0008 1B68     		ldr	r3, [r3]
2171:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 2662              		.loc 1 2171 6 view .LVU794
 2663 000a 13F4807F 		tst	r3, #256
 2664 000e 13D1     		bne	.L168
2173:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2665              		.loc 1 2173 5 is_stmt 1 view .LVU795
2173:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2666              		.loc 1 2173 24 is_stmt 0 view .LVU796
 2667 0010 0023     		movs	r3, #0
 2668 0012 4385     		strh	r3, [r0, #42]	@ movhi
2176:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 2669              		.loc 1 2176 5 is_stmt 1 view .LVU797
 2670 0014 0268     		ldr	r2, [r0]
 2671 0016 D368     		ldr	r3, [r2, #12]
 2672 0018 23F48073 		bic	r3, r3, #256
 2673 001c D360     		str	r3, [r2, #12]
2177:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2674              		.loc 1 2177 5 view .LVU798
 2675 001e 0268     		ldr	r2, [r0]
 2676 0020 5369     		ldr	r3, [r2, #20]
 2677 0022 23F00103 		bic	r3, r3, #1
 2678 0026 5361     		str	r3, [r2, #20]
2181:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2679              		.loc 1 2181 5 view .LVU799
 2680 0028 0268     		ldr	r2, [r0]
 2681 002a 5369     		ldr	r3, [r2, #20]
 2682 002c 23F04003 		bic	r3, r3, #64
 2683 0030 5361     		str	r3, [r2, #20]
2184:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 2684              		.loc 1 2184 5 view .LVU800
2184:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 2685              		.loc 1 2184 20 is_stmt 0 view .LVU801
 2686 0032 2023     		movs	r3, #32
 2687 0034 80F83630 		strb	r3, [r0, #54]
 2688              	.L168:
2192:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACKS */
 2689              		.loc 1 2192 3 is_stmt 1 view .LVU802
 2690 0038 FFF7FEFF 		bl	HAL_IRDA_RxCpltCallback
 2691              	.LVL199:
2194:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2692              		.loc 1 2194 1 is_stmt 0 view .LVU803
 2693 003c 08BD     		pop	{r3, pc}
 2694              		.cfi_endproc
 2695              	.LFE271:
 2697              		.section	.text.IRDA_Receive_IT,"ax",%progbits
 2698              		.align	1
 2699              		.syntax unified
 2700              		.thumb
ARM GAS  /tmp/ccN5ASm9.s 			page 108


 2701              		.thumb_func
 2702              		.fpu fpv4-sp-d16
 2704              	IRDA_Receive_IT:
 2705              	.LVL200:
 2706              	.LFB284:
2566:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   uint16_t *tmp;
 2707              		.loc 1 2566 1 is_stmt 1 view -0
 2708              		.cfi_startproc
 2709              		@ args = 0, pretend = 0, frame = 0
 2710              		@ frame_needed = 0, uses_anonymous_args = 0
2566:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   uint16_t *tmp;
 2711              		.loc 1 2566 1 is_stmt 0 view .LVU805
 2712 0000 08B5     		push	{r3, lr}
 2713              	.LCFI31:
 2714              		.cfi_def_cfa_offset 8
 2715              		.cfi_offset 3, -8
 2716              		.cfi_offset 14, -4
2567:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   uint16_t  uhdata;
 2717              		.loc 1 2567 3 is_stmt 1 view .LVU806
2568:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2718              		.loc 1 2568 3 view .LVU807
2571:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 2719              		.loc 1 2571 3 view .LVU808
2571:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 2720              		.loc 1 2571 12 is_stmt 0 view .LVU809
 2721 0002 90F83630 		ldrb	r3, [r0, #54]	@ zero_extendqisi2
 2722 0006 DBB2     		uxtb	r3, r3
2571:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 2723              		.loc 1 2571 6 view .LVU810
 2724 0008 222B     		cmp	r3, #34
 2725 000a 41D1     		bne	.L176
2573:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     if (hirda->Init.WordLength == IRDA_WORDLENGTH_9B)
 2726              		.loc 1 2573 5 is_stmt 1 view .LVU811
2573:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     if (hirda->Init.WordLength == IRDA_WORDLENGTH_9B)
 2727              		.loc 1 2573 25 is_stmt 0 view .LVU812
 2728 000c 0368     		ldr	r3, [r0]
 2729 000e 5B68     		ldr	r3, [r3, #4]
2573:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     if (hirda->Init.WordLength == IRDA_WORDLENGTH_9B)
 2730              		.loc 1 2573 12 view .LVU813
 2731 0010 9AB2     		uxth	r2, r3
 2732              	.LVL201:
2574:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 2733              		.loc 1 2574 5 is_stmt 1 view .LVU814
2574:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 2734              		.loc 1 2574 20 is_stmt 0 view .LVU815
 2735 0012 8168     		ldr	r1, [r0, #8]
2574:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 2736              		.loc 1 2574 8 view .LVU816
 2737 0014 B1F5805F 		cmp	r1, #4096
 2738 0018 0DD0     		beq	.L179
2590:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
 2739              		.loc 1 2590 7 is_stmt 1 view .LVU817
2590:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
 2740              		.loc 1 2590 22 is_stmt 0 view .LVU818
 2741 001a C268     		ldr	r2, [r0, #12]
 2742              	.LVL202:
2590:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
ARM GAS  /tmp/ccN5ASm9.s 			page 109


 2743              		.loc 1 2590 10 view .LVU819
 2744 001c DAB9     		cbnz	r2, .L175
2592:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
 2745              		.loc 1 2592 9 is_stmt 1 view .LVU820
2592:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
 2746              		.loc 1 2592 15 is_stmt 0 view .LVU821
 2747 001e 426A     		ldr	r2, [r0, #36]
2592:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
 2748              		.loc 1 2592 27 view .LVU822
 2749 0020 511C     		adds	r1, r2, #1
 2750 0022 4162     		str	r1, [r0, #36]
2592:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
 2751              		.loc 1 2592 30 view .LVU823
 2752 0024 1370     		strb	r3, [r2]
 2753              	.LVL203:
 2754              	.L174:
2600:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 2755              		.loc 1 2600 5 is_stmt 1 view .LVU824
2600:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 2756              		.loc 1 2600 16 is_stmt 0 view .LVU825
 2757 0026 438D     		ldrh	r3, [r0, #42]
 2758 0028 9BB2     		uxth	r3, r3
2600:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 2759              		.loc 1 2600 9 view .LVU826
 2760 002a 013B     		subs	r3, r3, #1
 2761 002c 9BB2     		uxth	r3, r3
2600:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 2762              		.loc 1 2600 8 view .LVU827
 2763 002e 4385     		strh	r3, [r0, #42]	@ movhi
 2764 0030 C3B1     		cbz	r3, .L180
2624:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 2765              		.loc 1 2624 12 view .LVU828
 2766 0032 0020     		movs	r0, #0
 2767              	.LVL204:
 2768              	.L171:
2630:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2769              		.loc 1 2630 1 view .LVU829
 2770 0034 08BD     		pop	{r3, pc}
 2771              	.LVL205:
 2772              	.L179:
2576:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       if (hirda->Init.Parity == IRDA_PARITY_NONE)
 2773              		.loc 1 2576 7 is_stmt 1 view .LVU830
2576:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       if (hirda->Init.Parity == IRDA_PARITY_NONE)
 2774              		.loc 1 2576 11 is_stmt 0 view .LVU831
 2775 0036 416A     		ldr	r1, [r0, #36]
 2776              	.LVL206:
2577:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
 2777              		.loc 1 2577 7 is_stmt 1 view .LVU832
2577:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
 2778              		.loc 1 2577 22 is_stmt 0 view .LVU833
 2779 0038 C368     		ldr	r3, [r0, #12]
2577:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
 2780              		.loc 1 2577 10 view .LVU834
 2781 003a 33B9     		cbnz	r3, .L173
2579:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         hirda->pRxBuffPtr += 2U;
 2782              		.loc 1 2579 9 is_stmt 1 view .LVU835
2579:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         hirda->pRxBuffPtr += 2U;
ARM GAS  /tmp/ccN5ASm9.s 			page 110


 2783              		.loc 1 2579 16 is_stmt 0 view .LVU836
 2784 003c C2F30802 		ubfx	r2, r2, #0, #9
 2785              	.LVL207:
2579:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         hirda->pRxBuffPtr += 2U;
 2786              		.loc 1 2579 14 view .LVU837
 2787 0040 0A80     		strh	r2, [r1]	@ movhi
2580:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
 2788              		.loc 1 2580 9 is_stmt 1 view .LVU838
2580:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
 2789              		.loc 1 2580 27 is_stmt 0 view .LVU839
 2790 0042 436A     		ldr	r3, [r0, #36]
 2791 0044 0233     		adds	r3, r3, #2
 2792 0046 4362     		str	r3, [r0, #36]
 2793 0048 EDE7     		b	.L174
 2794              	.LVL208:
 2795              	.L173:
2584:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         hirda->pRxBuffPtr += 1U;
 2796              		.loc 1 2584 9 is_stmt 1 view .LVU840
2584:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         hirda->pRxBuffPtr += 1U;
 2797              		.loc 1 2584 16 is_stmt 0 view .LVU841
 2798 004a D2B2     		uxtb	r2, r2
 2799              	.LVL209:
2584:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         hirda->pRxBuffPtr += 1U;
 2800              		.loc 1 2584 14 view .LVU842
 2801 004c 0A80     		strh	r2, [r1]	@ movhi
2585:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
 2802              		.loc 1 2585 9 is_stmt 1 view .LVU843
2585:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
 2803              		.loc 1 2585 27 is_stmt 0 view .LVU844
 2804 004e 436A     		ldr	r3, [r0, #36]
 2805 0050 0133     		adds	r3, r3, #1
 2806 0052 4362     		str	r3, [r0, #36]
 2807 0054 E7E7     		b	.L174
 2808              	.LVL210:
 2809              	.L175:
2596:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
 2810              		.loc 1 2596 9 is_stmt 1 view .LVU845
2596:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
 2811              		.loc 1 2596 15 is_stmt 0 view .LVU846
 2812 0056 426A     		ldr	r2, [r0, #36]
2596:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
 2813              		.loc 1 2596 27 view .LVU847
 2814 0058 511C     		adds	r1, r2, #1
 2815 005a 4162     		str	r1, [r0, #36]
2596:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
 2816              		.loc 1 2596 32 view .LVU848
 2817 005c 03F07F03 		and	r3, r3, #127
 2818              	.LVL211:
2596:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
 2819              		.loc 1 2596 30 view .LVU849
 2820 0060 1370     		strb	r3, [r2]
 2821 0062 E0E7     		b	.L174
 2822              	.L180:
2603:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2823              		.loc 1 2603 7 is_stmt 1 view .LVU850
 2824 0064 0268     		ldr	r2, [r0]
 2825 0066 D368     		ldr	r3, [r2, #12]
ARM GAS  /tmp/ccN5ASm9.s 			page 111


 2826 0068 23F02003 		bic	r3, r3, #32
 2827 006c D360     		str	r3, [r2, #12]
2606:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2828              		.loc 1 2606 7 view .LVU851
 2829 006e 0268     		ldr	r2, [r0]
 2830 0070 D368     		ldr	r3, [r2, #12]
 2831 0072 23F48073 		bic	r3, r3, #256
 2832 0076 D360     		str	r3, [r2, #12]
2609:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2833              		.loc 1 2609 7 view .LVU852
 2834 0078 0268     		ldr	r2, [r0]
 2835 007a 5369     		ldr	r3, [r2, #20]
 2836 007c 23F00103 		bic	r3, r3, #1
 2837 0080 5361     		str	r3, [r2, #20]
2612:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2838              		.loc 1 2612 7 view .LVU853
2612:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2839              		.loc 1 2612 22 is_stmt 0 view .LVU854
 2840 0082 2023     		movs	r3, #32
 2841 0084 80F83630 		strb	r3, [r0, #54]
2619:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACKS */
 2842              		.loc 1 2619 7 is_stmt 1 view .LVU855
 2843 0088 FFF7FEFF 		bl	HAL_IRDA_RxCpltCallback
 2844              	.LVL212:
2622:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 2845              		.loc 1 2622 7 view .LVU856
2622:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 2846              		.loc 1 2622 14 is_stmt 0 view .LVU857
 2847 008c 0020     		movs	r0, #0
 2848 008e D1E7     		b	.L171
 2849              	.LVL213:
 2850              	.L176:
2628:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 2851              		.loc 1 2628 12 view .LVU858
 2852 0090 0220     		movs	r0, #2
 2853              	.LVL214:
2628:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 2854              		.loc 1 2628 12 view .LVU859
 2855 0092 CFE7     		b	.L171
 2856              		.cfi_endproc
 2857              	.LFE284:
 2859              		.section	.text.HAL_IRDA_RxHalfCpltCallback,"ax",%progbits
 2860              		.align	1
 2861              		.weak	HAL_IRDA_RxHalfCpltCallback
 2862              		.syntax unified
 2863              		.thumb
 2864              		.thumb_func
 2865              		.fpu fpv4-sp-d16
 2867              	HAL_IRDA_RxHalfCpltCallback:
 2868              	.LVL215:
 2869              	.LFB262:
1954:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
 2870              		.loc 1 1954 1 is_stmt 1 view -0
 2871              		.cfi_startproc
 2872              		@ args = 0, pretend = 0, frame = 0
 2873              		@ frame_needed = 0, uses_anonymous_args = 0
 2874              		@ link register save eliminated.
ARM GAS  /tmp/ccN5ASm9.s 			page 112


1956:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2875              		.loc 1 1956 3 view .LVU861
1961:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2876              		.loc 1 1961 1 is_stmt 0 view .LVU862
 2877 0000 7047     		bx	lr
 2878              		.cfi_endproc
 2879              	.LFE262:
 2881              		.section	.text.IRDA_DMAReceiveHalfCplt,"ax",%progbits
 2882              		.align	1
 2883              		.syntax unified
 2884              		.thumb
 2885              		.thumb_func
 2886              		.fpu fpv4-sp-d16
 2888              	IRDA_DMAReceiveHalfCplt:
 2889              	.LVL216:
 2890              	.LFB272:
2203:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 2891              		.loc 1 2203 1 is_stmt 1 view -0
 2892              		.cfi_startproc
 2893              		@ args = 0, pretend = 0, frame = 0
 2894              		@ frame_needed = 0, uses_anonymous_args = 0
2203:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 2895              		.loc 1 2203 1 is_stmt 0 view .LVU864
 2896 0000 08B5     		push	{r3, lr}
 2897              	.LCFI32:
 2898              		.cfi_def_cfa_offset 8
 2899              		.cfi_offset 3, -8
 2900              		.cfi_offset 14, -4
2204:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2901              		.loc 1 2204 3 is_stmt 1 view .LVU865
 2902              	.LVL217:
2211:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
 2903              		.loc 1 2211 3 view .LVU866
 2904 0002 806B     		ldr	r0, [r0, #56]
 2905              	.LVL218:
2211:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
 2906              		.loc 1 2211 3 is_stmt 0 view .LVU867
 2907 0004 FFF7FEFF 		bl	HAL_IRDA_RxHalfCpltCallback
 2908              	.LVL219:
2213:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2909              		.loc 1 2213 1 view .LVU868
 2910 0008 08BD     		pop	{r3, pc}
 2911              		.cfi_endproc
 2912              	.LFE272:
 2914              		.section	.text.HAL_IRDA_ErrorCallback,"ax",%progbits
 2915              		.align	1
 2916              		.weak	HAL_IRDA_ErrorCallback
 2917              		.syntax unified
 2918              		.thumb
 2919              		.thumb_func
 2920              		.fpu fpv4-sp-d16
 2922              	HAL_IRDA_ErrorCallback:
 2923              	.LVL220:
 2924              	.LFB263:
1970:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
 2925              		.loc 1 1970 1 is_stmt 1 view -0
 2926              		.cfi_startproc
ARM GAS  /tmp/ccN5ASm9.s 			page 113


 2927              		@ args = 0, pretend = 0, frame = 0
 2928              		@ frame_needed = 0, uses_anonymous_args = 0
 2929              		@ link register save eliminated.
1972:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2930              		.loc 1 1972 3 view .LVU870
1977:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2931              		.loc 1 1977 1 is_stmt 0 view .LVU871
 2932 0000 7047     		bx	lr
 2933              		.cfi_endproc
 2934              	.LFE263:
 2936              		.section	.text.IRDA_DMAError,"ax",%progbits
 2937              		.align	1
 2938              		.syntax unified
 2939              		.thumb
 2940              		.thumb_func
 2941              		.fpu fpv4-sp-d16
 2943              	IRDA_DMAError:
 2944              	.LVL221:
 2945              	.LFB273:
2222:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   uint32_t dmarequest = 0x00U;
 2946              		.loc 1 2222 1 is_stmt 1 view -0
 2947              		.cfi_startproc
 2948              		@ args = 0, pretend = 0, frame = 0
 2949              		@ frame_needed = 0, uses_anonymous_args = 0
2222:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   uint32_t dmarequest = 0x00U;
 2950              		.loc 1 2222 1 is_stmt 0 view .LVU873
 2951 0000 10B5     		push	{r4, lr}
 2952              	.LCFI33:
 2953              		.cfi_def_cfa_offset 8
 2954              		.cfi_offset 4, -8
 2955              		.cfi_offset 14, -4
2223:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 2956              		.loc 1 2223 3 is_stmt 1 view .LVU874
 2957              	.LVL222:
2224:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2958              		.loc 1 2224 3 view .LVU875
2224:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2959              		.loc 1 2224 23 is_stmt 0 view .LVU876
 2960 0002 846B     		ldr	r4, [r0, #56]
 2961              	.LVL223:
2227:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if ((hirda->gState == HAL_IRDA_STATE_BUSY_TX) && dmarequest)
 2962              		.loc 1 2227 3 is_stmt 1 view .LVU877
2227:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if ((hirda->gState == HAL_IRDA_STATE_BUSY_TX) && dmarequest)
 2963              		.loc 1 2227 16 is_stmt 0 view .LVU878
 2964 0004 2368     		ldr	r3, [r4]
 2965 0006 5A69     		ldr	r2, [r3, #20]
 2966              	.LVL224:
2228:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 2967              		.loc 1 2228 3 is_stmt 1 view .LVU879
2228:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 2968              		.loc 1 2228 13 is_stmt 0 view .LVU880
 2969 0008 94F83530 		ldrb	r3, [r4, #53]	@ zero_extendqisi2
 2970 000c DBB2     		uxtb	r3, r3
2228:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 2971              		.loc 1 2228 6 view .LVU881
 2972 000e 212B     		cmp	r3, #33
 2973 0010 10D0     		beq	.L189
ARM GAS  /tmp/ccN5ASm9.s 			page 114


 2974              	.LVL225:
 2975              	.L186:
2235:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if ((hirda->RxState == HAL_IRDA_STATE_BUSY_RX) && dmarequest)
 2976              		.loc 1 2235 3 is_stmt 1 view .LVU882
2235:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if ((hirda->RxState == HAL_IRDA_STATE_BUSY_RX) && dmarequest)
 2977              		.loc 1 2235 16 is_stmt 0 view .LVU883
 2978 0012 2368     		ldr	r3, [r4]
 2979 0014 5A69     		ldr	r2, [r3, #20]
 2980 0016 02F04002 		and	r2, r2, #64
 2981              	.LVL226:
2236:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 2982              		.loc 1 2236 3 is_stmt 1 view .LVU884
2236:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 2983              		.loc 1 2236 13 is_stmt 0 view .LVU885
 2984 001a 94F83630 		ldrb	r3, [r4, #54]	@ zero_extendqisi2
 2985 001e DBB2     		uxtb	r3, r3
2236:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 2986              		.loc 1 2236 6 view .LVU886
 2987 0020 222B     		cmp	r3, #34
 2988 0022 11D0     		beq	.L190
 2989              	.LVL227:
 2990              	.L187:
2242:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2991              		.loc 1 2242 3 is_stmt 1 view .LVU887
2242:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 2992              		.loc 1 2242 20 is_stmt 0 view .LVU888
 2993 0024 A36B     		ldr	r3, [r4, #56]
 2994 0026 43F01003 		orr	r3, r3, #16
 2995 002a A363     		str	r3, [r4, #56]
2249:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
 2996              		.loc 1 2249 3 is_stmt 1 view .LVU889
 2997 002c 2046     		mov	r0, r4
 2998 002e FFF7FEFF 		bl	HAL_IRDA_ErrorCallback
 2999              	.LVL228:
2251:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3000              		.loc 1 2251 1 is_stmt 0 view .LVU890
 3001 0032 10BD     		pop	{r4, pc}
 3002              	.LVL229:
 3003              	.L189:
2251:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3004              		.loc 1 2251 1 view .LVU891
 3005 0034 02F08002 		and	r2, r2, #128
 3006              	.LVL230:
2228:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 3007              		.loc 1 2228 49 discriminator 1 view .LVU892
 3008 0038 002A     		cmp	r2, #0
 3009 003a EAD0     		beq	.L186
2230:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     IRDA_EndTxTransfer(hirda);
 3010              		.loc 1 2230 5 is_stmt 1 view .LVU893
2230:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     IRDA_EndTxTransfer(hirda);
 3011              		.loc 1 2230 24 is_stmt 0 view .LVU894
 3012 003c 0023     		movs	r3, #0
 3013 003e 6384     		strh	r3, [r4, #34]	@ movhi
2231:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 3014              		.loc 1 2231 5 is_stmt 1 view .LVU895
 3015 0040 2046     		mov	r0, r4
 3016              	.LVL231:
ARM GAS  /tmp/ccN5ASm9.s 			page 115


2231:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 3017              		.loc 1 2231 5 is_stmt 0 view .LVU896
 3018 0042 FFF7FEFF 		bl	IRDA_EndTxTransfer
 3019              	.LVL232:
 3020 0046 E4E7     		b	.L186
 3021              	.LVL233:
 3022              	.L190:
2236:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 3023              		.loc 1 2236 50 discriminator 1 view .LVU897
 3024 0048 002A     		cmp	r2, #0
 3025 004a EBD0     		beq	.L187
2238:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     IRDA_EndRxTransfer(hirda);
 3026              		.loc 1 2238 5 is_stmt 1 view .LVU898
2238:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     IRDA_EndRxTransfer(hirda);
 3027              		.loc 1 2238 24 is_stmt 0 view .LVU899
 3028 004c 0023     		movs	r3, #0
 3029 004e 6385     		strh	r3, [r4, #42]	@ movhi
2239:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 3030              		.loc 1 2239 5 is_stmt 1 view .LVU900
 3031 0050 2046     		mov	r0, r4
 3032 0052 FFF7FEFF 		bl	IRDA_EndRxTransfer
 3033              	.LVL234:
2239:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 3034              		.loc 1 2239 5 is_stmt 0 view .LVU901
 3035 0056 E5E7     		b	.L187
 3036              		.cfi_endproc
 3037              	.LFE273:
 3039              		.section	.text.HAL_IRDA_IRQHandler,"ax",%progbits
 3040              		.align	1
 3041              		.global	HAL_IRDA_IRQHandler
 3042              		.syntax unified
 3043              		.thumb
 3044              		.thumb_func
 3045              		.fpu fpv4-sp-d16
 3047              	HAL_IRDA_IRQHandler:
 3048              	.LVL235:
 3049              	.LFB258:
1761:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   uint32_t isrflags   = READ_REG(hirda->Instance->SR);
 3050              		.loc 1 1761 1 is_stmt 1 view -0
 3051              		.cfi_startproc
 3052              		@ args = 0, pretend = 0, frame = 0
 3053              		@ frame_needed = 0, uses_anonymous_args = 0
1761:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   uint32_t isrflags   = READ_REG(hirda->Instance->SR);
 3054              		.loc 1 1761 1 is_stmt 0 view .LVU903
 3055 0000 10B5     		push	{r4, lr}
 3056              	.LCFI34:
 3057              		.cfi_def_cfa_offset 8
 3058              		.cfi_offset 4, -8
 3059              		.cfi_offset 14, -4
 3060 0002 0446     		mov	r4, r0
1762:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   uint32_t cr1its     = READ_REG(hirda->Instance->CR1);
 3061              		.loc 1 1762 3 is_stmt 1 view .LVU904
1762:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   uint32_t cr1its     = READ_REG(hirda->Instance->CR1);
 3062              		.loc 1 1762 25 is_stmt 0 view .LVU905
 3063 0004 0268     		ldr	r2, [r0]
1762:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   uint32_t cr1its     = READ_REG(hirda->Instance->CR1);
 3064              		.loc 1 1762 12 view .LVU906
ARM GAS  /tmp/ccN5ASm9.s 			page 116


 3065 0006 1368     		ldr	r3, [r2]
 3066              	.LVL236:
1763:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   uint32_t cr3its     = READ_REG(hirda->Instance->CR3);
 3067              		.loc 1 1763 3 is_stmt 1 view .LVU907
1763:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   uint32_t cr3its     = READ_REG(hirda->Instance->CR3);
 3068              		.loc 1 1763 12 is_stmt 0 view .LVU908
 3069 0008 D168     		ldr	r1, [r2, #12]
 3070              	.LVL237:
1764:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   uint32_t errorflags = 0x00U;
 3071              		.loc 1 1764 3 is_stmt 1 view .LVU909
1764:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   uint32_t errorflags = 0x00U;
 3072              		.loc 1 1764 12 is_stmt 0 view .LVU910
 3073 000a 5269     		ldr	r2, [r2, #20]
 3074              	.LVL238:
1765:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   uint32_t dmarequest = 0x00U;
 3075              		.loc 1 1765 3 is_stmt 1 view .LVU911
1766:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3076              		.loc 1 1766 3 view .LVU912
1769:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   if (errorflags == RESET)
 3077              		.loc 1 1769 3 view .LVU913
1770:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 3078              		.loc 1 1770 3 view .LVU914
1770:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 3079              		.loc 1 1770 6 is_stmt 0 view .LVU915
 3080 000c 13F00F00 		ands	r0, r3, #15
 3081              	.LVL239:
1770:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 3082              		.loc 1 1770 6 view .LVU916
 3083 0010 05D1     		bne	.L192
1773:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 3084              		.loc 1 1773 5 is_stmt 1 view .LVU917
1773:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 3085              		.loc 1 1773 8 is_stmt 0 view .LVU918
 3086 0012 13F0200F 		tst	r3, #32
 3087 0016 02D0     		beq	.L192
1773:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 3088              		.loc 1 1773 47 discriminator 1 view .LVU919
 3089 0018 11F0200F 		tst	r1, #32
 3090 001c 13D1     		bne	.L209
 3091              	.L192:
1781:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 3092              		.loc 1 1781 3 is_stmt 1 view .LVU920
1781:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 3093              		.loc 1 1781 6 is_stmt 0 view .LVU921
 3094 001e 28B1     		cbz	r0, .L194
1781:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 3095              		.loc 1 1781 29 discriminator 1 view .LVU922
 3096 0020 12F00102 		ands	r2, r2, #1
 3097              	.LVL240:
1781:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 3098              		.loc 1 1781 29 discriminator 1 view .LVU923
 3099 0024 13D1     		bne	.L195
1781:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 3100              		.loc 1 1781 69 discriminator 2 view .LVU924
 3101 0026 11F4907F 		tst	r1, #288
 3102 002a 10D1     		bne	.L195
 3103              	.L194:
ARM GAS  /tmp/ccN5ASm9.s 			page 117


1885:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 3104              		.loc 1 1885 3 is_stmt 1 view .LVU925
1885:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 3105              		.loc 1 1885 6 is_stmt 0 view .LVU926
 3106 002c 13F0800F 		tst	r3, #128
 3107 0030 02D0     		beq	.L207
1885:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 3108              		.loc 1 1885 44 discriminator 1 view .LVU927
 3109 0032 11F0800F 		tst	r1, #128
 3110 0036 6CD1     		bne	.L210
 3111              	.L207:
1892:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 3112              		.loc 1 1892 3 is_stmt 1 view .LVU928
1892:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 3113              		.loc 1 1892 6 is_stmt 0 view .LVU929
 3114 0038 13F0400F 		tst	r3, #64
 3115 003c 02D0     		beq	.L191
1892:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 3116              		.loc 1 1892 43 discriminator 1 view .LVU930
 3117 003e 11F0400F 		tst	r1, #64
 3118 0042 6AD1     		bne	.L211
 3119              	.LVL241:
 3120              	.L191:
1897:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3121              		.loc 1 1897 1 view .LVU931
 3122 0044 10BD     		pop	{r4, pc}
 3123              	.LVL242:
 3124              	.L209:
1775:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       return;
 3125              		.loc 1 1775 7 is_stmt 1 view .LVU932
 3126 0046 2046     		mov	r0, r4
 3127              	.LVL243:
1775:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       return;
 3128              		.loc 1 1775 7 is_stmt 0 view .LVU933
 3129 0048 FFF7FEFF 		bl	IRDA_Receive_IT
 3130              	.LVL244:
1776:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 3131              		.loc 1 1776 7 is_stmt 1 view .LVU934
 3132 004c FAE7     		b	.L191
 3133              	.LVL245:
 3134              	.L195:
1784:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 3135              		.loc 1 1784 5 view .LVU935
1784:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 3136              		.loc 1 1784 8 is_stmt 0 view .LVU936
 3137 004e 13F0010F 		tst	r3, #1
 3138 0052 06D0     		beq	.L196
1784:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 3139              		.loc 1 1784 45 discriminator 1 view .LVU937
 3140 0054 11F4807F 		tst	r1, #256
 3141 0058 03D0     		beq	.L196
1786:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 3142              		.loc 1 1786 7 is_stmt 1 view .LVU938
1786:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 3143              		.loc 1 1786 24 is_stmt 0 view .LVU939
 3144 005a A06B     		ldr	r0, [r4, #56]
 3145              	.LVL246:
ARM GAS  /tmp/ccN5ASm9.s 			page 118


1786:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 3146              		.loc 1 1786 24 view .LVU940
 3147 005c 40F00100 		orr	r0, r0, #1
 3148 0060 A063     		str	r0, [r4, #56]
 3149              	.L196:
1790:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 3150              		.loc 1 1790 5 is_stmt 1 view .LVU941
1790:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 3151              		.loc 1 1790 8 is_stmt 0 view .LVU942
 3152 0062 13F0040F 		tst	r3, #4
 3153 0066 04D0     		beq	.L197
1790:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 3154              		.loc 1 1790 45 discriminator 1 view .LVU943
 3155 0068 1AB1     		cbz	r2, .L197
1792:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 3156              		.loc 1 1792 7 is_stmt 1 view .LVU944
1792:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 3157              		.loc 1 1792 24 is_stmt 0 view .LVU945
 3158 006a A06B     		ldr	r0, [r4, #56]
 3159 006c 40F00200 		orr	r0, r0, #2
 3160 0070 A063     		str	r0, [r4, #56]
 3161              	.L197:
1796:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 3162              		.loc 1 1796 5 is_stmt 1 view .LVU946
1796:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 3163              		.loc 1 1796 8 is_stmt 0 view .LVU947
 3164 0072 13F0020F 		tst	r3, #2
 3165 0076 04D0     		beq	.L198
1796:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 3166              		.loc 1 1796 45 discriminator 1 view .LVU948
 3167 0078 1AB1     		cbz	r2, .L198
1798:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 3168              		.loc 1 1798 7 is_stmt 1 view .LVU949
1798:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 3169              		.loc 1 1798 24 is_stmt 0 view .LVU950
 3170 007a A06B     		ldr	r0, [r4, #56]
 3171 007c 40F00400 		orr	r0, r0, #4
 3172 0080 A063     		str	r0, [r4, #56]
 3173              	.L198:
1802:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 3174              		.loc 1 1802 5 is_stmt 1 view .LVU951
1802:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 3175              		.loc 1 1802 8 is_stmt 0 view .LVU952
 3176 0082 13F0080F 		tst	r3, #8
 3177 0086 07D0     		beq	.L199
1802:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 3178              		.loc 1 1802 46 discriminator 1 view .LVU953
 3179 0088 11F0200F 		tst	r1, #32
 3180 008c 00D1     		bne	.L200
1802:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 3181              		.loc 1 1802 89 discriminator 2 view .LVU954
 3182 008e 1AB1     		cbz	r2, .L199
 3183              	.L200:
1804:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 3184              		.loc 1 1804 7 is_stmt 1 view .LVU955
1804:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 3185              		.loc 1 1804 24 is_stmt 0 view .LVU956
ARM GAS  /tmp/ccN5ASm9.s 			page 119


 3186 0090 A26B     		ldr	r2, [r4, #56]
 3187 0092 42F00802 		orr	r2, r2, #8
 3188 0096 A263     		str	r2, [r4, #56]
 3189              	.L199:
1807:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 3190              		.loc 1 1807 5 is_stmt 1 view .LVU957
1807:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 3191              		.loc 1 1807 14 is_stmt 0 view .LVU958
 3192 0098 A26B     		ldr	r2, [r4, #56]
1807:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 3193              		.loc 1 1807 8 view .LVU959
 3194 009a 002A     		cmp	r2, #0
 3195 009c D2D0     		beq	.L191
1810:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
 3196              		.loc 1 1810 7 is_stmt 1 view .LVU960
1810:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
 3197              		.loc 1 1810 10 is_stmt 0 view .LVU961
 3198 009e 13F0200F 		tst	r3, #32
 3199 00a2 02D0     		beq	.L202
1810:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
 3200              		.loc 1 1810 49 discriminator 1 view .LVU962
 3201 00a4 11F0200F 		tst	r1, #32
 3202 00a8 21D1     		bne	.L212
 3203              	.LVL247:
 3204              	.L202:
1817:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       if (((hirda->ErrorCode & HAL_IRDA_ERROR_ORE) != RESET) || dmarequest)
 3205              		.loc 1 1817 7 is_stmt 1 view .LVU963
1817:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       if (((hirda->ErrorCode & HAL_IRDA_ERROR_ORE) != RESET) || dmarequest)
 3206              		.loc 1 1817 20 is_stmt 0 view .LVU964
 3207 00aa 2368     		ldr	r3, [r4]
 3208 00ac 5B69     		ldr	r3, [r3, #20]
 3209 00ae 03F04003 		and	r3, r3, #64
 3210              	.LVL248:
1818:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
 3211              		.loc 1 1818 7 is_stmt 1 view .LVU965
1818:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
 3212              		.loc 1 1818 18 is_stmt 0 view .LVU966
 3213 00b2 A26B     		ldr	r2, [r4, #56]
1818:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
 3214              		.loc 1 1818 10 view .LVU967
 3215 00b4 12F0080F 		tst	r2, #8
 3216 00b8 00D1     		bne	.L203
1818:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
 3217              		.loc 1 1818 62 discriminator 1 view .LVU968
 3218 00ba 23B3     		cbz	r3, .L204
 3219              	.L203:
1823:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3220              		.loc 1 1823 9 is_stmt 1 view .LVU969
 3221 00bc 2046     		mov	r0, r4
 3222 00be FFF7FEFF 		bl	IRDA_EndRxTransfer
 3223              	.LVL249:
1826:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         {
 3224              		.loc 1 1826 9 view .LVU970
1826:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         {
 3225              		.loc 1 1826 13 is_stmt 0 view .LVU971
 3226 00c2 2368     		ldr	r3, [r4]
 3227 00c4 5A69     		ldr	r2, [r3, #20]
ARM GAS  /tmp/ccN5ASm9.s 			page 120


1826:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         {
 3228              		.loc 1 1826 12 view .LVU972
 3229 00c6 12F0400F 		tst	r2, #64
 3230 00ca 18D0     		beq	.L205
1828:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3231              		.loc 1 1828 11 is_stmt 1 view .LVU973
 3232 00cc 5A69     		ldr	r2, [r3, #20]
 3233 00ce 22F04002 		bic	r2, r2, #64
 3234 00d2 5A61     		str	r2, [r3, #20]
1831:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****           {
 3235              		.loc 1 1831 11 view .LVU974
1831:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****           {
 3236              		.loc 1 1831 20 is_stmt 0 view .LVU975
 3237 00d4 236B     		ldr	r3, [r4, #48]
1831:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****           {
 3238              		.loc 1 1831 14 view .LVU976
 3239 00d6 73B1     		cbz	r3, .L206
1835:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3240              		.loc 1 1835 13 is_stmt 1 view .LVU977
1835:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3241              		.loc 1 1835 46 is_stmt 0 view .LVU978
 3242 00d8 124A     		ldr	r2, .L213
 3243 00da 1A65     		str	r2, [r3, #80]
1838:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****             {
 3244              		.loc 1 1838 13 is_stmt 1 view .LVU979
1838:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****             {
 3245              		.loc 1 1838 17 is_stmt 0 view .LVU980
 3246 00dc 206B     		ldr	r0, [r4, #48]
 3247 00de FFF7FEFF 		bl	HAL_DMA_Abort_IT
 3248              	.LVL250:
1838:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****             {
 3249              		.loc 1 1838 16 view .LVU981
 3250 00e2 0028     		cmp	r0, #0
 3251 00e4 AED0     		beq	.L191
1841:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****             }
 3252              		.loc 1 1841 15 is_stmt 1 view .LVU982
1841:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****             }
 3253              		.loc 1 1841 20 is_stmt 0 view .LVU983
 3254 00e6 206B     		ldr	r0, [r4, #48]
1841:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****             }
 3255              		.loc 1 1841 28 view .LVU984
 3256 00e8 036D     		ldr	r3, [r0, #80]
1841:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****             }
 3257              		.loc 1 1841 15 view .LVU985
 3258 00ea 9847     		blx	r3
 3259              	.LVL251:
 3260 00ec AAE7     		b	.L191
 3261              	.LVL252:
 3262              	.L212:
1812:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
 3263              		.loc 1 1812 9 is_stmt 1 view .LVU986
 3264 00ee 2046     		mov	r0, r4
 3265 00f0 FFF7FEFF 		bl	IRDA_Receive_IT
 3266              	.LVL253:
1812:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
 3267              		.loc 1 1812 9 is_stmt 0 view .LVU987
 3268 00f4 D9E7     		b	.L202
ARM GAS  /tmp/ccN5ASm9.s 			page 121


 3269              	.LVL254:
 3270              	.L206:
1851:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
 3271              		.loc 1 1851 13 is_stmt 1 view .LVU988
 3272 00f6 2046     		mov	r0, r4
 3273 00f8 FFF7FEFF 		bl	HAL_IRDA_ErrorCallback
 3274              	.LVL255:
 3275 00fc A2E7     		b	.L191
 3276              	.L205:
1862:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
 3277              		.loc 1 1862 11 view .LVU989
 3278 00fe 2046     		mov	r0, r4
 3279 0100 FFF7FEFF 		bl	HAL_IRDA_ErrorCallback
 3280              	.LVL256:
 3281 0104 9EE7     		b	.L191
 3282              	.LVL257:
 3283              	.L204:
1875:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
 3284              		.loc 1 1875 9 view .LVU990
 3285 0106 2046     		mov	r0, r4
 3286 0108 FFF7FEFF 		bl	HAL_IRDA_ErrorCallback
 3287              	.LVL258:
1878:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
 3288              		.loc 1 1878 9 view .LVU991
1878:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
 3289              		.loc 1 1878 26 is_stmt 0 view .LVU992
 3290 010c 0023     		movs	r3, #0
 3291 010e A363     		str	r3, [r4, #56]
1881:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   } /* End if some error occurs */
 3292              		.loc 1 1881 5 is_stmt 1 view .LVU993
 3293 0110 98E7     		b	.L191
 3294              	.LVL259:
 3295              	.L210:
1887:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     return;
 3296              		.loc 1 1887 5 view .LVU994
 3297 0112 2046     		mov	r0, r4
 3298              	.LVL260:
1887:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     return;
 3299              		.loc 1 1887 5 is_stmt 0 view .LVU995
 3300 0114 FFF7FEFF 		bl	IRDA_Transmit_IT
 3301              	.LVL261:
1888:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 3302              		.loc 1 1888 5 is_stmt 1 view .LVU996
 3303 0118 94E7     		b	.L191
 3304              	.LVL262:
 3305              	.L211:
1894:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     return;
 3306              		.loc 1 1894 5 view .LVU997
 3307 011a 2046     		mov	r0, r4
 3308              	.LVL263:
1894:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     return;
 3309              		.loc 1 1894 5 is_stmt 0 view .LVU998
 3310 011c FFF7FEFF 		bl	IRDA_EndTransmit_IT
 3311              	.LVL264:
1895:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   }
 3312              		.loc 1 1895 5 is_stmt 1 view .LVU999
 3313 0120 90E7     		b	.L191
ARM GAS  /tmp/ccN5ASm9.s 			page 122


 3314              	.L214:
 3315 0122 00BF     		.align	2
 3316              	.L213:
 3317 0124 00000000 		.word	IRDA_DMAAbortOnError
 3318              		.cfi_endproc
 3319              	.LFE258:
 3321              		.section	.text.IRDA_DMAAbortOnError,"ax",%progbits
 3322              		.align	1
 3323              		.syntax unified
 3324              		.thumb
 3325              		.thumb_func
 3326              		.fpu fpv4-sp-d16
 3328              	IRDA_DMAAbortOnError:
 3329              	.LVL265:
 3330              	.LFB277:
2327:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 3331              		.loc 1 2327 1 view -0
 3332              		.cfi_startproc
 3333              		@ args = 0, pretend = 0, frame = 0
 3334              		@ frame_needed = 0, uses_anonymous_args = 0
2327:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 3335              		.loc 1 2327 1 is_stmt 0 view .LVU1001
 3336 0000 08B5     		push	{r3, lr}
 3337              	.LCFI35:
 3338              		.cfi_def_cfa_offset 8
 3339              		.cfi_offset 3, -8
 3340              		.cfi_offset 14, -4
2328:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->RxXferCount = 0x00U;
 3341              		.loc 1 2328 3 is_stmt 1 view .LVU1002
2328:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->RxXferCount = 0x00U;
 3342              		.loc 1 2328 23 is_stmt 0 view .LVU1003
 3343 0002 806B     		ldr	r0, [r0, #56]
 3344              	.LVL266:
2329:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->TxXferCount = 0x00U;
 3345              		.loc 1 2329 3 is_stmt 1 view .LVU1004
2329:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->TxXferCount = 0x00U;
 3346              		.loc 1 2329 22 is_stmt 0 view .LVU1005
 3347 0004 0023     		movs	r3, #0
 3348 0006 4385     		strh	r3, [r0, #42]	@ movhi
2330:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3349              		.loc 1 2330 3 is_stmt 1 view .LVU1006
2330:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3350              		.loc 1 2330 22 is_stmt 0 view .LVU1007
 3351 0008 4384     		strh	r3, [r0, #34]	@ movhi
2337:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
 3352              		.loc 1 2337 3 is_stmt 1 view .LVU1008
 3353 000a FFF7FEFF 		bl	HAL_IRDA_ErrorCallback
 3354              	.LVL267:
2339:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3355              		.loc 1 2339 1 is_stmt 0 view .LVU1009
 3356 000e 08BD     		pop	{r3, pc}
 3357              		.cfi_endproc
 3358              	.LFE277:
 3360              		.section	.text.HAL_IRDA_AbortCpltCallback,"ax",%progbits
 3361              		.align	1
 3362              		.weak	HAL_IRDA_AbortCpltCallback
 3363              		.syntax unified
ARM GAS  /tmp/ccN5ASm9.s 			page 123


 3364              		.thumb
 3365              		.thumb_func
 3366              		.fpu fpv4-sp-d16
 3368              	HAL_IRDA_AbortCpltCallback:
 3369              	.LVL268:
 3370              	.LFB264:
1986:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
 3371              		.loc 1 1986 1 is_stmt 1 view -0
 3372              		.cfi_startproc
 3373              		@ args = 0, pretend = 0, frame = 0
 3374              		@ frame_needed = 0, uses_anonymous_args = 0
 3375              		@ link register save eliminated.
1988:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3376              		.loc 1 1988 3 view .LVU1011
1993:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3377              		.loc 1 1993 1 is_stmt 0 view .LVU1012
 3378 0000 7047     		bx	lr
 3379              		.cfi_endproc
 3380              	.LFE264:
 3382              		.section	.text.HAL_IRDA_Abort_IT,"ax",%progbits
 3383              		.align	1
 3384              		.global	HAL_IRDA_Abort_IT
 3385              		.syntax unified
 3386              		.thumb
 3387              		.thumb_func
 3388              		.fpu fpv4-sp-d16
 3390              	HAL_IRDA_Abort_IT:
 3391              	.LVL269:
 3392              	.LFB255:
1486:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   uint32_t AbortCplt = 0x01U;
 3393              		.loc 1 1486 1 is_stmt 1 view -0
 3394              		.cfi_startproc
 3395              		@ args = 0, pretend = 0, frame = 0
 3396              		@ frame_needed = 0, uses_anonymous_args = 0
1486:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   uint32_t AbortCplt = 0x01U;
 3397              		.loc 1 1486 1 is_stmt 0 view .LVU1014
 3398 0000 10B5     		push	{r4, lr}
 3399              	.LCFI36:
 3400              		.cfi_def_cfa_offset 8
 3401              		.cfi_offset 4, -8
 3402              		.cfi_offset 14, -4
 3403 0002 0446     		mov	r4, r0
1487:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3404              		.loc 1 1487 3 is_stmt 1 view .LVU1015
 3405              	.LVL270:
1490:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 3406              		.loc 1 1490 3 view .LVU1016
 3407 0004 0268     		ldr	r2, [r0]
 3408 0006 D368     		ldr	r3, [r2, #12]
 3409 0008 23F4F073 		bic	r3, r3, #480
 3410 000c D360     		str	r3, [r2, #12]
1491:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3411              		.loc 1 1491 3 view .LVU1017
 3412 000e 0268     		ldr	r2, [r0]
 3413 0010 5369     		ldr	r3, [r2, #20]
 3414 0012 23F00103 		bic	r3, r3, #1
 3415 0016 5361     		str	r3, [r2, #20]
ARM GAS  /tmp/ccN5ASm9.s 			page 124


1496:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 3416              		.loc 1 1496 3 view .LVU1018
1496:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 3417              		.loc 1 1496 12 is_stmt 0 view .LVU1019
 3418 0018 C36A     		ldr	r3, [r0, #44]
1496:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 3419              		.loc 1 1496 6 view .LVU1020
 3420 001a 33B1     		cbz	r3, .L219
1500:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 3421              		.loc 1 1500 5 is_stmt 1 view .LVU1021
1500:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 3422              		.loc 1 1500 9 is_stmt 0 view .LVU1022
 3423 001c 0268     		ldr	r2, [r0]
 3424 001e 5269     		ldr	r2, [r2, #20]
1500:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 3425              		.loc 1 1500 8 view .LVU1023
 3426 0020 12F0800F 		tst	r2, #128
 3427 0024 1DD0     		beq	.L220
1502:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 3428              		.loc 1 1502 7 is_stmt 1 view .LVU1024
1502:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 3429              		.loc 1 1502 40 is_stmt 0 view .LVU1025
 3430 0026 254A     		ldr	r2, .L231
 3431 0028 1A65     		str	r2, [r3, #80]
 3432              	.L219:
1510:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 3433              		.loc 1 1510 3 is_stmt 1 view .LVU1026
1510:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 3434              		.loc 1 1510 12 is_stmt 0 view .LVU1027
 3435 002a 236B     		ldr	r3, [r4, #48]
1510:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 3436              		.loc 1 1510 6 view .LVU1028
 3437 002c 33B1     		cbz	r3, .L221
1514:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 3438              		.loc 1 1514 5 is_stmt 1 view .LVU1029
1514:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 3439              		.loc 1 1514 9 is_stmt 0 view .LVU1030
 3440 002e 2268     		ldr	r2, [r4]
 3441 0030 5269     		ldr	r2, [r2, #20]
1514:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 3442              		.loc 1 1514 8 view .LVU1031
 3443 0032 12F0400F 		tst	r2, #64
 3444 0036 17D0     		beq	.L222
1516:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 3445              		.loc 1 1516 7 is_stmt 1 view .LVU1032
1516:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 3446              		.loc 1 1516 40 is_stmt 0 view .LVU1033
 3447 0038 214A     		ldr	r2, .L231+4
 3448 003a 1A65     		str	r2, [r3, #80]
 3449              	.L221:
1525:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 3450              		.loc 1 1525 3 is_stmt 1 view .LVU1034
1525:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 3451              		.loc 1 1525 7 is_stmt 0 view .LVU1035
 3452 003c 2368     		ldr	r3, [r4]
 3453 003e 5A69     		ldr	r2, [r3, #20]
1525:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
ARM GAS  /tmp/ccN5ASm9.s 			page 125


 3454              		.loc 1 1525 6 view .LVU1036
 3455 0040 12F0800F 		tst	r2, #128
 3456 0044 13D0     		beq	.L227
1528:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3457              		.loc 1 1528 5 is_stmt 1 view .LVU1037
 3458 0046 5A69     		ldr	r2, [r3, #20]
 3459 0048 22F08002 		bic	r2, r2, #128
 3460 004c 5A61     		str	r2, [r3, #20]
1531:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 3461              		.loc 1 1531 5 view .LVU1038
1531:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 3462              		.loc 1 1531 14 is_stmt 0 view .LVU1039
 3463 004e E06A     		ldr	r0, [r4, #44]
 3464              	.LVL271:
1531:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 3465              		.loc 1 1531 8 view .LVU1040
 3466 0050 60B3     		cbz	r0, .L228
1537:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
 3467              		.loc 1 1537 7 is_stmt 1 view .LVU1041
1537:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
 3468              		.loc 1 1537 11 is_stmt 0 view .LVU1042
 3469 0052 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 3470              	.LVL272:
1537:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
 3471              		.loc 1 1537 10 view .LVU1043
 3472 0056 58B3     		cbz	r0, .L229
1539:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
 3473              		.loc 1 1539 9 is_stmt 1 view .LVU1044
1539:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
 3474              		.loc 1 1539 14 is_stmt 0 view .LVU1045
 3475 0058 E36A     		ldr	r3, [r4, #44]
1539:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
 3476              		.loc 1 1539 42 view .LVU1046
 3477 005a 0022     		movs	r2, #0
 3478 005c 1A65     		str	r2, [r3, #80]
1487:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3479              		.loc 1 1487 12 view .LVU1047
 3480 005e 0121     		movs	r1, #1
 3481 0060 06E0     		b	.L223
 3482              	.LVL273:
 3483              	.L220:
1506:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 3484              		.loc 1 1506 7 is_stmt 1 view .LVU1048
1506:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 3485              		.loc 1 1506 40 is_stmt 0 view .LVU1049
 3486 0062 0022     		movs	r2, #0
 3487 0064 1A65     		str	r2, [r3, #80]
 3488 0066 E0E7     		b	.L219
 3489              	.L222:
1520:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 3490              		.loc 1 1520 7 is_stmt 1 view .LVU1050
1520:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     }
 3491              		.loc 1 1520 40 is_stmt 0 view .LVU1051
 3492 0068 0022     		movs	r2, #0
 3493 006a 1A65     		str	r2, [r3, #80]
 3494 006c E6E7     		b	.L221
 3495              	.L227:
ARM GAS  /tmp/ccN5ASm9.s 			page 126


1487:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3496              		.loc 1 1487 12 view .LVU1052
 3497 006e 0121     		movs	r1, #1
 3498              	.LVL274:
 3499              	.L223:
1549:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 3500              		.loc 1 1549 3 is_stmt 1 view .LVU1053
1549:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 3501              		.loc 1 1549 7 is_stmt 0 view .LVU1054
 3502 0070 2368     		ldr	r3, [r4]
 3503 0072 5A69     		ldr	r2, [r3, #20]
1549:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 3504              		.loc 1 1549 6 view .LVU1055
 3505 0074 12F0400F 		tst	r2, #64
 3506 0078 1CD0     		beq	.L224
1551:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3507              		.loc 1 1551 5 is_stmt 1 view .LVU1056
 3508 007a 5A69     		ldr	r2, [r3, #20]
 3509 007c 22F04002 		bic	r2, r2, #64
 3510 0080 5A61     		str	r2, [r3, #20]
1554:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 3511              		.loc 1 1554 5 view .LVU1057
1554:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 3512              		.loc 1 1554 14 is_stmt 0 view .LVU1058
 3513 0082 206B     		ldr	r0, [r4, #48]
1554:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 3514              		.loc 1 1554 8 view .LVU1059
 3515 0084 B0B1     		cbz	r0, .L224
1560:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
 3516              		.loc 1 1560 7 is_stmt 1 view .LVU1060
1560:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
 3517              		.loc 1 1560 11 is_stmt 0 view .LVU1061
 3518 0086 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 3519              	.LVL275:
1560:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
 3520              		.loc 1 1560 10 view .LVU1062
 3521 008a A8B1     		cbz	r0, .L225
1562:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         AbortCplt = 0x01U;
 3522              		.loc 1 1562 9 is_stmt 1 view .LVU1063
1562:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         AbortCplt = 0x01U;
 3523              		.loc 1 1562 14 is_stmt 0 view .LVU1064
 3524 008c 236B     		ldr	r3, [r4, #48]
1562:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****         AbortCplt = 0x01U;
 3525              		.loc 1 1562 42 view .LVU1065
 3526 008e 0022     		movs	r2, #0
 3527 0090 1A65     		str	r2, [r3, #80]
1563:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
 3528              		.loc 1 1563 9 is_stmt 1 view .LVU1066
 3529              	.LVL276:
1573:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 3530              		.loc 1 1573 3 view .LVU1067
 3531              	.L226:
1576:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->RxXferCount = 0x00U;
 3532              		.loc 1 1576 5 view .LVU1068
1576:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->RxXferCount = 0x00U;
 3533              		.loc 1 1576 24 is_stmt 0 view .LVU1069
 3534 0092 0023     		movs	r3, #0
ARM GAS  /tmp/ccN5ASm9.s 			page 127


 3535 0094 6384     		strh	r3, [r4, #34]	@ movhi
1577:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3536              		.loc 1 1577 5 is_stmt 1 view .LVU1070
1577:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3537              		.loc 1 1577 24 is_stmt 0 view .LVU1071
 3538 0096 6385     		strh	r3, [r4, #42]	@ movhi
1580:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3539              		.loc 1 1580 5 is_stmt 1 view .LVU1072
1580:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3540              		.loc 1 1580 22 is_stmt 0 view .LVU1073
 3541 0098 A363     		str	r3, [r4, #56]
1583:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_READY;
 3542              		.loc 1 1583 5 is_stmt 1 view .LVU1074
1583:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_READY;
 3543              		.loc 1 1583 20 is_stmt 0 view .LVU1075
 3544 009a 2023     		movs	r3, #32
 3545 009c 84F83530 		strb	r3, [r4, #53]
1584:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3546              		.loc 1 1584 5 is_stmt 1 view .LVU1076
1584:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3547              		.loc 1 1584 20 is_stmt 0 view .LVU1077
 3548 00a0 84F83630 		strb	r3, [r4, #54]
1592:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
 3549              		.loc 1 1592 5 is_stmt 1 view .LVU1078
 3550 00a4 2046     		mov	r0, r4
 3551 00a6 FFF7FEFF 		bl	HAL_IRDA_AbortCpltCallback
 3552              	.LVL277:
 3553 00aa 05E0     		b	.L225
 3554              	.LVL278:
 3555              	.L228:
1487:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3556              		.loc 1 1487 12 is_stmt 0 view .LVU1079
 3557 00ac 0121     		movs	r1, #1
 3558 00ae DFE7     		b	.L223
 3559              	.L229:
1543:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
 3560              		.loc 1 1543 19 view .LVU1080
 3561 00b0 0021     		movs	r1, #0
 3562 00b2 DDE7     		b	.L223
 3563              	.LVL279:
 3564              	.L224:
1573:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 3565              		.loc 1 1573 3 is_stmt 1 view .LVU1081
1573:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 3566              		.loc 1 1573 6 is_stmt 0 view .LVU1082
 3567 00b4 0029     		cmp	r1, #0
 3568 00b6 ECD1     		bne	.L226
 3569              	.LVL280:
 3570              	.L225:
1596:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
 3571              		.loc 1 1596 3 is_stmt 1 view .LVU1083
1597:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3572              		.loc 1 1597 1 is_stmt 0 view .LVU1084
 3573 00b8 0020     		movs	r0, #0
 3574 00ba 10BD     		pop	{r4, pc}
 3575              	.LVL281:
 3576              	.L232:
ARM GAS  /tmp/ccN5ASm9.s 			page 128


1597:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3577              		.loc 1 1597 1 view .LVU1085
 3578              		.align	2
 3579              	.L231:
 3580 00bc 00000000 		.word	IRDA_DMATxAbortCallback
 3581 00c0 00000000 		.word	IRDA_DMARxAbortCallback
 3582              		.cfi_endproc
 3583              	.LFE255:
 3585              		.section	.text.IRDA_DMARxAbortCallback,"ax",%progbits
 3586              		.align	1
 3587              		.syntax unified
 3588              		.thumb
 3589              		.thumb_func
 3590              		.fpu fpv4-sp-d16
 3592              	IRDA_DMARxAbortCallback:
 3593              	.LVL282:
 3594              	.LFB279:
2394:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 3595              		.loc 1 2394 1 is_stmt 1 view -0
 3596              		.cfi_startproc
 3597              		@ args = 0, pretend = 0, frame = 0
 3598              		@ frame_needed = 0, uses_anonymous_args = 0
2394:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 3599              		.loc 1 2394 1 is_stmt 0 view .LVU1087
 3600 0000 08B5     		push	{r3, lr}
 3601              	.LCFI37:
 3602              		.cfi_def_cfa_offset 8
 3603              		.cfi_offset 3, -8
 3604              		.cfi_offset 14, -4
2395:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3605              		.loc 1 2395 3 is_stmt 1 view .LVU1088
2395:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3606              		.loc 1 2395 23 is_stmt 0 view .LVU1089
 3607 0002 806B     		ldr	r0, [r0, #56]
 3608              	.LVL283:
2397:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3609              		.loc 1 2397 3 is_stmt 1 view .LVU1090
2397:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3610              		.loc 1 2397 8 is_stmt 0 view .LVU1091
 3611 0004 036B     		ldr	r3, [r0, #48]
2397:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3612              		.loc 1 2397 36 view .LVU1092
 3613 0006 0022     		movs	r2, #0
 3614 0008 1A65     		str	r2, [r3, #80]
2400:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 3615              		.loc 1 2400 3 is_stmt 1 view .LVU1093
2400:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 3616              		.loc 1 2400 12 is_stmt 0 view .LVU1094
 3617 000a C36A     		ldr	r3, [r0, #44]
2400:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 3618              		.loc 1 2400 6 view .LVU1095
 3619 000c 0BB1     		cbz	r3, .L234
2402:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 3620              		.loc 1 2402 5 is_stmt 1 view .LVU1096
2402:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 3621              		.loc 1 2402 22 is_stmt 0 view .LVU1097
 3622 000e 1B6D     		ldr	r3, [r3, #80]
ARM GAS  /tmp/ccN5ASm9.s 			page 129


2402:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 3623              		.loc 1 2402 8 view .LVU1098
 3624 0010 53B9     		cbnz	r3, .L233
 3625              	.L234:
2409:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->RxXferCount = 0x00U;
 3626              		.loc 1 2409 3 is_stmt 1 view .LVU1099
2409:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->RxXferCount = 0x00U;
 3627              		.loc 1 2409 22 is_stmt 0 view .LVU1100
 3628 0012 0023     		movs	r3, #0
 3629 0014 4384     		strh	r3, [r0, #34]	@ movhi
2410:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3630              		.loc 1 2410 3 is_stmt 1 view .LVU1101
2410:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3631              		.loc 1 2410 22 is_stmt 0 view .LVU1102
 3632 0016 4385     		strh	r3, [r0, #42]	@ movhi
2413:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3633              		.loc 1 2413 3 is_stmt 1 view .LVU1103
2413:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3634              		.loc 1 2413 20 is_stmt 0 view .LVU1104
 3635 0018 8363     		str	r3, [r0, #56]
2416:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_READY;
 3636              		.loc 1 2416 3 is_stmt 1 view .LVU1105
2416:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_READY;
 3637              		.loc 1 2416 18 is_stmt 0 view .LVU1106
 3638 001a 2023     		movs	r3, #32
 3639 001c 80F83530 		strb	r3, [r0, #53]
2417:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3640              		.loc 1 2417 3 is_stmt 1 view .LVU1107
2417:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3641              		.loc 1 2417 18 is_stmt 0 view .LVU1108
 3642 0020 80F83630 		strb	r3, [r0, #54]
2425:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
 3643              		.loc 1 2425 3 is_stmt 1 view .LVU1109
 3644 0024 FFF7FEFF 		bl	HAL_IRDA_AbortCpltCallback
 3645              	.LVL284:
 3646              	.L233:
2427:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3647              		.loc 1 2427 1 is_stmt 0 view .LVU1110
 3648 0028 08BD     		pop	{r3, pc}
 3649              		.cfi_endproc
 3650              	.LFE279:
 3652              		.section	.text.IRDA_DMATxAbortCallback,"ax",%progbits
 3653              		.align	1
 3654              		.syntax unified
 3655              		.thumb
 3656              		.thumb_func
 3657              		.fpu fpv4-sp-d16
 3659              	IRDA_DMATxAbortCallback:
 3660              	.LVL285:
 3661              	.LFB278:
2350:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 3662              		.loc 1 2350 1 is_stmt 1 view -0
 3663              		.cfi_startproc
 3664              		@ args = 0, pretend = 0, frame = 0
 3665              		@ frame_needed = 0, uses_anonymous_args = 0
2350:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 3666              		.loc 1 2350 1 is_stmt 0 view .LVU1112
ARM GAS  /tmp/ccN5ASm9.s 			page 130


 3667 0000 08B5     		push	{r3, lr}
 3668              	.LCFI38:
 3669              		.cfi_def_cfa_offset 8
 3670              		.cfi_offset 3, -8
 3671              		.cfi_offset 14, -4
2351:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3672              		.loc 1 2351 3 is_stmt 1 view .LVU1113
2351:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3673              		.loc 1 2351 23 is_stmt 0 view .LVU1114
 3674 0002 806B     		ldr	r0, [r0, #56]
 3675              	.LVL286:
2353:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3676              		.loc 1 2353 3 is_stmt 1 view .LVU1115
2353:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3677              		.loc 1 2353 8 is_stmt 0 view .LVU1116
 3678 0004 C36A     		ldr	r3, [r0, #44]
2353:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3679              		.loc 1 2353 36 view .LVU1117
 3680 0006 0022     		movs	r2, #0
 3681 0008 1A65     		str	r2, [r3, #80]
2356:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 3682              		.loc 1 2356 3 is_stmt 1 view .LVU1118
2356:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 3683              		.loc 1 2356 12 is_stmt 0 view .LVU1119
 3684 000a 036B     		ldr	r3, [r0, #48]
2356:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 3685              		.loc 1 2356 6 view .LVU1120
 3686 000c 0BB1     		cbz	r3, .L238
2358:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 3687              		.loc 1 2358 5 is_stmt 1 view .LVU1121
2358:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 3688              		.loc 1 2358 22 is_stmt 0 view .LVU1122
 3689 000e 1B6D     		ldr	r3, [r3, #80]
2358:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 3690              		.loc 1 2358 8 view .LVU1123
 3691 0010 53B9     		cbnz	r3, .L237
 3692              	.L238:
2365:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->RxXferCount = 0x00U;
 3693              		.loc 1 2365 3 is_stmt 1 view .LVU1124
2365:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->RxXferCount = 0x00U;
 3694              		.loc 1 2365 22 is_stmt 0 view .LVU1125
 3695 0012 0023     		movs	r3, #0
 3696 0014 4384     		strh	r3, [r0, #34]	@ movhi
2366:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3697              		.loc 1 2366 3 is_stmt 1 view .LVU1126
2366:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3698              		.loc 1 2366 22 is_stmt 0 view .LVU1127
 3699 0016 4385     		strh	r3, [r0, #42]	@ movhi
2369:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3700              		.loc 1 2369 3 is_stmt 1 view .LVU1128
2369:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3701              		.loc 1 2369 20 is_stmt 0 view .LVU1129
 3702 0018 8363     		str	r3, [r0, #56]
2372:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_READY;
 3703              		.loc 1 2372 3 is_stmt 1 view .LVU1130
2372:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_READY;
 3704              		.loc 1 2372 18 is_stmt 0 view .LVU1131
ARM GAS  /tmp/ccN5ASm9.s 			page 131


 3705 001a 2023     		movs	r3, #32
 3706 001c 80F83530 		strb	r3, [r0, #53]
2373:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3707              		.loc 1 2373 3 is_stmt 1 view .LVU1132
2373:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3708              		.loc 1 2373 18 is_stmt 0 view .LVU1133
 3709 0020 80F83630 		strb	r3, [r0, #54]
2381:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
 3710              		.loc 1 2381 3 is_stmt 1 view .LVU1134
 3711 0024 FFF7FEFF 		bl	HAL_IRDA_AbortCpltCallback
 3712              	.LVL287:
 3713              	.L237:
2383:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3714              		.loc 1 2383 1 is_stmt 0 view .LVU1135
 3715 0028 08BD     		pop	{r3, pc}
 3716              		.cfi_endproc
 3717              	.LFE278:
 3719              		.section	.text.HAL_IRDA_AbortTransmitCpltCallback,"ax",%progbits
 3720              		.align	1
 3721              		.weak	HAL_IRDA_AbortTransmitCpltCallback
 3722              		.syntax unified
 3723              		.thumb
 3724              		.thumb_func
 3725              		.fpu fpv4-sp-d16
 3727              	HAL_IRDA_AbortTransmitCpltCallback:
 3728              	.LVL288:
 3729              	.LFB265:
2002:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
 3730              		.loc 1 2002 1 is_stmt 1 view -0
 3731              		.cfi_startproc
 3732              		@ args = 0, pretend = 0, frame = 0
 3733              		@ frame_needed = 0, uses_anonymous_args = 0
 3734              		@ link register save eliminated.
2004:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3735              		.loc 1 2004 3 view .LVU1137
2009:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3736              		.loc 1 2009 1 is_stmt 0 view .LVU1138
 3737 0000 7047     		bx	lr
 3738              		.cfi_endproc
 3739              	.LFE265:
 3741              		.section	.text.HAL_IRDA_AbortTransmit_IT,"ax",%progbits
 3742              		.align	1
 3743              		.global	HAL_IRDA_AbortTransmit_IT
 3744              		.syntax unified
 3745              		.thumb
 3746              		.thumb_func
 3747              		.fpu fpv4-sp-d16
 3749              	HAL_IRDA_AbortTransmit_IT:
 3750              	.LVL289:
 3751              	.LFB256:
1614:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Disable TXEIE and TCIE interrupts */
 3752              		.loc 1 1614 1 is_stmt 1 view -0
 3753              		.cfi_startproc
 3754              		@ args = 0, pretend = 0, frame = 0
 3755              		@ frame_needed = 0, uses_anonymous_args = 0
1614:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Disable TXEIE and TCIE interrupts */
 3756              		.loc 1 1614 1 is_stmt 0 view .LVU1140
ARM GAS  /tmp/ccN5ASm9.s 			page 132


 3757 0000 10B5     		push	{r4, lr}
 3758              	.LCFI39:
 3759              		.cfi_def_cfa_offset 8
 3760              		.cfi_offset 4, -8
 3761              		.cfi_offset 14, -4
 3762 0002 0446     		mov	r4, r0
1616:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3763              		.loc 1 1616 3 is_stmt 1 view .LVU1141
 3764 0004 0268     		ldr	r2, [r0]
 3765 0006 D368     		ldr	r3, [r2, #12]
 3766 0008 23F0C003 		bic	r3, r3, #192
 3767 000c D360     		str	r3, [r2, #12]
1619:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 3768              		.loc 1 1619 3 view .LVU1142
1619:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 3769              		.loc 1 1619 7 is_stmt 0 view .LVU1143
 3770 000e 0368     		ldr	r3, [r0]
 3771 0010 5A69     		ldr	r2, [r3, #20]
1619:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 3772              		.loc 1 1619 6 view .LVU1144
 3773 0012 12F0800F 		tst	r2, #128
 3774 0016 17D0     		beq	.L243
1621:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3775              		.loc 1 1621 5 is_stmt 1 view .LVU1145
 3776 0018 5A69     		ldr	r2, [r3, #20]
 3777 001a 22F08002 		bic	r2, r2, #128
 3778 001e 5A61     		str	r2, [r3, #20]
1624:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 3779              		.loc 1 1624 5 view .LVU1146
1624:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 3780              		.loc 1 1624 14 is_stmt 0 view .LVU1147
 3781 0020 C36A     		ldr	r3, [r0, #44]
1624:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 3782              		.loc 1 1624 8 view .LVU1148
 3783 0022 4BB1     		cbz	r3, .L244
1628:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3784              		.loc 1 1628 7 is_stmt 1 view .LVU1149
1628:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3785              		.loc 1 1628 40 is_stmt 0 view .LVU1150
 3786 0024 0D4A     		ldr	r2, .L247
 3787 0026 1A65     		str	r2, [r3, #80]
1631:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
 3788              		.loc 1 1631 7 is_stmt 1 view .LVU1151
1631:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
 3789              		.loc 1 1631 11 is_stmt 0 view .LVU1152
 3790 0028 C06A     		ldr	r0, [r0, #44]
 3791              	.LVL290:
1631:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
 3792              		.loc 1 1631 11 view .LVU1153
 3793 002a FFF7FEFF 		bl	HAL_DMA_Abort_IT
 3794              	.LVL291:
1631:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
 3795              		.loc 1 1631 10 view .LVU1154
 3796 002e 90B1     		cbz	r0, .L245
1634:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
 3797              		.loc 1 1634 9 is_stmt 1 view .LVU1155
1634:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
ARM GAS  /tmp/ccN5ASm9.s 			page 133


 3798              		.loc 1 1634 14 is_stmt 0 view .LVU1156
 3799 0030 E06A     		ldr	r0, [r4, #44]
1634:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
 3800              		.loc 1 1634 22 view .LVU1157
 3801 0032 036D     		ldr	r3, [r0, #80]
1634:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
 3802              		.loc 1 1634 9 view .LVU1158
 3803 0034 9847     		blx	r3
 3804              	.LVL292:
 3805 0036 0EE0     		b	.L245
 3806              	.LVL293:
 3807              	.L244:
1640:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3808              		.loc 1 1640 7 is_stmt 1 view .LVU1159
1640:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3809              		.loc 1 1640 26 is_stmt 0 view .LVU1160
 3810 0038 0023     		movs	r3, #0
 3811 003a 4384     		strh	r3, [r0, #34]	@ movhi
1643:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3812              		.loc 1 1643 7 is_stmt 1 view .LVU1161
1643:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3813              		.loc 1 1643 21 is_stmt 0 view .LVU1162
 3814 003c 2023     		movs	r3, #32
 3815 003e 80F83530 		strb	r3, [r0, #53]
1651:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
 3816              		.loc 1 1651 7 is_stmt 1 view .LVU1163
 3817 0042 FFF7FEFF 		bl	HAL_IRDA_AbortTransmitCpltCallback
 3818              	.LVL294:
1651:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
 3819              		.loc 1 1651 7 is_stmt 0 view .LVU1164
 3820 0046 06E0     		b	.L245
 3821              	.LVL295:
 3822              	.L243:
1658:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3823              		.loc 1 1658 5 is_stmt 1 view .LVU1165
1658:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3824              		.loc 1 1658 24 is_stmt 0 view .LVU1166
 3825 0048 0023     		movs	r3, #0
 3826 004a 4384     		strh	r3, [r0, #34]	@ movhi
1661:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3827              		.loc 1 1661 5 is_stmt 1 view .LVU1167
1661:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3828              		.loc 1 1661 19 is_stmt 0 view .LVU1168
 3829 004c 2023     		movs	r3, #32
 3830 004e 80F83530 		strb	r3, [r0, #53]
1669:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
 3831              		.loc 1 1669 5 is_stmt 1 view .LVU1169
 3832 0052 FFF7FEFF 		bl	HAL_IRDA_AbortTransmitCpltCallback
 3833              	.LVL296:
 3834              	.L245:
1673:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
 3835              		.loc 1 1673 3 view .LVU1170
1674:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3836              		.loc 1 1674 1 is_stmt 0 view .LVU1171
 3837 0056 0020     		movs	r0, #0
 3838 0058 10BD     		pop	{r4, pc}
 3839              	.LVL297:
ARM GAS  /tmp/ccN5ASm9.s 			page 134


 3840              	.L248:
1674:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3841              		.loc 1 1674 1 view .LVU1172
 3842 005a 00BF     		.align	2
 3843              	.L247:
 3844 005c 00000000 		.word	IRDA_DMATxOnlyAbortCallback
 3845              		.cfi_endproc
 3846              	.LFE256:
 3848              		.section	.text.IRDA_DMATxOnlyAbortCallback,"ax",%progbits
 3849              		.align	1
 3850              		.syntax unified
 3851              		.thumb
 3852              		.thumb_func
 3853              		.fpu fpv4-sp-d16
 3855              	IRDA_DMATxOnlyAbortCallback:
 3856              	.LVL298:
 3857              	.LFB280:
2438:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 3858              		.loc 1 2438 1 is_stmt 1 view -0
 3859              		.cfi_startproc
 3860              		@ args = 0, pretend = 0, frame = 0
 3861              		@ frame_needed = 0, uses_anonymous_args = 0
2438:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 3862              		.loc 1 2438 1 is_stmt 0 view .LVU1174
 3863 0000 08B5     		push	{r3, lr}
 3864              	.LCFI40:
 3865              		.cfi_def_cfa_offset 8
 3866              		.cfi_offset 3, -8
 3867              		.cfi_offset 14, -4
2439:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3868              		.loc 1 2439 3 is_stmt 1 view .LVU1175
2439:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3869              		.loc 1 2439 23 is_stmt 0 view .LVU1176
 3870 0002 806B     		ldr	r0, [r0, #56]
 3871              	.LVL299:
2441:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3872              		.loc 1 2441 3 is_stmt 1 view .LVU1177
2441:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3873              		.loc 1 2441 22 is_stmt 0 view .LVU1178
 3874 0004 0023     		movs	r3, #0
 3875 0006 4384     		strh	r3, [r0, #34]	@ movhi
2444:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3876              		.loc 1 2444 3 is_stmt 1 view .LVU1179
2444:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3877              		.loc 1 2444 17 is_stmt 0 view .LVU1180
 3878 0008 2023     		movs	r3, #32
 3879 000a 80F83530 		strb	r3, [r0, #53]
2452:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
 3880              		.loc 1 2452 3 is_stmt 1 view .LVU1181
 3881 000e FFF7FEFF 		bl	HAL_IRDA_AbortTransmitCpltCallback
 3882              	.LVL300:
2454:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3883              		.loc 1 2454 1 is_stmt 0 view .LVU1182
 3884 0012 08BD     		pop	{r3, pc}
 3885              		.cfi_endproc
 3886              	.LFE280:
 3888              		.section	.text.HAL_IRDA_AbortReceiveCpltCallback,"ax",%progbits
ARM GAS  /tmp/ccN5ASm9.s 			page 135


 3889              		.align	1
 3890              		.weak	HAL_IRDA_AbortReceiveCpltCallback
 3891              		.syntax unified
 3892              		.thumb
 3893              		.thumb_func
 3894              		.fpu fpv4-sp-d16
 3896              	HAL_IRDA_AbortReceiveCpltCallback:
 3897              	.LVL301:
 3898              	.LFB266:
2018:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
 3899              		.loc 1 2018 1 is_stmt 1 view -0
 3900              		.cfi_startproc
 3901              		@ args = 0, pretend = 0, frame = 0
 3902              		@ frame_needed = 0, uses_anonymous_args = 0
 3903              		@ link register save eliminated.
2020:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3904              		.loc 1 2020 3 view .LVU1184
2025:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3905              		.loc 1 2025 1 is_stmt 0 view .LVU1185
 3906 0000 7047     		bx	lr
 3907              		.cfi_endproc
 3908              	.LFE266:
 3910              		.section	.text.HAL_IRDA_AbortReceive_IT,"ax",%progbits
 3911              		.align	1
 3912              		.global	HAL_IRDA_AbortReceive_IT
 3913              		.syntax unified
 3914              		.thumb
 3915              		.thumb_func
 3916              		.fpu fpv4-sp-d16
 3918              	HAL_IRDA_AbortReceive_IT:
 3919              	.LVL302:
 3920              	.LFB257:
1691:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 3921              		.loc 1 1691 1 is_stmt 1 view -0
 3922              		.cfi_startproc
 3923              		@ args = 0, pretend = 0, frame = 0
 3924              		@ frame_needed = 0, uses_anonymous_args = 0
1691:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 3925              		.loc 1 1691 1 is_stmt 0 view .LVU1187
 3926 0000 10B5     		push	{r4, lr}
 3927              	.LCFI41:
 3928              		.cfi_def_cfa_offset 8
 3929              		.cfi_offset 4, -8
 3930              		.cfi_offset 14, -4
 3931 0002 0446     		mov	r4, r0
1693:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 3932              		.loc 1 1693 3 is_stmt 1 view .LVU1188
 3933 0004 0268     		ldr	r2, [r0]
 3934 0006 D368     		ldr	r3, [r2, #12]
 3935 0008 23F49073 		bic	r3, r3, #288
 3936 000c D360     		str	r3, [r2, #12]
1694:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3937              		.loc 1 1694 3 view .LVU1189
 3938 000e 0268     		ldr	r2, [r0]
 3939 0010 5369     		ldr	r3, [r2, #20]
 3940 0012 23F00103 		bic	r3, r3, #1
 3941 0016 5361     		str	r3, [r2, #20]
ARM GAS  /tmp/ccN5ASm9.s 			page 136


1697:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 3942              		.loc 1 1697 3 view .LVU1190
1697:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 3943              		.loc 1 1697 7 is_stmt 0 view .LVU1191
 3944 0018 0368     		ldr	r3, [r0]
 3945 001a 5A69     		ldr	r2, [r3, #20]
1697:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   {
 3946              		.loc 1 1697 6 view .LVU1192
 3947 001c 12F0400F 		tst	r2, #64
 3948 0020 17D0     		beq	.L253
1699:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3949              		.loc 1 1699 5 is_stmt 1 view .LVU1193
 3950 0022 5A69     		ldr	r2, [r3, #20]
 3951 0024 22F04002 		bic	r2, r2, #64
 3952 0028 5A61     		str	r2, [r3, #20]
1702:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 3953              		.loc 1 1702 5 view .LVU1194
1702:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 3954              		.loc 1 1702 14 is_stmt 0 view .LVU1195
 3955 002a 036B     		ldr	r3, [r0, #48]
1702:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****     {
 3956              		.loc 1 1702 8 view .LVU1196
 3957 002c 4BB1     		cbz	r3, .L254
1706:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3958              		.loc 1 1706 7 is_stmt 1 view .LVU1197
1706:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3959              		.loc 1 1706 40 is_stmt 0 view .LVU1198
 3960 002e 0D4A     		ldr	r2, .L257
 3961 0030 1A65     		str	r2, [r3, #80]
1709:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
 3962              		.loc 1 1709 7 is_stmt 1 view .LVU1199
1709:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
 3963              		.loc 1 1709 11 is_stmt 0 view .LVU1200
 3964 0032 006B     		ldr	r0, [r0, #48]
 3965              	.LVL303:
1709:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
 3966              		.loc 1 1709 11 view .LVU1201
 3967 0034 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 3968              	.LVL304:
1709:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       {
 3969              		.loc 1 1709 10 view .LVU1202
 3970 0038 90B1     		cbz	r0, .L255
1712:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
 3971              		.loc 1 1712 9 is_stmt 1 view .LVU1203
1712:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
 3972              		.loc 1 1712 14 is_stmt 0 view .LVU1204
 3973 003a 206B     		ldr	r0, [r4, #48]
1712:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
 3974              		.loc 1 1712 22 view .LVU1205
 3975 003c 036D     		ldr	r3, [r0, #80]
1712:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****       }
 3976              		.loc 1 1712 9 view .LVU1206
 3977 003e 9847     		blx	r3
 3978              	.LVL305:
 3979 0040 0EE0     		b	.L255
 3980              	.LVL306:
 3981              	.L254:
ARM GAS  /tmp/ccN5ASm9.s 			page 137


1718:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3982              		.loc 1 1718 7 is_stmt 1 view .LVU1207
1718:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3983              		.loc 1 1718 26 is_stmt 0 view .LVU1208
 3984 0042 0023     		movs	r3, #0
 3985 0044 4385     		strh	r3, [r0, #42]	@ movhi
1721:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3986              		.loc 1 1721 7 is_stmt 1 view .LVU1209
1721:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3987              		.loc 1 1721 22 is_stmt 0 view .LVU1210
 3988 0046 2023     		movs	r3, #32
 3989 0048 80F83630 		strb	r3, [r0, #54]
1729:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
 3990              		.loc 1 1729 7 is_stmt 1 view .LVU1211
 3991 004c FFF7FEFF 		bl	HAL_IRDA_AbortReceiveCpltCallback
 3992              	.LVL307:
1729:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
 3993              		.loc 1 1729 7 is_stmt 0 view .LVU1212
 3994 0050 06E0     		b	.L255
 3995              	.LVL308:
 3996              	.L253:
1736:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3997              		.loc 1 1736 5 is_stmt 1 view .LVU1213
1736:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 3998              		.loc 1 1736 24 is_stmt 0 view .LVU1214
 3999 0052 0023     		movs	r3, #0
 4000 0054 4385     		strh	r3, [r0, #42]	@ movhi
1739:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 4001              		.loc 1 1739 5 is_stmt 1 view .LVU1215
1739:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 4002              		.loc 1 1739 20 is_stmt 0 view .LVU1216
 4003 0056 2023     		movs	r3, #32
 4004 0058 80F83630 		strb	r3, [r0, #54]
1747:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
 4005              		.loc 1 1747 5 is_stmt 1 view .LVU1217
 4006 005c FFF7FEFF 		bl	HAL_IRDA_AbortReceiveCpltCallback
 4007              	.LVL309:
 4008              	.L255:
1751:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
 4009              		.loc 1 1751 3 view .LVU1218
1752:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 4010              		.loc 1 1752 1 is_stmt 0 view .LVU1219
 4011 0060 0020     		movs	r0, #0
 4012 0062 10BD     		pop	{r4, pc}
 4013              	.LVL310:
 4014              	.L258:
1752:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 4015              		.loc 1 1752 1 view .LVU1220
 4016              		.align	2
 4017              	.L257:
 4018 0064 00000000 		.word	IRDA_DMARxOnlyAbortCallback
 4019              		.cfi_endproc
 4020              	.LFE257:
 4022              		.section	.text.IRDA_DMARxOnlyAbortCallback,"ax",%progbits
 4023              		.align	1
 4024              		.syntax unified
 4025              		.thumb
ARM GAS  /tmp/ccN5ASm9.s 			page 138


 4026              		.thumb_func
 4027              		.fpu fpv4-sp-d16
 4029              	IRDA_DMARxOnlyAbortCallback:
 4030              	.LVL311:
 4031              	.LFB281:
2465:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 4032              		.loc 1 2465 1 is_stmt 1 view -0
 4033              		.cfi_startproc
 4034              		@ args = 0, pretend = 0, frame = 0
 4035              		@ frame_needed = 0, uses_anonymous_args = 0
2465:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 4036              		.loc 1 2465 1 is_stmt 0 view .LVU1222
 4037 0000 08B5     		push	{r3, lr}
 4038              	.LCFI42:
 4039              		.cfi_def_cfa_offset 8
 4040              		.cfi_offset 3, -8
 4041              		.cfi_offset 14, -4
2466:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 4042              		.loc 1 2466 3 is_stmt 1 view .LVU1223
2466:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 4043              		.loc 1 2466 23 is_stmt 0 view .LVU1224
 4044 0002 806B     		ldr	r0, [r0, #56]
 4045              	.LVL312:
2468:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 4046              		.loc 1 2468 3 is_stmt 1 view .LVU1225
2468:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 4047              		.loc 1 2468 22 is_stmt 0 view .LVU1226
 4048 0004 0023     		movs	r3, #0
 4049 0006 4385     		strh	r3, [r0, #42]	@ movhi
2471:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 4050              		.loc 1 2471 3 is_stmt 1 view .LVU1227
2471:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 4051              		.loc 1 2471 18 is_stmt 0 view .LVU1228
 4052 0008 2023     		movs	r3, #32
 4053 000a 80F83630 		strb	r3, [r0, #54]
2479:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** #endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
 4054              		.loc 1 2479 3 is_stmt 1 view .LVU1229
 4055 000e FFF7FEFF 		bl	HAL_IRDA_AbortReceiveCpltCallback
 4056              	.LVL313:
2481:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 4057              		.loc 1 2481 1 is_stmt 0 view .LVU1230
 4058 0012 08BD     		pop	{r3, pc}
 4059              		.cfi_endproc
 4060              	.LFE281:
 4062              		.section	.text.HAL_IRDA_GetState,"ax",%progbits
 4063              		.align	1
 4064              		.global	HAL_IRDA_GetState
 4065              		.syntax unified
 4066              		.thumb
 4067              		.thumb_func
 4068              		.fpu fpv4-sp-d16
 4070              	HAL_IRDA_GetState:
 4071              	.LVL314:
 4072              	.LFB267:
2055:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   uint32_t temp1 = 0x00U, temp2 = 0x00U;
 4073              		.loc 1 2055 1 is_stmt 1 view -0
 4074              		.cfi_startproc
ARM GAS  /tmp/ccN5ASm9.s 			page 139


 4075              		@ args = 0, pretend = 0, frame = 0
 4076              		@ frame_needed = 0, uses_anonymous_args = 0
 4077              		@ link register save eliminated.
2056:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   temp1 = hirda->gState;
 4078              		.loc 1 2056 3 view .LVU1232
2057:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   temp2 = hirda->RxState;
 4079              		.loc 1 2057 3 view .LVU1233
2057:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   temp2 = hirda->RxState;
 4080              		.loc 1 2057 16 is_stmt 0 view .LVU1234
 4081 0000 90F83530 		ldrb	r3, [r0, #53]	@ zero_extendqisi2
 4082              	.LVL315:
2058:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 4083              		.loc 1 2058 3 is_stmt 1 view .LVU1235
2058:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 4084              		.loc 1 2058 16 is_stmt 0 view .LVU1236
 4085 0004 90F83600 		ldrb	r0, [r0, #54]	@ zero_extendqisi2
 4086              	.LVL316:
2060:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
 4087              		.loc 1 2060 3 is_stmt 1 view .LVU1237
2061:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 4088              		.loc 1 2061 1 is_stmt 0 view .LVU1238
 4089 0008 1843     		orrs	r0, r0, r3
 4090              	.LVL317:
2061:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 4091              		.loc 1 2061 1 view .LVU1239
 4092 000a 7047     		bx	lr
 4093              		.cfi_endproc
 4094              	.LFE267:
 4096              		.section	.text.HAL_IRDA_GetError,"ax",%progbits
 4097              		.align	1
 4098              		.global	HAL_IRDA_GetError
 4099              		.syntax unified
 4100              		.thumb
 4101              		.thumb_func
 4102              		.fpu fpv4-sp-d16
 4104              	HAL_IRDA_GetError:
 4105              	.LVL318:
 4106              	.LFB268:
2070:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c ****   return hirda->ErrorCode;
 4107              		.loc 1 2070 1 is_stmt 1 view -0
 4108              		.cfi_startproc
 4109              		@ args = 0, pretend = 0, frame = 0
 4110              		@ frame_needed = 0, uses_anonymous_args = 0
 4111              		@ link register save eliminated.
2071:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
 4112              		.loc 1 2071 3 view .LVU1241
2071:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** }
 4113              		.loc 1 2071 15 is_stmt 0 view .LVU1242
 4114 0000 806B     		ldr	r0, [r0, #56]
 4115              	.LVL319:
2072:stm32f4xx-hal-driver/Src/stm32f4xx_hal_irda.c **** 
 4116              		.loc 1 2072 1 view .LVU1243
 4117 0002 7047     		bx	lr
 4118              		.cfi_endproc
 4119              	.LFE268:
 4121              		.text
 4122              	.Letext0:
ARM GAS  /tmp/ccN5ASm9.s 			page 140


 4123              		.file 2 "/opt/gcc_arm/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/machine/_default_typ
 4124              		.file 3 "/opt/gcc_arm/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/_stdint.h"
 4125              		.file 4 "CMSIS_5/CMSIS/Core/Include/core_cm4.h"
 4126              		.file 5 "cmsis-device-f4/Include/system_stm32f4xx.h"
 4127              		.file 6 "cmsis-device-f4/Include/stm32f407xx.h"
 4128              		.file 7 "cmsis-device-f4/Include/stm32f4xx.h"
 4129              		.file 8 "stm32f4xx-hal-driver/Inc/stm32f4xx_hal_def.h"
 4130              		.file 9 "stm32f4xx-hal-driver/Inc/stm32f4xx_hal_dma.h"
 4131              		.file 10 "stm32f4xx-hal-driver/Inc/stm32f4xx_hal_irda.h"
 4132              		.file 11 "stm32f4xx-hal-driver/Inc/stm32f4xx_hal.h"
 4133              		.file 12 "stm32f4xx-hal-driver/Inc/stm32f4xx_hal_rcc.h"
ARM GAS  /tmp/ccN5ASm9.s 			page 141


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_hal_irda.c
     /tmp/ccN5ASm9.s:18     .text.IRDA_EndTxTransfer:0000000000000000 $t
     /tmp/ccN5ASm9.s:25     .text.IRDA_EndTxTransfer:0000000000000000 IRDA_EndTxTransfer
     /tmp/ccN5ASm9.s:49     .text.IRDA_EndRxTransfer:0000000000000000 $t
     /tmp/ccN5ASm9.s:55     .text.IRDA_EndRxTransfer:0000000000000000 IRDA_EndRxTransfer
     /tmp/ccN5ASm9.s:83     .text.IRDA_Transmit_IT:0000000000000000 $t
     /tmp/ccN5ASm9.s:89     .text.IRDA_Transmit_IT:0000000000000000 IRDA_Transmit_IT
     /tmp/ccN5ASm9.s:198    .text.IRDA_SetConfig:0000000000000000 $t
     /tmp/ccN5ASm9.s:204    .text.IRDA_SetConfig:0000000000000000 IRDA_SetConfig
     /tmp/ccN5ASm9.s:364    .text.IRDA_SetConfig:0000000000000108 $d
     /tmp/ccN5ASm9.s:370    .text.IRDA_WaitOnFlagUntilTimeout:0000000000000000 $t
     /tmp/ccN5ASm9.s:376    .text.IRDA_WaitOnFlagUntilTimeout:0000000000000000 IRDA_WaitOnFlagUntilTimeout
     /tmp/ccN5ASm9.s:469    .text.HAL_IRDA_MspInit:0000000000000000 $t
     /tmp/ccN5ASm9.s:476    .text.HAL_IRDA_MspInit:0000000000000000 HAL_IRDA_MspInit
     /tmp/ccN5ASm9.s:491    .text.HAL_IRDA_Init:0000000000000000 $t
     /tmp/ccN5ASm9.s:498    .text.HAL_IRDA_Init:0000000000000000 HAL_IRDA_Init
     /tmp/ccN5ASm9.s:612    .text.HAL_IRDA_MspDeInit:0000000000000000 $t
     /tmp/ccN5ASm9.s:619    .text.HAL_IRDA_MspDeInit:0000000000000000 HAL_IRDA_MspDeInit
     /tmp/ccN5ASm9.s:634    .text.HAL_IRDA_DeInit:0000000000000000 $t
     /tmp/ccN5ASm9.s:641    .text.HAL_IRDA_DeInit:0000000000000000 HAL_IRDA_DeInit
     /tmp/ccN5ASm9.s:703    .text.HAL_IRDA_Transmit:0000000000000000 $t
     /tmp/ccN5ASm9.s:710    .text.HAL_IRDA_Transmit:0000000000000000 HAL_IRDA_Transmit
     /tmp/ccN5ASm9.s:949    .text.HAL_IRDA_Receive:0000000000000000 $t
     /tmp/ccN5ASm9.s:956    .text.HAL_IRDA_Receive:0000000000000000 HAL_IRDA_Receive
     /tmp/ccN5ASm9.s:1205   .text.HAL_IRDA_Transmit_IT:0000000000000000 $t
     /tmp/ccN5ASm9.s:1212   .text.HAL_IRDA_Transmit_IT:0000000000000000 HAL_IRDA_Transmit_IT
     /tmp/ccN5ASm9.s:1308   .text.HAL_IRDA_Receive_IT:0000000000000000 $t
     /tmp/ccN5ASm9.s:1315   .text.HAL_IRDA_Receive_IT:0000000000000000 HAL_IRDA_Receive_IT
     /tmp/ccN5ASm9.s:1430   .text.HAL_IRDA_Transmit_DMA:0000000000000000 $t
     /tmp/ccN5ASm9.s:1437   .text.HAL_IRDA_Transmit_DMA:0000000000000000 HAL_IRDA_Transmit_DMA
     /tmp/ccN5ASm9.s:1601   .text.HAL_IRDA_Transmit_DMA:0000000000000098 $d
     /tmp/ccN5ASm9.s:2455   .text.IRDA_DMATransmitCplt:0000000000000000 IRDA_DMATransmitCplt
     /tmp/ccN5ASm9.s:2583   .text.IRDA_DMATransmitHalfCplt:0000000000000000 IRDA_DMATransmitHalfCplt
     /tmp/ccN5ASm9.s:2943   .text.IRDA_DMAError:0000000000000000 IRDA_DMAError
     /tmp/ccN5ASm9.s:1608   .text.HAL_IRDA_Receive_DMA:0000000000000000 $t
     /tmp/ccN5ASm9.s:1615   .text.HAL_IRDA_Receive_DMA:0000000000000000 HAL_IRDA_Receive_DMA
     /tmp/ccN5ASm9.s:1825   .text.HAL_IRDA_Receive_DMA:00000000000000b8 $d
     /tmp/ccN5ASm9.s:2638   .text.IRDA_DMAReceiveCplt:0000000000000000 IRDA_DMAReceiveCplt
     /tmp/ccN5ASm9.s:2888   .text.IRDA_DMAReceiveHalfCplt:0000000000000000 IRDA_DMAReceiveHalfCplt
     /tmp/ccN5ASm9.s:1832   .text.HAL_IRDA_DMAPause:0000000000000000 $t
     /tmp/ccN5ASm9.s:1839   .text.HAL_IRDA_DMAPause:0000000000000000 HAL_IRDA_DMAPause
     /tmp/ccN5ASm9.s:1941   .text.HAL_IRDA_DMAResume:0000000000000000 $t
     /tmp/ccN5ASm9.s:1948   .text.HAL_IRDA_DMAResume:0000000000000000 HAL_IRDA_DMAResume
     /tmp/ccN5ASm9.s:2066   .text.HAL_IRDA_DMAStop:0000000000000000 $t
     /tmp/ccN5ASm9.s:2073   .text.HAL_IRDA_DMAStop:0000000000000000 HAL_IRDA_DMAStop
     /tmp/ccN5ASm9.s:2176   .text.HAL_IRDA_Abort:0000000000000000 $t
     /tmp/ccN5ASm9.s:2183   .text.HAL_IRDA_Abort:0000000000000000 HAL_IRDA_Abort
     /tmp/ccN5ASm9.s:2284   .text.HAL_IRDA_AbortTransmit:0000000000000000 $t
     /tmp/ccN5ASm9.s:2291   .text.HAL_IRDA_AbortTransmit:0000000000000000 HAL_IRDA_AbortTransmit
     /tmp/ccN5ASm9.s:2353   .text.HAL_IRDA_AbortReceive:0000000000000000 $t
     /tmp/ccN5ASm9.s:2360   .text.HAL_IRDA_AbortReceive:0000000000000000 HAL_IRDA_AbortReceive
     /tmp/ccN5ASm9.s:2427   .text.HAL_IRDA_TxCpltCallback:0000000000000000 $t
     /tmp/ccN5ASm9.s:2434   .text.HAL_IRDA_TxCpltCallback:0000000000000000 HAL_IRDA_TxCpltCallback
     /tmp/ccN5ASm9.s:2449   .text.IRDA_DMATransmitCplt:0000000000000000 $t
     /tmp/ccN5ASm9.s:2511   .text.IRDA_EndTransmit_IT:0000000000000000 $t
     /tmp/ccN5ASm9.s:2517   .text.IRDA_EndTransmit_IT:0000000000000000 IRDA_EndTransmit_IT
ARM GAS  /tmp/ccN5ASm9.s 			page 142


     /tmp/ccN5ASm9.s:2555   .text.HAL_IRDA_TxHalfCpltCallback:0000000000000000 $t
     /tmp/ccN5ASm9.s:2562   .text.HAL_IRDA_TxHalfCpltCallback:0000000000000000 HAL_IRDA_TxHalfCpltCallback
     /tmp/ccN5ASm9.s:2577   .text.IRDA_DMATransmitHalfCplt:0000000000000000 $t
     /tmp/ccN5ASm9.s:2610   .text.HAL_IRDA_RxCpltCallback:0000000000000000 $t
     /tmp/ccN5ASm9.s:2617   .text.HAL_IRDA_RxCpltCallback:0000000000000000 HAL_IRDA_RxCpltCallback
     /tmp/ccN5ASm9.s:2632   .text.IRDA_DMAReceiveCplt:0000000000000000 $t
     /tmp/ccN5ASm9.s:2698   .text.IRDA_Receive_IT:0000000000000000 $t
     /tmp/ccN5ASm9.s:2704   .text.IRDA_Receive_IT:0000000000000000 IRDA_Receive_IT
     /tmp/ccN5ASm9.s:2860   .text.HAL_IRDA_RxHalfCpltCallback:0000000000000000 $t
     /tmp/ccN5ASm9.s:2867   .text.HAL_IRDA_RxHalfCpltCallback:0000000000000000 HAL_IRDA_RxHalfCpltCallback
     /tmp/ccN5ASm9.s:2882   .text.IRDA_DMAReceiveHalfCplt:0000000000000000 $t
     /tmp/ccN5ASm9.s:2915   .text.HAL_IRDA_ErrorCallback:0000000000000000 $t
     /tmp/ccN5ASm9.s:2922   .text.HAL_IRDA_ErrorCallback:0000000000000000 HAL_IRDA_ErrorCallback
     /tmp/ccN5ASm9.s:2937   .text.IRDA_DMAError:0000000000000000 $t
     /tmp/ccN5ASm9.s:3040   .text.HAL_IRDA_IRQHandler:0000000000000000 $t
     /tmp/ccN5ASm9.s:3047   .text.HAL_IRDA_IRQHandler:0000000000000000 HAL_IRDA_IRQHandler
     /tmp/ccN5ASm9.s:3317   .text.HAL_IRDA_IRQHandler:0000000000000124 $d
     /tmp/ccN5ASm9.s:3328   .text.IRDA_DMAAbortOnError:0000000000000000 IRDA_DMAAbortOnError
     /tmp/ccN5ASm9.s:3322   .text.IRDA_DMAAbortOnError:0000000000000000 $t
     /tmp/ccN5ASm9.s:3361   .text.HAL_IRDA_AbortCpltCallback:0000000000000000 $t
     /tmp/ccN5ASm9.s:3368   .text.HAL_IRDA_AbortCpltCallback:0000000000000000 HAL_IRDA_AbortCpltCallback
     /tmp/ccN5ASm9.s:3383   .text.HAL_IRDA_Abort_IT:0000000000000000 $t
     /tmp/ccN5ASm9.s:3390   .text.HAL_IRDA_Abort_IT:0000000000000000 HAL_IRDA_Abort_IT
     /tmp/ccN5ASm9.s:3580   .text.HAL_IRDA_Abort_IT:00000000000000bc $d
     /tmp/ccN5ASm9.s:3659   .text.IRDA_DMATxAbortCallback:0000000000000000 IRDA_DMATxAbortCallback
     /tmp/ccN5ASm9.s:3592   .text.IRDA_DMARxAbortCallback:0000000000000000 IRDA_DMARxAbortCallback
     /tmp/ccN5ASm9.s:3586   .text.IRDA_DMARxAbortCallback:0000000000000000 $t
     /tmp/ccN5ASm9.s:3653   .text.IRDA_DMATxAbortCallback:0000000000000000 $t
     /tmp/ccN5ASm9.s:3720   .text.HAL_IRDA_AbortTransmitCpltCallback:0000000000000000 $t
     /tmp/ccN5ASm9.s:3727   .text.HAL_IRDA_AbortTransmitCpltCallback:0000000000000000 HAL_IRDA_AbortTransmitCpltCallback
     /tmp/ccN5ASm9.s:3742   .text.HAL_IRDA_AbortTransmit_IT:0000000000000000 $t
     /tmp/ccN5ASm9.s:3749   .text.HAL_IRDA_AbortTransmit_IT:0000000000000000 HAL_IRDA_AbortTransmit_IT
     /tmp/ccN5ASm9.s:3844   .text.HAL_IRDA_AbortTransmit_IT:000000000000005c $d
     /tmp/ccN5ASm9.s:3855   .text.IRDA_DMATxOnlyAbortCallback:0000000000000000 IRDA_DMATxOnlyAbortCallback
     /tmp/ccN5ASm9.s:3849   .text.IRDA_DMATxOnlyAbortCallback:0000000000000000 $t
     /tmp/ccN5ASm9.s:3889   .text.HAL_IRDA_AbortReceiveCpltCallback:0000000000000000 $t
     /tmp/ccN5ASm9.s:3896   .text.HAL_IRDA_AbortReceiveCpltCallback:0000000000000000 HAL_IRDA_AbortReceiveCpltCallback
     /tmp/ccN5ASm9.s:3911   .text.HAL_IRDA_AbortReceive_IT:0000000000000000 $t
     /tmp/ccN5ASm9.s:3918   .text.HAL_IRDA_AbortReceive_IT:0000000000000000 HAL_IRDA_AbortReceive_IT
     /tmp/ccN5ASm9.s:4018   .text.HAL_IRDA_AbortReceive_IT:0000000000000064 $d
     /tmp/ccN5ASm9.s:4029   .text.IRDA_DMARxOnlyAbortCallback:0000000000000000 IRDA_DMARxOnlyAbortCallback
     /tmp/ccN5ASm9.s:4023   .text.IRDA_DMARxOnlyAbortCallback:0000000000000000 $t
     /tmp/ccN5ASm9.s:4063   .text.HAL_IRDA_GetState:0000000000000000 $t
     /tmp/ccN5ASm9.s:4070   .text.HAL_IRDA_GetState:0000000000000000 HAL_IRDA_GetState
     /tmp/ccN5ASm9.s:4097   .text.HAL_IRDA_GetError:0000000000000000 $t
     /tmp/ccN5ASm9.s:4104   .text.HAL_IRDA_GetError:0000000000000000 HAL_IRDA_GetError

UNDEFINED SYMBOLS
__aeabi_uldivmod
HAL_RCC_GetPCLK1Freq
HAL_RCC_GetPCLK2Freq
HAL_GetTick
HAL_DMA_Start_IT
HAL_DMA_Abort
HAL_DMA_Abort_IT

ARM GAS  /tmp/cci617lT.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_hal_rcc_ex.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.HAL_RCCEx_PeriphCLKConfig,"ax",%progbits
  18              		.align	1
  19              		.global	HAL_RCCEx_PeriphCLKConfig
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	HAL_RCCEx_PeriphCLKConfig:
  27              	.LVL0:
  28              	.LFB239:
  29              		.file 1 "stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c"
   1:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** /**
   2:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   ******************************************************************************
   3:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @file    stm32f4xx_hal_rcc_ex.c
   4:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @author  MCD Application Team
   5:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @brief   Extension RCC HAL module driver.
   6:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *          This file provides firmware functions to manage the following
   7:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *          functionalities RCC extension peripheral:
   8:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *           + Extended Peripheral Control functions
   9:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *
  10:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   ******************************************************************************
  11:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @attention
  12:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *
  13:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * Copyright (c) 2017 STMicroelectronics.
  14:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * All rights reserved.
  15:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *
  16:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * This software is licensed under terms that can be found in the LICENSE file in
  17:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * the root directory of this software component.
  18:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  19:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   ******************************************************************************
  20:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   */
  21:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
  22:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** /* Includes ------------------------------------------------------------------*/
  23:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #include "stm32f4xx_hal.h"
  24:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
  25:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** /** @addtogroup STM32F4xx_HAL_Driver
  26:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @{
  27:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   */
  28:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
  29:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** /** @defgroup RCCEx RCCEx
ARM GAS  /tmp/cci617lT.s 			page 2


  30:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @brief RCCEx HAL module driver
  31:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @{
  32:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   */
  33:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
  34:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #ifdef HAL_RCC_MODULE_ENABLED
  35:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
  36:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** /* Private typedef -----------------------------------------------------------*/
  37:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** /* Private define ------------------------------------------------------------*/
  38:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** /** @addtogroup RCCEx_Private_Constants
  39:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @{
  40:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   */
  41:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** /**
  42:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @}
  43:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   */
  44:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** /* Private macro -------------------------------------------------------------*/
  45:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** /* Private variables ---------------------------------------------------------*/
  46:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** /* Private function prototypes -----------------------------------------------*/
  47:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** /* Private functions ---------------------------------------------------------*/
  48:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** /** @defgroup RCCEx_Exported_Functions RCCEx Exported Functions
  49:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *  @{
  50:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   */
  51:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
  52:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** /** @defgroup RCCEx_Exported_Functions_Group1 Extended Peripheral Control functions
  53:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *  @brief  Extended Peripheral Control functions
  54:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *
  55:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** @verbatim
  56:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****  ===============================================================================
  57:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****                 ##### Extended Peripheral Control functions  #####
  58:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****  ===============================================================================
  59:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     [..]
  60:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     This subsection provides a set of functions allowing to control the RCC Clocks
  61:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     frequencies.
  62:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     [..]
  63:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     (@) Important note: Care must be taken when HAL_RCCEx_PeriphCLKConfig() is used to
  64:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         select the RTC clock source; in this case the Backup domain will be reset in
  65:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         order to modify the RTC Clock source, as consequence RTC registers (including
  66:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         the backup registers) and RCC_BDCR register are set to their reset values.
  67:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
  68:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** @endverbatim
  69:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @{
  70:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   */
  71:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
  72:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(STM32F446xx)
  73:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** /**
  74:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @brief  Initializes the RCC extended peripherals clocks according to the specified
  75:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *         parameters in the RCC_PeriphCLKInitTypeDef.
  76:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  77:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *         contains the configuration information for the Extended Peripherals
  78:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *         clocks(I2S, SAI, LTDC RTC and TIM).
  79:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *
  80:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @note   Care must be taken when HAL_RCCEx_PeriphCLKConfig() is used to select
  81:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *         the RTC clock source; in this case the Backup domain will be reset in
  82:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *         order to modify the RTC Clock source, as consequence RTC registers (including
  83:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *         the backup registers) and RCC_BDCR register are set to their reset values.
  84:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *
  85:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @retval HAL status
  86:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   */
ARM GAS  /tmp/cci617lT.s 			page 3


  87:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
  88:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** {
  89:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t tickstart = 0U;
  90:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t tmpreg1 = 0U;
  91:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t plli2sp = 0U;
  92:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t plli2sq = 0U;
  93:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t plli2sr = 0U;
  94:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t pllsaip = 0U;
  95:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t pllsaiq = 0U;
  96:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t plli2sused = 0U;
  97:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t pllsaiused = 0U;
  98:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
  99:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Check the peripheral clock selection parameters */
 100:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 101:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 102:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*------------------------ I2S APB1 configuration --------------------------*/
 103:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 104:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
 105:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the parameters */
 106:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));
 107:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 108:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure I2S Clock source */
 109:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 110:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable the PLLI2S when it's used as clock source for I2S */
 111:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 112:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 113:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       plli2sused = 1U;
 114:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
 115:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
 116:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
 117:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 118:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*---------------------------- I2S APB2 configuration ----------------------*/
 119:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 120:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
 121:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the parameters */
 122:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));
 123:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 124:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure I2S Clock source */
 125:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 126:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable the PLLI2S when it's used as clock source for I2S */
 127:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 128:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 129:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       plli2sused = 1U;
 130:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
 131:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
 132:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
 133:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 134:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------- SAI1 configuration ---------------------------*/
 135:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 136:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
 137:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the parameters */
 138:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 139:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 140:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure SAI1 Clock source */
 141:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 142:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable the PLLI2S when it's used as clock source for SAI */
 143:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
ARM GAS  /tmp/cci617lT.s 			page 4


 144:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 145:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       plli2sused = 1U;
 146:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
 147:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable the PLLSAI when it's used as clock source for SAI */
 148:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 149:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 150:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       pllsaiused = 1U;
 151:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
 152:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
 153:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
 154:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 155:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*-------------------------- SAI2 configuration ----------------------------*/
 156:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 157:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
 158:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the parameters */
 159:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 160:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 161:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure SAI2 Clock source */
 162:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 163:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 164:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable the PLLI2S when it's used as clock source for SAI */
 165:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 166:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 167:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       plli2sused = 1U;
 168:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
 169:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable the PLLSAI when it's used as clock source for SAI */
 170:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 171:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 172:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       pllsaiused = 1U;
 173:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
 174:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
 175:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
 176:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 177:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*----------------------------- RTC configuration --------------------------*/
 178:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 179:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
 180:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check for RTC Parameters used to output RTCCLK */
 181:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 182:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 183:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable Power Clock*/
 184:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_PWR_CLK_ENABLE();
 185:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 186:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable write access to Backup domain */
 187:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     PWR->CR |= PWR_CR_DBP;
 188:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 189:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Get tick */
 190:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     tickstart = HAL_GetTick();
 191:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 192:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     while ((PWR->CR & PWR_CR_DBP) == RESET)
 193:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 194:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 195:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
 196:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         return HAL_TIMEOUT;
 197:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       }
 198:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
 199:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value 
 200:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
ARM GAS  /tmp/cci617lT.s 			page 5


 201:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCS
 202:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 203:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Store the content of BDCR register before the reset of Backup Domain */
 204:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 205:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* RTC Clock selection can be changed only if the Backup Domain is reset */
 206:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_BACKUPRESET_FORCE();
 207:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_BACKUPRESET_RELEASE();
 208:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Restore the Content of BDCR register */
 209:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       RCC->BDCR = tmpreg1;
 210:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 211:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
 212:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 213:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
 214:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* Get tick */
 215:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         tickstart = HAL_GetTick();
 216:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 217:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* Wait till LSE is ready */
 218:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 219:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         {
 220:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 221:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           {
 222:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             return HAL_TIMEOUT;
 223:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
 224:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         }
 225:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       }
 226:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
 227:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 228:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
 229:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
 230:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 231:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*---------------------------- TIM configuration ---------------------------*/
 232:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 233:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
 234:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure Timer Prescaler */
 235:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 236:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
 237:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
 238:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 239:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*---------------------------- FMPI2C1 Configuration -----------------------*/
 240:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 241:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
 242:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the parameters */
 243:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));
 244:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 245:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure the FMPI2C1 clock source */
 246:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 247:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
 248:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
 249:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 250:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*------------------------------ CEC Configuration -------------------------*/
 251:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 252:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
 253:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the parameters */
 254:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 255:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 256:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure the CEC clock source */
 257:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
ARM GAS  /tmp/cci617lT.s 			page 6


 258:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
 259:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
 260:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 261:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*----------------------------- CLK48 Configuration ------------------------*/
 262:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 263:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
 264:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the parameters */
 265:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));
 266:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 267:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure the CLK48 clock source */
 268:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 269:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 270:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable the PLLSAI when it's used as clock source for CLK48 */
 271:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 272:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 273:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       pllsaiused = 1U;
 274:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
 275:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
 276:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
 277:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 278:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*----------------------------- SDIO Configuration -------------------------*/
 279:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 280:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
 281:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the parameters */
 282:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));
 283:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 284:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure the SDIO clock source */
 285:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 286:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
 287:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
 288:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 289:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*------------------------------ SPDIFRX Configuration ---------------------*/
 290:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 291:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
 292:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the parameters */
 293:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));
 294:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 295:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure the SPDIFRX clock source */
 296:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 297:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
 298:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 299:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 300:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       plli2sused = 1U;
 301:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
 302:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
 303:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
 304:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 305:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*---------------------------- PLLI2S Configuration ------------------------*/
 306:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
 307:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****      I2S on APB2 or SPDIFRX */
 308:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 309:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
 310:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Disable the PLLI2S */
 311:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_PLLI2S_DISABLE();
 312:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Get tick */
 313:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     tickstart = HAL_GetTick();
 314:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Wait till PLLI2S is disabled */
ARM GAS  /tmp/cci617lT.s 			page 7


 315:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 316:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 317:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 318:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
 319:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* return in case of Timeout detected */
 320:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         return HAL_TIMEOUT;
 321:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       }
 322:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
 323:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 324:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* check for common PLLI2S Parameters */
 325:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 326:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 327:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 328:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
 329:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB
 330:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****          && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 331:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB
 332:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 333:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* check for Parameters */
 334:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 335:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 336:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S conf
 337:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) 
 338:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 339:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Configure the PLLI2S division factors */
 340:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
 341:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
 342:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp
 343:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****                               PeriphClkInit->PLLI2S.PLLI2SR);
 344:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
 345:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 346:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
 347:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 348:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****          && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 349:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (P
 350:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 351:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Check for PLLI2S Parameters */
 352:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 353:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Check for PLLI2S/DIVQ parameters */
 354:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 355:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 356:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI conf
 357:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) 
 358:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 359:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Configure the PLLI2S division factors */
 360:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
 361:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
 362:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
 363:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp
 364:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****                               PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 365:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 366:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
 367:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 368:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
 369:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 370:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
 371:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
ARM GAS  /tmp/cci617lT.s 			page 8


 372:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 373:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 374:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* check for Parameters */
 375:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 376:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration)
 377:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) 
 378:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 379:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Configure the PLLI2S division factors */
 380:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
 381:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
 382:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphC
 383:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****                               plli2sq, plli2sr);
 384:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
 385:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 386:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /*----------------- In Case of PLLI2S is just selected  -----------------*/
 387:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 388:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 389:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Check for Parameters */
 390:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 391:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 392:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 393:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 394:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Configure the PLLI2S division factors */
 395:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
 396:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphC
 397:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****                               PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 398:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
 399:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 400:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable the PLLI2S */
 401:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_PLLI2S_ENABLE();
 402:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Get tick */
 403:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     tickstart = HAL_GetTick();
 404:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Wait till PLLI2S is ready */
 405:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 406:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 407:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 408:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
 409:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* return in case of Timeout detected */
 410:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         return HAL_TIMEOUT;
 411:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       }
 412:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
 413:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
 414:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
 415:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 416:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*----------------------------- PLLSAI Configuration -----------------------*/
 417:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO
 418:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   if (pllsaiused == 1U)
 419:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
 420:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Disable PLLSAI Clock */
 421:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_PLLSAI_DISABLE();
 422:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Get tick */
 423:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     tickstart = HAL_GetTick();
 424:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Wait till PLLSAI is disabled */
 425:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 426:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 427:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 428:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
ARM GAS  /tmp/cci617lT.s 			page 9


 429:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* return in case of Timeout detected */
 430:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         return HAL_TIMEOUT;
 431:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       }
 432:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
 433:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 434:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the PLLSAI division factors */
 435:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
 436:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 437:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 438:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
 439:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 440:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****          && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 441:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (P
 442:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 443:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* check for PLLSAIQ Parameter */
 444:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 445:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* check for PLLSAI/DIVQ Parameter */
 446:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 447:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 448:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuratio
 449:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) 
 450:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
 451:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
 452:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
 453:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip
 454:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****                               PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 455:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 456:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
 457:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 458:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
 459:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 460:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
 461:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* In Case of PLLI2S is selected as source clock for CLK48 */
 462:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 463:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 464:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 465:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* check for Parameters */
 466:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 467:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration)
 468:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 469:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Configure the PLLSAI division factors */
 470:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
 471:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
 472:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphC
 473:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****                               pllsaiq, 0U);
 474:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
 475:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 476:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable PLLSAI Clock */
 477:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_PLLSAI_ENABLE();
 478:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Get tick */
 479:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     tickstart = HAL_GetTick();
 480:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Wait till PLLSAI is ready */
 481:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 482:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 483:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 484:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
 485:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* return in case of Timeout detected */
ARM GAS  /tmp/cci617lT.s 			page 10


 486:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         return HAL_TIMEOUT;
 487:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       }
 488:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
 489:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
 490:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   return HAL_OK;
 491:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** }
 492:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 493:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** /**
 494:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @brief  Get the RCC_PeriphCLKInitTypeDef according to the internal
 495:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *         RCC configuration registers.
 496:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
 497:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *         will be configured.
 498:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @retval None
 499:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   */
 500:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
 501:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** {
 502:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t tempreg;
 503:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 504:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Set all possible values for the extended clock type parameter------------*/
 505:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1 | RCC_PERIPHCLK_I2S_APB2 | \
 506:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_SAI1     | RCC_PERIPHCLK_SAI2     | \
 507:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_TIM      | RCC_PERIPHCLK_RTC      | \
 508:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_CEC      | RCC_PERIPHCLK_FMPI2C1  | \
 509:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_CLK48     | RCC_PERIPHCLK_SDIO     | \
 510:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_SPDIFRX;
 511:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 512:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the PLLI2S Clock configuration --------------------------------------*/
 513:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM) >> RCC_PLLI
 514:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI
 515:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PL
 516:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI
 517:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI
 518:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the PLLSAI Clock configuration --------------------------------------*/
 519:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLSAI.PLLSAIM = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM) >> RCC_PLLS
 520:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLS
 521:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PL
 522:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLS
 523:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the PLLSAI/PLLI2S division factors ----------------------------------*/
 524:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) >> RCC_DCKCFGR_PLL
 525:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> RCC_DCKCFGR_PLL
 526:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 527:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the SAI1 clock configuration ----------------------------------------*/
 528:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 529:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 530:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the SAI2 clock configuration ----------------------------------------*/
 531:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 532:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 533:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the I2S APB1 clock configuration ------------------------------------*/
 534:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->I2sApb1ClockSelection = __HAL_RCC_GET_I2S_APB1_SOURCE();
 535:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 536:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the I2S APB2 clock configuration ------------------------------------*/
 537:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->I2sApb2ClockSelection = __HAL_RCC_GET_I2S_APB2_SOURCE();
 538:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 539:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the RTC Clock configuration -----------------------------------------*/
 540:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 541:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 542:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
ARM GAS  /tmp/cci617lT.s 			page 11


 543:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the CEC clock configuration -----------------------------------------*/
 544:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 545:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 546:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the FMPI2C1 clock configuration -------------------------------------*/
 547:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->Fmpi2c1ClockSelection = __HAL_RCC_GET_FMPI2C1_SOURCE();
 548:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 549:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the CLK48 clock configuration ----------------------------------------*/
 550:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 551:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 552:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the SDIO clock configuration ----------------------------------------*/
 553:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->SdioClockSelection = __HAL_RCC_GET_SDIO_SOURCE();
 554:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 555:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the SPDIFRX clock configuration -------------------------------------*/
 556:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->SpdifClockSelection = __HAL_RCC_GET_SPDIFRX_SOURCE();
 557:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 558:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the TIM Prescaler configuration -------------------------------------*/
 559:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
 560:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
 561:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 562:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
 563:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   else
 564:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
 565:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 566:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
 567:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** }
 568:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 569:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** /**
 570:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @brief  Return the peripheral clock frequency for a given peripheral(SAI..)
 571:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @note   Return 0 if peripheral clock identifier not managed by this API
 572:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @param  PeriphClk Peripheral clock identifier
 573:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *         This parameter can be one of the following values:
 574:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
 575:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
 576:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
 577:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
 578:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @retval Frequency in KHz
 579:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   */
 580:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
 581:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** {
 582:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t tmpreg1 = 0U;
 583:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* This variable used to store the SAI clock frequency (value in Hz) */
 584:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t frequency = 0U;
 585:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* This variable used to store the VCO Input (value in Hz) */
 586:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t vcoinput = 0U;
 587:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* This variable used to store the SAI clock source */
 588:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t saiclocksource = 0U;
 589:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t srcclk = 0U;
 590:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* This variable used to store the VCO Output (value in Hz) */
 591:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t vcooutput = 0U;
 592:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   switch (PeriphClk)
 593:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
 594:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     case RCC_PERIPHCLK_SAI1:
 595:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     case RCC_PERIPHCLK_SAI2:
 596:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 597:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       saiclocksource = RCC->DCKCFGR;
 598:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 599:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       switch (saiclocksource)
ARM GAS  /tmp/cci617lT.s 			page 12


 600:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
 601:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         case 0U: /* PLLSAI is the clock source for SAI*/
 602:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         {
 603:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* Configure the PLLSAI division factor */
 604:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLLSAI_VCO Input  = PLL_SOURCE/PLLSAIM */
 605:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 606:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           {
 607:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             /* In Case the PLL Source is HSI (Internal Clock) */
 608:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 609:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
 610:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           else
 611:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           {
 612:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             /* In Case the PLL Source is HSE (External Clock) */
 613:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 614:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
 615:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
 616:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
 617:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 618:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U)) / (tmpreg1);
 619:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 620:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
 621:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 622:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = frequency / (tmpreg1);
 623:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           break;
 624:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         }
 625:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         case RCC_DCKCFGR_SAI1SRC_0: /* PLLI2S is the clock source for SAI*/
 626:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         case RCC_DCKCFGR_SAI2SRC_0: /* PLLI2S is the clock source for SAI*/
 627:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         {
 628:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* Configure the PLLI2S division factor */
 629:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
 630:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 631:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           {
 632:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             /* In Case the PLL Source is HSI (Internal Clock) */
 633:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 634:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
 635:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           else
 636:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           {
 637:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             /* In Case the PLL Source is HSE (External Clock) */
 638:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 639:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
 640:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 641:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
 642:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
 643:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 644:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg1);
 645:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 646:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
 647:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 648:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = frequency / (tmpreg1);
 649:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           break;
 650:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         }
 651:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         case RCC_DCKCFGR_SAI1SRC_1: /* PLLR is the clock source for SAI*/
 652:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         case RCC_DCKCFGR_SAI2SRC_1: /* PLLR is the clock source for SAI*/
 653:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         {
 654:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* Configure the PLLI2S division factor */
 655:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLL_VCO Input  = PLL_SOURCE/PLLM */
 656:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
ARM GAS  /tmp/cci617lT.s 			page 13


 657:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           {
 658:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             /* In Case the PLL Source is HSI (Internal Clock) */
 659:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 660:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
 661:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           else
 662:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           {
 663:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             /* In Case the PLL Source is HSE (External Clock) */
 664:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 665:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
 666:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 667:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLL_VCO Output = PLL_VCO Input * PLLN */
 668:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* SAI_CLK_x = PLL_VCO Output/PLLR */
 669:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 670:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U)) / (tmpreg1);
 671:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           break;
 672:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         }
 673:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         case RCC_DCKCFGR_SAI1SRC: /* External clock is the clock source for SAI*/
 674:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         {
 675:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = EXTERNAL_CLOCK_VALUE;
 676:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           break;
 677:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         }
 678:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         case RCC_DCKCFGR_SAI2SRC: /* PLLSRC(HSE or HSI) is the clock source for SAI*/
 679:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         {
 680:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 681:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           {
 682:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             /* In Case the PLL Source is HSI (Internal Clock) */
 683:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             frequency = (uint32_t)(HSI_VALUE);
 684:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
 685:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           else
 686:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           {
 687:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             /* In Case the PLL Source is HSE (External Clock) */
 688:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             frequency = (uint32_t)(HSE_VALUE);
 689:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
 690:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           break;
 691:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         }
 692:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         default :
 693:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         {
 694:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           break;
 695:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         }
 696:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       }
 697:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       break;
 698:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
 699:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     case RCC_PERIPHCLK_I2S_APB1:
 700:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 701:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Get the current I2S source */
 702:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 703:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       switch (srcclk)
 704:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
 705:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S cl
 706:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         case RCC_I2SAPB1CLKSOURCE_EXT:
 707:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         {
 708:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* Set the I2S clock to the external clock  value */
 709:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = EXTERNAL_CLOCK_VALUE;
 710:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           break;
 711:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         }
 712:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S c
 713:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         case RCC_I2SAPB1CLKSOURCE_PLLI2S:
ARM GAS  /tmp/cci617lT.s 			page 14


 714:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         {
 715:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* Configure the PLLI2S division factor */
 716:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
 717:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 718:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           {
 719:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             /* Get the I2S source clock value */
 720:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM))
 721:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
 722:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           else
 723:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           {
 724:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             /* Get the I2S source clock value */
 725:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM))
 726:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
 727:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 728:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
 729:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (
 730:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
 731:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) &
 732:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           break;
 733:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         }
 734:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
 735:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         case RCC_I2SAPB1CLKSOURCE_PLLR:
 736:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         {
 737:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* Configure the PLL division factor R */
 738:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLL_VCO Input  = PLL_SOURCE/PLLM */
 739:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 740:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           {
 741:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             /* Get the I2S source clock value */
 742:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 743:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
 744:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           else
 745:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           {
 746:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             /* Get the I2S source clock value */
 747:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 748:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
 749:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 750:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLL_VCO Output = PLL_VCO Input * PLLN */
 751:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCF
 752:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* I2S_CLK = PLL_VCO Output/PLLR */
 753:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = (uint32_t)(vcooutput / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLL
 754:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           break;
 755:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         }
 756:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
 757:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         case RCC_I2SAPB1CLKSOURCE_PLLSRC:
 758:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         {
 759:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 760:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           {
 761:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             frequency = HSE_VALUE;
 762:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
 763:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           else
 764:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           {
 765:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             frequency = HSI_VALUE;
 766:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
 767:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           break;
 768:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         }
 769:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* Clock not enabled for I2S*/
 770:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         default:
ARM GAS  /tmp/cci617lT.s 			page 15


 771:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         {
 772:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = 0U;
 773:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           break;
 774:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         }
 775:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       }
 776:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       break;
 777:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
 778:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     case RCC_PERIPHCLK_I2S_APB2:
 779:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 780:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Get the current I2S source */
 781:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 782:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       switch (srcclk)
 783:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
 784:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S cl
 785:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         case RCC_I2SAPB2CLKSOURCE_EXT:
 786:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         {
 787:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* Set the I2S clock to the external clock  value */
 788:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = EXTERNAL_CLOCK_VALUE;
 789:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           break;
 790:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         }
 791:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S c
 792:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         case RCC_I2SAPB2CLKSOURCE_PLLI2S:
 793:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         {
 794:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* Configure the PLLI2S division factor */
 795:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
 796:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 797:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           {
 798:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             /* Get the I2S source clock value */
 799:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM))
 800:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
 801:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           else
 802:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           {
 803:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             /* Get the I2S source clock value */
 804:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM))
 805:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
 806:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 807:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
 808:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (
 809:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
 810:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) &
 811:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           break;
 812:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         }
 813:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
 814:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         case RCC_I2SAPB2CLKSOURCE_PLLR:
 815:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         {
 816:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* Configure the PLL division factor R */
 817:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLL_VCO Input  = PLL_SOURCE/PLLM */
 818:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 819:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           {
 820:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             /* Get the I2S source clock value */
 821:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 822:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
 823:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           else
 824:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           {
 825:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             /* Get the I2S source clock value */
 826:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 827:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
ARM GAS  /tmp/cci617lT.s 			page 16


 828:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 829:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLL_VCO Output = PLL_VCO Input * PLLN */
 830:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCF
 831:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* I2S_CLK = PLL_VCO Output/PLLR */
 832:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = (uint32_t)(vcooutput / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLL
 833:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           break;
 834:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         }
 835:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
 836:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         case RCC_I2SAPB2CLKSOURCE_PLLSRC:
 837:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         {
 838:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 839:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           {
 840:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             frequency = HSE_VALUE;
 841:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
 842:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           else
 843:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           {
 844:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             frequency = HSI_VALUE;
 845:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
 846:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           break;
 847:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         }
 848:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* Clock not enabled for I2S*/
 849:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         default:
 850:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         {
 851:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = 0U;
 852:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           break;
 853:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         }
 854:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       }
 855:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       break;
 856:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
 857:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     default:
 858:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 859:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       break;
 860:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
 861:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
 862:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   return frequency;
 863:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** }
 864:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F446xx */
 865:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 866:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(STM32F469xx) || defined(STM32F479xx)
 867:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** /**
 868:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @brief  Initializes the RCC extended peripherals clocks according to the specified
 869:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *         parameters in the RCC_PeriphCLKInitTypeDef.
 870:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
 871:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *         contains the configuration information for the Extended Peripherals
 872:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *         clocks(I2S, SAI, LTDC, RTC and TIM).
 873:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *
 874:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @note   Care must be taken when HAL_RCCEx_PeriphCLKConfig() is used to select
 875:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *         the RTC clock source; in this case the Backup domain will be reset in
 876:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *         order to modify the RTC Clock source, as consequence RTC registers (including
 877:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *         the backup registers) and RCC_BDCR register are set to their reset values.
 878:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *
 879:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @retval HAL status
 880:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   */
 881:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
 882:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** {
 883:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t tickstart = 0U;
 884:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t tmpreg1 = 0U;
ARM GAS  /tmp/cci617lT.s 			page 17


 885:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t pllsaip = 0U;
 886:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t pllsaiq = 0U;
 887:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t pllsair = 0U;
 888:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 889:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Check the parameters */
 890:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 891:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 892:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------- CLK48 Configuration --------------------------*/
 893:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 894:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
 895:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the parameters */
 896:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));
 897:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 898:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure the CLK48 clock source */
 899:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 900:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
 901:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
 902:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 903:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*------------------------------ SDIO Configuration ------------------------*/
 904:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 905:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
 906:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the parameters */
 907:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));
 908:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 909:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure the SDIO clock source */
 910:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 911:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
 912:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
 913:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 914:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
 915:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*------------------- Common configuration SAI/I2S -------------------------*/
 916:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
 917:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****      factor is common parameters for both peripherals */
 918:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 919:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI
 920:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 921:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
 922:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* check for Parameters */
 923:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 924:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 925:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Disable the PLLI2S */
 926:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_PLLI2S_DISABLE();
 927:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Get tick */
 928:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     tickstart = HAL_GetTick();
 929:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Wait till PLLI2S is disabled */
 930:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 931:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 932:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 933:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
 934:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* return in case of Timeout detected */
 935:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         return HAL_TIMEOUT;
 936:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       }
 937:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
 938:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 939:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /*---------------------- I2S configuration -------------------------------*/
 940:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
 941:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       only for I2S configuration */
ARM GAS  /tmp/cci617lT.s 			page 18


 942:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 943:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 944:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* check for Parameters */
 945:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 946:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Configure the PLLI2S division factors */
 947:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
 948:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
 949:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 950:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
 951:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 952:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /*---------------------------- SAI configuration -------------------------*/
 953:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
 954:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****        be added only for SAI configuration */
 955:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PL
 956:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 957:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Check the PLLI2S division factors */
 958:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 959:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 960:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 961:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration)
 962:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 963:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Configure the PLLI2S division factors */
 964:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
 965:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
 966:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
 967:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, 
 968:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
 969:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 970:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
 971:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 972:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /*----------------- In Case of PLLI2S is just selected  -----------------*/
 973:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 974:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 975:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Check for Parameters */
 976:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 977:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 978:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 979:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Configure the PLLI2S multiplication and division factors */
 980:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 981:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****                                      PeriphClkInit->PLLI2S.PLLI2SR);
 982:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
 983:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 984:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable the PLLI2S */
 985:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_PLLI2S_ENABLE();
 986:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Get tick */
 987:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     tickstart = HAL_GetTick();
 988:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Wait till PLLI2S is ready */
 989:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 990:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 991:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 992:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
 993:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* return in case of Timeout detected */
 994:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         return HAL_TIMEOUT;
 995:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       }
 996:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
 997:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
 998:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
ARM GAS  /tmp/cci617lT.s 			page 19


 999:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1000:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
1001:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*----------------------- Common configuration SAI/LTDC --------------------*/
1002:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
1003:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****      factor is common parameters for these peripherals */
1004:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLS
1005:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)         
1006:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)      
1007:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****        (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
1008:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
1009:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the PLLSAI division factors */
1010:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
1011:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1012:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Disable PLLSAI Clock */
1013:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_PLLSAI_DISABLE();
1014:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Get tick */
1015:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     tickstart = HAL_GetTick();
1016:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Wait till PLLSAI is disabled */
1017:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
1018:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
1019:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
1020:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
1021:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* return in case of Timeout detected */
1022:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         return HAL_TIMEOUT;
1023:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       }
1024:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
1025:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1026:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /*---------------------------- SAI configuration -------------------------*/
1027:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
1028:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****        be added only for SAI configuration */
1029:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PL
1030:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
1031:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
1032:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
1033:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1034:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuratio
1035:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) 
1036:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration)
1037:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
1038:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
1039:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
1040:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
1041:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ
1042:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
1043:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
1044:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
1045:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1046:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /*---------------------------- LTDC configuration ------------------------*/
1047:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
1048:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
1049:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
1050:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
1051:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1052:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuratio
1053:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) 
1054:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration)
1055:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
ARM GAS  /tmp/cci617lT.s 			page 20


1056:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
1057:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
1058:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
1059:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSA
1060:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
1061:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
1062:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
1063:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1064:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /*---------------------------- CLK48 configuration ------------------------*/
1065:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure the PLLSAI when it is used as clock source for CLK48 */
1066:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
1067:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
1068:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
1069:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
1070:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1071:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration)
1072:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
1073:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration)
1074:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
1075:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
1076:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
1077:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
1078:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq
1079:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
1080:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1081:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable PLLSAI Clock */
1082:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_PLLSAI_ENABLE();
1083:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Get tick */
1084:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     tickstart = HAL_GetTick();
1085:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Wait till PLLSAI is ready */
1086:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
1087:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
1088:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
1089:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
1090:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* return in case of Timeout detected */
1091:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         return HAL_TIMEOUT;
1092:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       }
1093:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
1094:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
1095:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1096:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
1097:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1098:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*---------------------------- RTC configuration ---------------------------*/
1099:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
1100:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
1101:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check for RTC Parameters used to output RTCCLK */
1102:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
1103:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1104:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable Power Clock*/
1105:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_PWR_CLK_ENABLE();
1106:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1107:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable write access to Backup domain */
1108:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     PWR->CR |= PWR_CR_DBP;
1109:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1110:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Get tick */
1111:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     tickstart = HAL_GetTick();
1112:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
ARM GAS  /tmp/cci617lT.s 			page 21


1113:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     while ((PWR->CR & PWR_CR_DBP) == RESET)
1114:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
1115:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
1116:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
1117:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         return HAL_TIMEOUT;
1118:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       }
1119:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
1120:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value 
1121:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
1122:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCS
1123:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
1124:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Store the content of BDCR register before the reset of Backup Domain */
1125:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
1126:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* RTC Clock selection can be changed only if the Backup Domain is reset */
1127:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_BACKUPRESET_FORCE();
1128:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_BACKUPRESET_RELEASE();
1129:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Restore the Content of BDCR register */
1130:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       RCC->BDCR = tmpreg1;
1131:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1132:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
1133:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
1134:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
1135:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* Get tick */
1136:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         tickstart = HAL_GetTick();
1137:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1138:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* Wait till LSE is ready */
1139:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
1140:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         {
1141:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
1142:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           {
1143:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             return HAL_TIMEOUT;
1144:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
1145:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         }
1146:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       }
1147:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
1148:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
1149:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
1150:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
1151:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1152:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*---------------------------- TIM configuration ---------------------------*/
1153:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
1154:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
1155:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
1156:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
1157:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   return HAL_OK;
1158:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** }
1159:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1160:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** /**
1161:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @brief  Configures the RCC_PeriphCLKInitTypeDef according to the internal
1162:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * RCC configuration registers.
1163:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
1164:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *         will be configured.
1165:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @retval None
1166:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   */
1167:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
1168:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** {
1169:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t tempreg;
ARM GAS  /tmp/cci617lT.s 			page 22


1170:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1171:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Set all possible values for the extended clock type parameter------------*/
1172:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S        | RCC_PERIPHCLK_SAI_PLLSAI | \
1173:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_SAI_PLLI2S | RCC_PERIPHCLK_LTDC       | \
1174:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_TIM        | RCC_PERIPHCLK_RTC        | \
1175:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_CLK48       | RCC_PERIPHCLK_SDIO;
1176:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1177:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the PLLI2S Clock configuration --------------------------------------*/
1178:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI
1179:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI
1180:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI
1181:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the PLLSAI Clock configuration --------------------------------------*/
1182:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLS
1183:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLS
1184:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLS
1185:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the PLLSAI/PLLI2S division factors ----------------------------------*/
1186:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) >> RCC_DCKCFGR_PLL
1187:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> RCC_DCKCFGR_PLL
1188:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLSAIDivR = (uint32_t)(RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVR);
1189:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the RTC Clock configuration -----------------------------------------*/
1190:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
1191:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
1192:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1193:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the CLK48 clock configuration -------------------------------------*/
1194:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
1195:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1196:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the SDIO clock configuration ----------------------------------------*/
1197:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->SdioClockSelection = __HAL_RCC_GET_SDIO_SOURCE();
1198:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1199:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
1200:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
1201:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
1202:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
1203:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   else
1204:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
1205:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
1206:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
1207:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** }
1208:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1209:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** /**
1210:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @brief  Return the peripheral clock frequency for a given peripheral(SAI..)
1211:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @note   Return 0 if peripheral clock identifier not managed by this API
1212:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @param  PeriphClk Peripheral clock identifier
1213:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *         This parameter can be one of the following values:
1214:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
1215:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @retval Frequency in KHz
1216:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   */
1217:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
1218:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** {
1219:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* This variable used to store the I2S clock frequency (value in Hz) */
1220:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t frequency = 0U;
1221:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* This variable used to store the VCO Input (value in Hz) */
1222:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t vcoinput = 0U;
1223:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t srcclk = 0U;
1224:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* This variable used to store the VCO Output (value in Hz) */
1225:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t vcooutput = 0U;
1226:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   switch (PeriphClk)
ARM GAS  /tmp/cci617lT.s 			page 23


1227:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
1228:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     case RCC_PERIPHCLK_I2S:
1229:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
1230:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Get the current I2S source */
1231:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       srcclk = __HAL_RCC_GET_I2S_SOURCE();
1232:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       switch (srcclk)
1233:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
1234:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S cl
1235:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         case RCC_I2SCLKSOURCE_EXT:
1236:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         {
1237:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* Set the I2S clock to the external clock  value */
1238:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = EXTERNAL_CLOCK_VALUE;
1239:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           break;
1240:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         }
1241:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S c
1242:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         case RCC_I2SCLKSOURCE_PLLI2S:
1243:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         {
1244:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* Configure the PLLI2S division factor */
1245:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
1246:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
1247:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           {
1248:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             /* Get the I2S source clock value */
1249:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
1250:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
1251:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           else
1252:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           {
1253:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             /* Get the I2S source clock value */
1254:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
1255:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
1256:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1257:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
1258:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (
1259:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
1260:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) &
1261:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           break;
1262:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         }
1263:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* Clock not enabled for I2S*/
1264:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         default:
1265:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         {
1266:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = 0U;
1267:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           break;
1268:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         }
1269:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       }
1270:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       break;
1271:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
1272:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     default:
1273:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
1274:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       break;
1275:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
1276:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
1277:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   return frequency;
1278:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** }
1279:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F469xx || STM32F479xx */
1280:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1281:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) ||
1282:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** /**
1283:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @brief  Initializes the RCC extended peripherals clocks according to the specified
ARM GAS  /tmp/cci617lT.s 			page 24


1284:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *         parameters in the RCC_PeriphCLKInitTypeDef.
1285:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
1286:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *         contains the configuration information for the Extended Peripherals
1287:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *         clocks(I2S, LTDC RTC and TIM).
1288:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *
1289:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @note   Care must be taken when HAL_RCCEx_PeriphCLKConfig() is used to select
1290:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *         the RTC clock source; in this case the Backup domain will be reset in
1291:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *         order to modify the RTC Clock source, as consequence RTC registers (including
1292:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *         the backup registers) and RCC_BDCR register are set to their reset values.
1293:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *
1294:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @retval HAL status
1295:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   */
1296:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
1297:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** {
1298:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t tickstart = 0U;
1299:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t tmpreg1 = 0U;
1300:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(STM32F413xx) || defined(STM32F423xx)
1301:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t plli2sq = 0U;
1302:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F413xx || STM32F423xx */
1303:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t plli2sused = 0U;
1304:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1305:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Check the peripheral clock selection parameters */
1306:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
1307:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1308:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*----------------------------------- I2S APB1 configuration ---------------*/
1309:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
1310:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
1311:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the parameters */
1312:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));
1313:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1314:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure I2S Clock source */
1315:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
1316:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable the PLLI2S when it's used as clock source for I2S */
1317:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
1318:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
1319:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       plli2sused = 1U;
1320:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
1321:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
1322:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
1323:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1324:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*----------------------------------- I2S APB2 configuration ---------------*/
1325:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
1326:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
1327:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the parameters */
1328:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));
1329:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1330:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure I2S Clock source */
1331:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
1332:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable the PLLI2S when it's used as clock source for I2S */
1333:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
1334:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
1335:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       plli2sused = 1U;
1336:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
1337:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
1338:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
1339:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1340:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(STM32F413xx) || defined(STM32F423xx)
ARM GAS  /tmp/cci617lT.s 			page 25


1341:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*----------------------- SAI1 Block A configuration -----------------------*/
1342:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
1343:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
1344:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the parameters */
1345:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));
1346:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1347:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure SAI1 Clock source */
1348:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
1349:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable the PLLI2S when it's used as clock source for SAI */
1350:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     if (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
1351:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
1352:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       plli2sused = 1U;
1353:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
1354:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable the PLLSAI when it's used as clock source for SAI */
1355:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     if (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
1356:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
1357:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Check for PLL/DIVR parameters */
1358:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));
1359:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1360:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
1361:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
1362:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
1363:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
1364:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
1365:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1366:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*---------------------- SAI1 Block B configuration ------------------------*/
1367:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
1368:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
1369:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the parameters */
1370:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));
1371:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1372:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure SAI1 Clock source */
1373:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
1374:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable the PLLI2S when it's used as clock source for SAI */
1375:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     if (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
1376:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
1377:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       plli2sused = 1U;
1378:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
1379:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable the PLLSAI when it's used as clock source for SAI */
1380:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     if (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
1381:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
1382:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Check for PLL/DIVR parameters */
1383:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));
1384:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1385:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
1386:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
1387:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
1388:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
1389:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
1390:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F413xx || STM32F423xx */
1391:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1392:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*------------------------------------ RTC configuration -------------------*/
1393:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
1394:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
1395:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check for RTC Parameters used to output RTCCLK */
1396:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
1397:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
ARM GAS  /tmp/cci617lT.s 			page 26


1398:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable Power Clock*/
1399:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_PWR_CLK_ENABLE();
1400:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1401:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable write access to Backup domain */
1402:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     PWR->CR |= PWR_CR_DBP;
1403:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1404:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Get tick */
1405:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     tickstart = HAL_GetTick();
1406:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1407:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     while ((PWR->CR & PWR_CR_DBP) == RESET)
1408:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
1409:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
1410:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
1411:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         return HAL_TIMEOUT;
1412:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       }
1413:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
1414:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value 
1415:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
1416:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCS
1417:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
1418:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Store the content of BDCR register before the reset of Backup Domain */
1419:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
1420:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* RTC Clock selection can be changed only if the Backup Domain is reset */
1421:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_BACKUPRESET_FORCE();
1422:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_BACKUPRESET_RELEASE();
1423:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Restore the Content of BDCR register */
1424:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       RCC->BDCR = tmpreg1;
1425:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1426:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
1427:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
1428:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
1429:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* Get tick */
1430:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         tickstart = HAL_GetTick();
1431:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1432:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* Wait till LSE is ready */
1433:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
1434:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         {
1435:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
1436:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           {
1437:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             return HAL_TIMEOUT;
1438:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
1439:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         }
1440:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       }
1441:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
1442:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
1443:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
1444:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
1445:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1446:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*------------------------------------ TIM configuration -------------------*/
1447:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
1448:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
1449:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure Timer Prescaler */
1450:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
1451:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
1452:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
1453:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1454:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*------------------------------------- FMPI2C1 Configuration --------------*/
ARM GAS  /tmp/cci617lT.s 			page 27


1455:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
1456:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
1457:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the parameters */
1458:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));
1459:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1460:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure the FMPI2C1 clock source */
1461:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
1462:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
1463:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
1464:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1465:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*------------------------------------- CLK48 Configuration ----------------*/
1466:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
1467:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
1468:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the parameters */
1469:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));
1470:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1471:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure the SDIO clock source */
1472:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
1473:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1474:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable the PLLI2S when it's used as clock source for CLK48 */
1475:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
1476:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
1477:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       plli2sused = 1U;
1478:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
1479:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
1480:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
1481:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1482:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*------------------------------------- SDIO Configuration -----------------*/
1483:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
1484:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
1485:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the parameters */
1486:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));
1487:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1488:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure the SDIO clock source */
1489:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
1490:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
1491:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
1492:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1493:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*-------------------------------------- PLLI2S Configuration --------------*/
1494:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
1495:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****      I2S on APB2*/
1496:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
1497:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
1498:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Disable the PLLI2S */
1499:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_PLLI2S_DISABLE();
1500:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Get tick */
1501:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     tickstart = HAL_GetTick();
1502:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Wait till PLLI2S is disabled */
1503:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
1504:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
1505:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
1506:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
1507:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* return in case of Timeout detected */
1508:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         return HAL_TIMEOUT;
1509:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       }
1510:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
1511:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
ARM GAS  /tmp/cci617lT.s 			page 28


1512:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* check for common PLLI2S Parameters */
1513:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
1514:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
1515:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
1516:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /*-------------------- Set the PLL I2S clock -----------------------------*/
1517:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
1518:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1519:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
1520:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB
1521:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****          && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
1522:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB
1523:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && 
1524:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (P
1525:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
1526:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* check for Parameters */
1527:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
1528:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
1529:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1530:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Configure the PLLI2S division factors */
1531:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
1532:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
1533:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphC
1534:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****                               PeriphClkInit->PLLI2S.PLLI2SR);
1535:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
1536:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1537:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(STM32F413xx) || defined(STM32F423xx)
1538:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
1539:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA)
1540:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****          && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
1541:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (P
1542:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
1543:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Check for PLLI2S Parameters */
1544:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
1545:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Check for PLLI2S/DIVR parameters */
1546:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));
1547:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1548:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuratio
1549:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
1550:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Configure the PLLI2S division factors */
1551:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
1552:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
1553:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
1554:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq
1555:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****                               PeriphClkInit->PLLI2S.PLLI2SR);
1556:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1557:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
1558:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
1559:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
1560:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F413xx || STM32F423xx */
1561:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1562:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /*----------------- In Case of PLLI2S is just selected  ------------------*/
1563:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
1564:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
1565:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Check for Parameters */
1566:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
1567:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
1568:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
ARM GAS  /tmp/cci617lT.s 			page 29


1569:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Configure the PLLI2S division factors */
1570:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
1571:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
1572:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphC
1573:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****                               PeriphClkInit->PLLI2S.PLLI2SR);
1574:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
1575:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1576:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable the PLLI2S */
1577:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_PLLI2S_ENABLE();
1578:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Get tick */
1579:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     tickstart = HAL_GetTick();
1580:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Wait till PLLI2S is ready */
1581:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
1582:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
1583:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
1584:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
1585:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* return in case of Timeout detected */
1586:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         return HAL_TIMEOUT;
1587:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       }
1588:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
1589:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
1590:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
1591:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1592:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*-------------------- DFSDM1 clock source configuration -------------------*/
1593:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
1594:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
1595:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the parameters */
1596:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
1597:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1598:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure the DFSDM1 interface clock source */
1599:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
1600:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
1601:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
1602:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1603:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*-------------------- DFSDM1 Audio clock source configuration -------------*/
1604:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_
1605:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
1606:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the parameters */
1607:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
1608:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1609:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure the DFSDM1 Audio interface clock source */
1610:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
1611:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
1612:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
1613:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1614:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(STM32F413xx) || defined(STM32F423xx)
1615:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*-------------------- DFSDM2 clock source configuration -------------------*/
1616:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
1617:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
1618:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the parameters */
1619:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));
1620:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1621:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure the DFSDM1 interface clock source */
1622:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
1623:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
1624:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
1625:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
ARM GAS  /tmp/cci617lT.s 			page 30


1626:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*-------------------- DFSDM2 Audio clock source configuration -------------*/
1627:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_
1628:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
1629:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the parameters */
1630:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));
1631:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1632:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure the DFSDM1 Audio interface clock source */
1633:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
1634:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
1635:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
1636:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1637:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*---------------------------- LPTIM1 Configuration ------------------------*/
1638:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
1639:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
1640:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the parameters */
1641:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
1642:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1643:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure the LPTIM1 clock source */
1644:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
1645:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
1646:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
1647:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F413xx || STM32F423xx */
1648:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1649:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   return HAL_OK;
1650:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** }
1651:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1652:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** /**
1653:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @brief  Get the RCC_PeriphCLKInitTypeDef according to the internal
1654:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *         RCC configuration registers.
1655:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
1656:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *         will be configured.
1657:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @retval None
1658:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   */
1659:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
1660:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** {
1661:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t tempreg;
1662:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1663:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Set all possible values for the extended clock type parameter------------*/
1664:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(STM32F413xx) || defined(STM32F423xx)
1665:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1     | RCC_PERIPHCLK_I2S_APB2 | \
1666:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_TIM          | RCC_PERIPHCLK_RTC      | \
1667:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_FMPI2C1      | RCC_PERIPHCLK_CLK48    | \
1668:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_SDIO         | RCC_PERIPHCLK_DFSDM1   | \
1669:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_DFSDM1_AUDIO | RCC_PERIPHCLK_DFSDM2   | \
1670:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_DFSDM2_AUDIO | RCC_PERIPHCLK_LPTIM1   | \
1671:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_SAIA         | RCC_PERIPHCLK_SAIB;
1672:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F412Cx */
1673:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1 | RCC_PERIPHCLK_I2S_APB2 | \
1674:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_TIM      | RCC_PERIPHCLK_RTC      | \
1675:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_FMPI2C1  | RCC_PERIPHCLK_CLK48    | \
1676:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_SDIO     | RCC_PERIPHCLK_DFSDM1   | \
1677:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****                                         RCC_PERIPHCLK_DFSDM1_AUDIO;
1678:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F413xx || STM32F423xx */
1679:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1680:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1681:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1682:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the PLLI2S Clock configuration --------------------------------------*/
ARM GAS  /tmp/cci617lT.s 			page 31


1683:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM) >> RCC_PLLI
1684:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI
1685:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI
1686:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI
1687:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(STM32F413xx) || defined(STM32F423xx)
1688:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the PLL/PLLI2S division factors -------------------------------------*/
1689:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLI2SDivR = (uint32_t)((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVR) >> RCC_DCKCFGR_PLL
1690:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLDivR = (uint32_t)((RCC->DCKCFGR & RCC_DCKCFGR_PLLDIVR) >> RCC_DCKCFGR_PLLDIVR_P
1691:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F413xx || STM32F423xx */
1692:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1693:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the I2S APB1 clock configuration ------------------------------------*/
1694:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->I2sApb1ClockSelection = __HAL_RCC_GET_I2S_APB1_SOURCE();
1695:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1696:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the I2S APB2 clock configuration ------------------------------------*/
1697:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->I2sApb2ClockSelection = __HAL_RCC_GET_I2S_APB2_SOURCE();
1698:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1699:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the RTC Clock configuration -----------------------------------------*/
1700:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
1701:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
1702:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1703:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the FMPI2C1 clock configuration -------------------------------------*/
1704:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->Fmpi2c1ClockSelection = __HAL_RCC_GET_FMPI2C1_SOURCE();
1705:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1706:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the CLK48 clock configuration ---------------------------------------*/
1707:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
1708:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1709:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the SDIO clock configuration ----------------------------------------*/
1710:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->SdioClockSelection = __HAL_RCC_GET_SDIO_SOURCE();
1711:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1712:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the DFSDM1 clock configuration --------------------------------------*/
1713:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->Dfsdm1ClockSelection = __HAL_RCC_GET_DFSDM1_SOURCE();
1714:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1715:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the DFSDM1 Audio clock configuration --------------------------------*/
1716:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
1717:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1718:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(STM32F413xx) || defined(STM32F423xx)
1719:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the DFSDM2 clock configuration --------------------------------------*/
1720:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->Dfsdm2ClockSelection = __HAL_RCC_GET_DFSDM2_SOURCE();
1721:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1722:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the DFSDM2 Audio clock configuration --------------------------------*/
1723:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->Dfsdm2AudioClockSelection = __HAL_RCC_GET_DFSDM2AUDIO_SOURCE();
1724:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1725:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the LPTIM1 clock configuration --------------------------------------*/
1726:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
1727:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1728:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the SAI1 Block Aclock configuration ---------------------------------*/
1729:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->SaiAClockSelection = __HAL_RCC_GET_SAI_BLOCKA_SOURCE();
1730:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1731:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the SAI1 Block B clock configuration --------------------------------*/
1732:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->SaiBClockSelection = __HAL_RCC_GET_SAI_BLOCKB_SOURCE();
1733:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F413xx || STM32F423xx */
1734:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1735:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the TIM Prescaler configuration -------------------------------------*/
1736:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
1737:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
1738:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
1739:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
ARM GAS  /tmp/cci617lT.s 			page 32


1740:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   else
1741:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
1742:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
1743:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
1744:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** }
1745:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1746:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** /**
1747:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @brief  Return the peripheral clock frequency for a given peripheral(I2S..)
1748:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @note   Return 0 if peripheral clock identifier not managed by this API
1749:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @param  PeriphClk Peripheral clock identifier
1750:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *         This parameter can be one of the following values:
1751:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
1752:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
1753:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @retval Frequency in KHz
1754:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   */
1755:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
1756:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** {
1757:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* This variable used to store the I2S clock frequency (value in Hz) */
1758:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t frequency = 0U;
1759:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* This variable used to store the VCO Input (value in Hz) */
1760:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t vcoinput = 0U;
1761:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t srcclk = 0U;
1762:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* This variable used to store the VCO Output (value in Hz) */
1763:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t vcooutput = 0U;
1764:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   switch (PeriphClk)
1765:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
1766:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     case RCC_PERIPHCLK_I2S_APB1:
1767:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
1768:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Get the current I2S source */
1769:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
1770:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       switch (srcclk)
1771:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
1772:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S cl
1773:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         case RCC_I2SAPB1CLKSOURCE_EXT:
1774:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         {
1775:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* Set the I2S clock to the external clock  value */
1776:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = EXTERNAL_CLOCK_VALUE;
1777:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           break;
1778:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         }
1779:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S c
1780:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         case RCC_I2SAPB1CLKSOURCE_PLLI2S:
1781:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         {
1782:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           if ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
1783:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           {
1784:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             /* Get the I2S source clock value */
1785:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFG
1786:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
1787:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           else
1788:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           {
1789:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             /* Configure the PLLI2S division factor */
1790:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
1791:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
1792:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             {
1793:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****               /* Get the I2S source clock value */
1794:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****               vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM
1795:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             }
1796:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             else
ARM GAS  /tmp/cci617lT.s 			page 33


1797:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             {
1798:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****               /* Get the I2S source clock value */
1799:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****               vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM
1800:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             }
1801:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
1802:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
1803:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (
1804:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
1805:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) &
1806:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           break;
1807:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         }
1808:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
1809:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         case RCC_I2SAPB1CLKSOURCE_PLLR:
1810:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         {
1811:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* Configure the PLL division factor R */
1812:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLL_VCO Input  = PLL_SOURCE/PLLM */
1813:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
1814:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           {
1815:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             /* Get the I2S source clock value */
1816:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
1817:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
1818:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           else
1819:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           {
1820:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             /* Get the I2S source clock value */
1821:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
1822:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
1823:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1824:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLL_VCO Output = PLL_VCO Input * PLLN */
1825:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCF
1826:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* I2S_CLK = PLL_VCO Output/PLLR */
1827:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = (uint32_t)(vcooutput / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLL
1828:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           break;
1829:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         }
1830:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
1831:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         case RCC_I2SAPB1CLKSOURCE_PLLSRC:
1832:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         {
1833:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
1834:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           {
1835:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             frequency = HSE_VALUE;
1836:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
1837:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           else
1838:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           {
1839:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             frequency = HSI_VALUE;
1840:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
1841:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           break;
1842:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         }
1843:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* Clock not enabled for I2S*/
1844:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         default:
1845:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         {
1846:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = 0U;
1847:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           break;
1848:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         }
1849:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       }
1850:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       break;
1851:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
1852:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     case RCC_PERIPHCLK_I2S_APB2:
1853:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
ARM GAS  /tmp/cci617lT.s 			page 34


1854:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Get the current I2S source */
1855:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
1856:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       switch (srcclk)
1857:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
1858:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S cl
1859:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         case RCC_I2SAPB2CLKSOURCE_EXT:
1860:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         {
1861:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* Set the I2S clock to the external clock  value */
1862:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = EXTERNAL_CLOCK_VALUE;
1863:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           break;
1864:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         }
1865:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S c
1866:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         case RCC_I2SAPB2CLKSOURCE_PLLI2S:
1867:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         {
1868:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           if ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
1869:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           {
1870:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             /* Get the I2S source clock value */
1871:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFG
1872:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
1873:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           else
1874:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           {
1875:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             /* Configure the PLLI2S division factor */
1876:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
1877:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
1878:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             {
1879:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****               /* Get the I2S source clock value */
1880:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****               vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM
1881:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             }
1882:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             else
1883:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             {
1884:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****               /* Get the I2S source clock value */
1885:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****               vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM
1886:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             }
1887:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
1888:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
1889:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (
1890:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
1891:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) &
1892:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           break;
1893:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         }
1894:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
1895:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         case RCC_I2SAPB2CLKSOURCE_PLLR:
1896:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         {
1897:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* Configure the PLL division factor R */
1898:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLL_VCO Input  = PLL_SOURCE/PLLM */
1899:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
1900:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           {
1901:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             /* Get the I2S source clock value */
1902:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
1903:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
1904:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           else
1905:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           {
1906:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             /* Get the I2S source clock value */
1907:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
1908:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
1909:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1910:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLL_VCO Output = PLL_VCO Input * PLLN */
ARM GAS  /tmp/cci617lT.s 			page 35


1911:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCF
1912:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* I2S_CLK = PLL_VCO Output/PLLR */
1913:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = (uint32_t)(vcooutput / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLL
1914:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           break;
1915:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         }
1916:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
1917:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         case RCC_I2SAPB2CLKSOURCE_PLLSRC:
1918:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         {
1919:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
1920:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           {
1921:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             frequency = HSE_VALUE;
1922:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
1923:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           else
1924:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           {
1925:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             frequency = HSI_VALUE;
1926:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
1927:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           break;
1928:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         }
1929:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* Clock not enabled for I2S*/
1930:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         default:
1931:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         {
1932:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = 0U;
1933:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           break;
1934:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         }
1935:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       }
1936:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       break;
1937:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
1938:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     default:
1939:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
1940:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       break;
1941:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
1942:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
1943:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   return frequency;
1944:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** }
1945:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F412Cx || STM32F413xx || STM32F423xx */
1946:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1947:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
1948:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** /**
1949:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @brief  Initializes the RCC extended peripherals clocks according to the specified parameters i
1950:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *         RCC_PeriphCLKInitTypeDef.
1951:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
1952:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *         contains the configuration information for the Extended Peripherals clocks(I2S and RTC 
1953:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *
1954:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @note   A caution to be taken when HAL_RCCEx_PeriphCLKConfig() is used to select RTC clock sele
1955:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *         the Reset of Backup domain will be applied in order to modify the RTC Clock source as c
1956:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
1957:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *
1958:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @retval HAL status
1959:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   */
1960:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
1961:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** {
1962:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t tickstart = 0U;
1963:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t tmpreg1 = 0U;
1964:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1965:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Check the parameters */
1966:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
1967:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
ARM GAS  /tmp/cci617lT.s 			page 36


1968:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*---------------------------- RTC configuration ---------------------------*/
1969:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
1970:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
1971:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check for RTC Parameters used to output RTCCLK */
1972:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
1973:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1974:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable Power Clock*/
1975:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_PWR_CLK_ENABLE();
1976:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1977:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable write access to Backup domain */
1978:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     PWR->CR |= PWR_CR_DBP;
1979:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1980:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Get tick */
1981:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     tickstart = HAL_GetTick();
1982:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
1983:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     while ((PWR->CR & PWR_CR_DBP) == RESET)
1984:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
1985:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
1986:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
1987:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         return HAL_TIMEOUT;
1988:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       }
1989:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
1990:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value 
1991:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
1992:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCS
1993:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
1994:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Store the content of BDCR register before the reset of Backup Domain */
1995:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
1996:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* RTC Clock selection can be changed only if the Backup Domain is reset */
1997:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_BACKUPRESET_FORCE();
1998:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_BACKUPRESET_RELEASE();
1999:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Restore the Content of BDCR register */
2000:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       RCC->BDCR = tmpreg1;
2001:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2002:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
2003:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
2004:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
2005:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* Get tick */
2006:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         tickstart = HAL_GetTick();
2007:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2008:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* Wait till LSE is ready */
2009:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
2010:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         {
2011:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
2012:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           {
2013:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             return HAL_TIMEOUT;
2014:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
2015:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         }
2016:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       }
2017:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
2018:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
2019:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
2020:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
2021:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2022:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*---------------------------- TIM configuration ---------------------------*/
2023:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
2024:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
ARM GAS  /tmp/cci617lT.s 			page 37


2025:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
2026:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
2027:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
2028:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2029:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*---------------------------- FMPI2C1 Configuration -----------------------*/
2030:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
2031:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
2032:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the parameters */
2033:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));
2034:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2035:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure the FMPI2C1 clock source */
2036:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
2037:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
2038:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
2039:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2040:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*---------------------------- LPTIM1 Configuration ------------------------*/
2041:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
2042:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
2043:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the parameters */
2044:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
2045:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2046:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure the LPTIM1 clock source */
2047:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
2048:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
2049:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2050:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*---------------------------- I2S Configuration ---------------------------*/
2051:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
2052:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
2053:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the parameters */
2054:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_I2SAPBCLKSOURCE(PeriphClkInit->I2SClockSelection));
2055:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2056:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure the I2S clock source */
2057:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2SClockSelection);
2058:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
2059:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2060:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   return HAL_OK;
2061:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** }
2062:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2063:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** /**
2064:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @brief  Configures the RCC_OscInitStruct according to the internal
2065:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * RCC configuration registers.
2066:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
2067:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * will be configured.
2068:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @retval None
2069:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   */
2070:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
2071:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** {
2072:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t tempreg;
2073:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2074:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Set all possible values for the extended clock type parameter------------*/
2075:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_FMPI2C1 | RCC_PERIPHCLK_LPTIM1 | RCC_PERIPHCL
2076:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2077:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
2078:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
2079:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2080:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
2081:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
ARM GAS  /tmp/cci617lT.s 			page 38


2082:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
2083:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
2084:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   else
2085:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
2086:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
2087:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
2088:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the FMPI2C1 clock configuration -------------------------------------*/
2089:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->Fmpi2c1ClockSelection = __HAL_RCC_GET_FMPI2C1_SOURCE();
2090:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2091:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the I2S clock configuration -----------------------------------------*/
2092:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->I2SClockSelection = __HAL_RCC_GET_I2S_SOURCE();
2093:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2094:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2095:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** }
2096:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** /**
2097:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @brief  Return the peripheral clock frequency for a given peripheral(SAI..)
2098:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @note   Return 0 if peripheral clock identifier not managed by this API
2099:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @param  PeriphClk Peripheral clock identifier
2100:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *         This parameter can be one of the following values:
2101:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
2102:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @retval Frequency in KHz
2103:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   */
2104:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
2105:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** {
2106:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* This variable used to store the I2S clock frequency (value in Hz) */
2107:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t frequency = 0U;
2108:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* This variable used to store the VCO Input (value in Hz) */
2109:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t vcoinput = 0U;
2110:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t srcclk = 0U;
2111:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* This variable used to store the VCO Output (value in Hz) */
2112:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t vcooutput = 0U;
2113:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   switch (PeriphClk)
2114:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
2115:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     case RCC_PERIPHCLK_I2S:
2116:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
2117:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Get the current I2S source */
2118:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       srcclk = __HAL_RCC_GET_I2S_SOURCE();
2119:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       switch (srcclk)
2120:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
2121:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S cl
2122:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         case RCC_I2SAPBCLKSOURCE_EXT:
2123:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         {
2124:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* Set the I2S clock to the external clock  value */
2125:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = EXTERNAL_CLOCK_VALUE;
2126:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           break;
2127:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         }
2128:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
2129:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         case RCC_I2SAPBCLKSOURCE_PLLR:
2130:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         {
2131:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* Configure the PLL division factor R */
2132:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLL_VCO Input  = PLL_SOURCE/PLLM */
2133:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
2134:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           {
2135:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             /* Get the I2S source clock value */
2136:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
2137:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
2138:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           else
ARM GAS  /tmp/cci617lT.s 			page 39


2139:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           {
2140:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             /* Get the I2S source clock value */
2141:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
2142:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
2143:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2144:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLL_VCO Output = PLL_VCO Input * PLLN */
2145:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCF
2146:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* I2S_CLK = PLL_VCO Output/PLLR */
2147:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = (uint32_t)(vcooutput / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLL
2148:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           break;
2149:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         }
2150:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
2151:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         case RCC_I2SAPBCLKSOURCE_PLLSRC:
2152:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         {
2153:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
2154:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           {
2155:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             frequency = HSE_VALUE;
2156:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
2157:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           else
2158:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           {
2159:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             frequency = HSI_VALUE;
2160:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
2161:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           break;
2162:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         }
2163:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* Clock not enabled for I2S*/
2164:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         default:
2165:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         {
2166:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = 0U;
2167:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           break;
2168:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         }
2169:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       }
2170:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       break;
2171:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
2172:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     default:
2173:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
2174:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       break;
2175:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
2176:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
2177:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   return frequency;
2178:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** }
2179:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F410Tx || STM32F410Cx || STM32F410Rx */
2180:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2181:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx)
2182:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** /**
2183:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @brief  Initializes the RCC extended peripherals clocks according to the specified
2184:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *         parameters in the RCC_PeriphCLKInitTypeDef.
2185:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
2186:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *         contains the configuration information for the Extended Peripherals
2187:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *         clocks(I2S, SAI, LTDC RTC and TIM).
2188:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *
2189:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @note   Care must be taken when HAL_RCCEx_PeriphCLKConfig() is used to select
2190:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *         the RTC clock source; in this case the Backup domain will be reset in
2191:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *         order to modify the RTC Clock source, as consequence RTC registers (including
2192:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *         the backup registers) and RCC_BDCR register are set to their reset values.
2193:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *
2194:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @retval HAL status
2195:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   */
ARM GAS  /tmp/cci617lT.s 			page 40


2196:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
2197:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** {
2198:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t tickstart = 0U;
2199:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t tmpreg1 = 0U;
2200:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2201:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Check the parameters */
2202:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
2203:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2204:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
2205:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*----------------------- Common configuration SAI/I2S ---------------------*/
2206:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
2207:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****      factor is common parameters for both peripherals */
2208:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
2209:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI
2210:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
2211:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
2212:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* check for Parameters */
2213:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
2214:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2215:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Disable the PLLI2S */
2216:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_PLLI2S_DISABLE();
2217:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Get tick */
2218:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     tickstart = HAL_GetTick();
2219:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Wait till PLLI2S is disabled */
2220:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
2221:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
2222:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
2223:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
2224:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* return in case of Timeout detected */
2225:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         return HAL_TIMEOUT;
2226:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       }
2227:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
2228:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2229:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /*---------------------------- I2S configuration -------------------------*/
2230:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
2231:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       only for I2S configuration */
2232:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
2233:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
2234:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* check for Parameters */
2235:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
2236:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Configure the PLLI2S division factors */
2237:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
2238:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
2239:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
2240:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
2241:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2242:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /*---------------------------- SAI configuration -------------------------*/
2243:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
2244:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****        be added only for SAI configuration */
2245:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PL
2246:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
2247:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Check the PLLI2S division factors */
2248:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
2249:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
2250:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2251:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration)
2252:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
ARM GAS  /tmp/cci617lT.s 			page 41


2253:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Configure the PLLI2S division factors */
2254:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
2255:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
2256:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
2257:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, 
2258:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
2259:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
2260:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
2261:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2262:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /*----------------- In Case of PLLI2S is just selected  -----------------*/
2263:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
2264:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
2265:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Check for Parameters */
2266:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
2267:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
2268:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2269:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Configure the PLLI2S multiplication and division factors */
2270:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
2271:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****                                      PeriphClkInit->PLLI2S.PLLI2SR);
2272:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
2273:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2274:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable the PLLI2S */
2275:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_PLLI2S_ENABLE();
2276:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Get tick */
2277:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     tickstart = HAL_GetTick();
2278:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Wait till PLLI2S is ready */
2279:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
2280:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
2281:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
2282:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
2283:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* return in case of Timeout detected */
2284:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         return HAL_TIMEOUT;
2285:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       }
2286:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
2287:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
2288:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
2289:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2290:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
2291:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*----------------------- Common configuration SAI/LTDC --------------------*/
2292:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
2293:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****      factor is common parameters for both peripherals */
2294:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLS
2295:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
2296:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
2297:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check the PLLSAI division factors */
2298:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
2299:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2300:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Disable PLLSAI Clock */
2301:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_PLLSAI_DISABLE();
2302:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Get tick */
2303:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     tickstart = HAL_GetTick();
2304:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Wait till PLLSAI is disabled */
2305:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
2306:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
2307:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
2308:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
2309:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* return in case of Timeout detected */
ARM GAS  /tmp/cci617lT.s 			page 42


2310:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         return HAL_TIMEOUT;
2311:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       }
2312:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
2313:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2314:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /*---------------------------- SAI configuration -------------------------*/
2315:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
2316:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****        be added only for SAI configuration */
2317:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PL
2318:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
2319:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
2320:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
2321:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2322:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration)
2323:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
2324:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
2325:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
2326:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
2327:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1
2328:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
2329:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
2330:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
2331:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2332:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /*---------------------------- LTDC configuration ------------------------*/
2333:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
2334:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
2335:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
2336:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
2337:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2338:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration)
2339:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
2340:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
2341:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
2342:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
2343:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR
2344:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
2345:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
2346:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
2347:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable PLLSAI Clock */
2348:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_PLLSAI_ENABLE();
2349:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Get tick */
2350:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     tickstart = HAL_GetTick();
2351:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Wait till PLLSAI is ready */
2352:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
2353:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
2354:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
2355:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
2356:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* return in case of Timeout detected */
2357:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         return HAL_TIMEOUT;
2358:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       }
2359:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
2360:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
2361:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
2362:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2363:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*---------------------------- RTC configuration ---------------------------*/
2364:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
2365:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
2366:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check for RTC Parameters used to output RTCCLK */
ARM GAS  /tmp/cci617lT.s 			page 43


2367:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
2368:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2369:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable Power Clock*/
2370:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_PWR_CLK_ENABLE();
2371:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2372:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable write access to Backup domain */
2373:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     PWR->CR |= PWR_CR_DBP;
2374:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2375:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Get tick */
2376:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     tickstart = HAL_GetTick();
2377:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2378:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     while ((PWR->CR & PWR_CR_DBP) == RESET)
2379:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
2380:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
2381:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
2382:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         return HAL_TIMEOUT;
2383:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       }
2384:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
2385:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value 
2386:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
2387:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCS
2388:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
2389:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Store the content of BDCR register before the reset of Backup Domain */
2390:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
2391:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* RTC Clock selection can be changed only if the Backup Domain is reset */
2392:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_BACKUPRESET_FORCE();
2393:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_BACKUPRESET_RELEASE();
2394:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Restore the Content of BDCR register */
2395:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       RCC->BDCR = tmpreg1;
2396:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2397:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
2398:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
2399:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
2400:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* Get tick */
2401:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         tickstart = HAL_GetTick();
2402:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2403:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* Wait till LSE is ready */
2404:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
2405:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         {
2406:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
2407:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           {
2408:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             return HAL_TIMEOUT;
2409:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
2410:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         }
2411:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       }
2412:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
2413:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
2414:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
2415:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*--------------------------------------------------------------------------*/
2416:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2417:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*---------------------------- TIM configuration ---------------------------*/
2418:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
2419:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
2420:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
2421:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
2422:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   return HAL_OK;
2423:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** }
ARM GAS  /tmp/cci617lT.s 			page 44


2424:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2425:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** /**
2426:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @brief  Configures the PeriphClkInit according to the internal
2427:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * RCC configuration registers.
2428:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
2429:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *         will be configured.
2430:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @retval None
2431:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   */
2432:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
2433:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** {
2434:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t tempreg;
2435:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2436:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Set all possible values for the extended clock type parameter------------*/
2437:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_SAI_PLLSAI | RCC_PERIPHCL
2438:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2439:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the PLLI2S Clock configuration -----------------------------------------------*/
2440:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI
2441:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI
2442:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI
2443:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the PLLSAI Clock configuration -----------------------------------------------*/
2444:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLS
2445:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLS
2446:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLS
2447:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the PLLSAI/PLLI2S division factors -----------------------------------------------*/
2448:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) >> RCC_DCKCFGR_PLL
2449:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> RCC_DCKCFGR_PLL
2450:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLSAIDivR = (uint32_t)(RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVR);
2451:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the RTC Clock configuration -----------------------------------------------*/
2452:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
2453:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
2454:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2455:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
2456:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
2457:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
2458:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
2459:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   else
2460:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
2461:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
2462:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
2463:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** }
2464:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2465:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** /**
2466:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @brief  Return the peripheral clock frequency for a given peripheral(SAI..)
2467:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @note   Return 0 if peripheral clock identifier not managed by this API
2468:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @param  PeriphClk Peripheral clock identifier
2469:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *         This parameter can be one of the following values:
2470:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
2471:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @retval Frequency in KHz
2472:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   */
2473:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
2474:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** {
2475:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* This variable used to store the I2S clock frequency (value in Hz) */
2476:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t frequency = 0U;
2477:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* This variable used to store the VCO Input (value in Hz) */
2478:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t vcoinput = 0U;
2479:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t srcclk = 0U;
2480:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* This variable used to store the VCO Output (value in Hz) */
ARM GAS  /tmp/cci617lT.s 			page 45


2481:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t vcooutput = 0U;
2482:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   switch (PeriphClk)
2483:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
2484:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     case RCC_PERIPHCLK_I2S:
2485:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
2486:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Get the current I2S source */
2487:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       srcclk = __HAL_RCC_GET_I2S_SOURCE();
2488:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       switch (srcclk)
2489:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
2490:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S cl
2491:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         case RCC_I2SCLKSOURCE_EXT:
2492:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         {
2493:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* Set the I2S clock to the external clock  value */
2494:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = EXTERNAL_CLOCK_VALUE;
2495:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           break;
2496:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         }
2497:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S c
2498:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         case RCC_I2SCLKSOURCE_PLLI2S:
2499:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         {
2500:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* Configure the PLLI2S division factor */
2501:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
2502:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
2503:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           {
2504:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             /* Get the I2S source clock value */
2505:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
2506:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
2507:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           else
2508:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           {
2509:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             /* Get the I2S source clock value */
2510:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
2511:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
2512:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2513:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
2514:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (
2515:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
2516:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) &
2517:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           break;
2518:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         }
2519:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* Clock not enabled for I2S*/
2520:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         default:
2521:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         {
2522:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = 0U;
2523:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           break;
2524:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         }
2525:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       }
2526:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       break;
2527:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
2528:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     default:
2529:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
2530:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       break;
2531:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
2532:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
2533:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   return frequency;
2534:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** }
2535:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx */
2536:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2537:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx)|| defined(STM32F417xx) ||\
ARM GAS  /tmp/cci617lT.s 			page 46


2538:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
2539:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** /**
2540:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @brief  Initializes the RCC extended peripherals clocks according to the specified parameters i
2541:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *         RCC_PeriphCLKInitTypeDef.
2542:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
2543:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *         contains the configuration information for the Extended Peripherals clocks(I2S and RTC 
2544:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *
2545:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @note   A caution to be taken when HAL_RCCEx_PeriphCLKConfig() is used to select RTC clock sele
2546:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *         the Reset of Backup domain will be applied in order to modify the RTC Clock source as c
2547:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
2548:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *
2549:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @retval HAL status
2550:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   */
2551:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
2552:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** {
  30              		.loc 1 2552 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 8
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		.loc 1 2552 1 is_stmt 0 view .LVU1
  35 0000 30B5     		push	{r4, r5, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 12
  38              		.cfi_offset 4, -12
  39              		.cfi_offset 5, -8
  40              		.cfi_offset 14, -4
  41 0002 83B0     		sub	sp, sp, #12
  42              	.LCFI1:
  43              		.cfi_def_cfa_offset 24
  44 0004 0446     		mov	r4, r0
2553:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t tickstart = 0U;
  45              		.loc 1 2553 3 is_stmt 1 view .LVU2
  46              	.LVL1:
2554:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t tmpreg1 = 0U;
  47              		.loc 1 2554 3 view .LVU3
2555:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2556:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Check the parameters */
2557:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  48              		.loc 1 2557 3 view .LVU4
2558:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2559:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*---------------------------- I2S configuration ---------------------------*/
2560:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
  49              		.loc 1 2560 3 view .LVU5
  50              		.loc 1 2560 90 is_stmt 0 view .LVU6
  51 0006 0368     		ldr	r3, [r0]
  52              		.loc 1 2560 6 view .LVU7
  53 0008 13F0050F 		tst	r3, #5
  54 000c 06D1     		bne	.L21
  55              	.LVL2:
  56              	.L2:
2561:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
2562:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
2563:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* check for Parameters */
2564:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
2565:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
2566:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(STM32F411xE)
2567:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
ARM GAS  /tmp/cci617lT.s 			page 47


2568:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F411xE */
2569:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Disable the PLLI2S */
2570:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_PLLI2S_DISABLE();
2571:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Get tick */
2572:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     tickstart = HAL_GetTick();
2573:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Wait till PLLI2S is disabled */
2574:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
2575:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
2576:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
2577:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
2578:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* return in case of Timeout detected */
2579:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         return HAL_TIMEOUT;
2580:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       }
2581:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
2582:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2583:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(STM32F411xE)
2584:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure the PLLI2S division factors */
2585:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
2586:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
2587:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
2588:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****                                    PeriphClkInit->PLLI2S.PLLI2SR);
2589:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #else
2590:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Configure the PLLI2S division factors */
2591:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
2592:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
2593:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
2594:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F411xE */
2595:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2596:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable the PLLI2S */
2597:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_PLLI2S_ENABLE();
2598:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Get tick */
2599:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     tickstart = HAL_GetTick();
2600:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Wait till PLLI2S is ready */
2601:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
2602:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
2603:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
2604:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
2605:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* return in case of Timeout detected */
2606:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         return HAL_TIMEOUT;
2607:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       }
2608:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
2609:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
2610:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2611:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*---------------------------- RTC configuration ---------------------------*/
2612:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
  57              		.loc 1 2612 3 is_stmt 1 view .LVU8
  58              		.loc 1 2612 22 is_stmt 0 view .LVU9
  59 000e 2368     		ldr	r3, [r4]
  60              		.loc 1 2612 6 view .LVU10
  61 0010 13F0020F 		tst	r3, #2
  62 0014 2ED1     		bne	.L22
2613:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
2614:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Check for RTC Parameters used to output RTCCLK */
2615:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
2616:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2617:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable Power Clock*/
2618:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_PWR_CLK_ENABLE();
ARM GAS  /tmp/cci617lT.s 			page 48


2619:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2620:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Enable write access to Backup domain */
2621:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     PWR->CR |= PWR_CR_DBP;
2622:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2623:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Get tick */
2624:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     tickstart = HAL_GetTick();
2625:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2626:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     while ((PWR->CR & PWR_CR_DBP) == RESET)
2627:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
2628:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
2629:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
2630:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         return HAL_TIMEOUT;
2631:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       }
2632:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
2633:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value 
2634:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
2635:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCS
2636:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
2637:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Store the content of BDCR register before the reset of Backup Domain */
2638:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
2639:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* RTC Clock selection can be changed only if the Backup Domain is reset */
2640:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_BACKUPRESET_FORCE();
2641:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_BACKUPRESET_RELEASE();
2642:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Restore the Content of BDCR register */
2643:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       RCC->BDCR = tmpreg1;
2644:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2645:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
2646:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
2647:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
2648:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* Get tick */
2649:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         tickstart = HAL_GetTick();
2650:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2651:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* Wait till LSE is ready */
2652:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
2653:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         {
2654:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
2655:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           {
2656:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             return HAL_TIMEOUT;
2657:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
2658:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         }
2659:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       }
2660:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
2661:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
2662:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
2663:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
2664:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /*---------------------------- TIM configuration ---------------------------*/
2665:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
2666:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
2667:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
2668:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
2669:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F401xC || STM32F401xE || STM32F411xE */
2670:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   return HAL_OK;
  63              		.loc 1 2670 10 view .LVU11
  64 0016 0020     		movs	r0, #0
  65              	.LVL3:
  66              	.L4:
2671:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** }
ARM GAS  /tmp/cci617lT.s 			page 49


  67              		.loc 1 2671 1 view .LVU12
  68 0018 03B0     		add	sp, sp, #12
  69              	.LCFI2:
  70              		.cfi_remember_state
  71              		.cfi_def_cfa_offset 12
  72              		@ sp needed
  73 001a 30BD     		pop	{r4, r5, pc}
  74              	.LVL4:
  75              	.L21:
  76              	.LCFI3:
  77              		.cfi_restore_state
2564:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
  78              		.loc 1 2564 5 is_stmt 1 view .LVU13
2565:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(STM32F411xE)
  79              		.loc 1 2565 5 view .LVU14
2570:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Get tick */
  80              		.loc 1 2570 5 view .LVU15
  81 001c 494B     		ldr	r3, .L27
  82 001e 0022     		movs	r2, #0
  83 0020 1A60     		str	r2, [r3]
2572:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Wait till PLLI2S is disabled */
  84              		.loc 1 2572 5 view .LVU16
2572:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Wait till PLLI2S is disabled */
  85              		.loc 1 2572 17 is_stmt 0 view .LVU17
  86 0022 FFF7FEFF 		bl	HAL_GetTick
  87              	.LVL5:
2572:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Wait till PLLI2S is disabled */
  88              		.loc 1 2572 17 view .LVU18
  89 0026 0546     		mov	r5, r0
  90              	.LVL6:
2574:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
  91              		.loc 1 2574 5 is_stmt 1 view .LVU19
  92              	.L3:
2574:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
  93              		.loc 1 2574 11 view .LVU20
2574:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
  94              		.loc 1 2574 12 is_stmt 0 view .LVU21
  95 0028 474B     		ldr	r3, .L27+4
  96 002a 1B68     		ldr	r3, [r3]
2574:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
  97              		.loc 1 2574 11 view .LVU22
  98 002c 13F0006F 		tst	r3, #134217728
  99 0030 06D0     		beq	.L23
2576:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
 100              		.loc 1 2576 7 is_stmt 1 view .LVU23
2576:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
 101              		.loc 1 2576 12 is_stmt 0 view .LVU24
 102 0032 FFF7FEFF 		bl	HAL_GetTick
 103              	.LVL7:
2576:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
 104              		.loc 1 2576 26 view .LVU25
 105 0036 431B     		subs	r3, r0, r5
2576:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
 106              		.loc 1 2576 10 view .LVU26
 107 0038 022B     		cmp	r3, #2
 108 003a F5D9     		bls	.L3
2579:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       }
ARM GAS  /tmp/cci617lT.s 			page 50


 109              		.loc 1 2579 16 view .LVU27
 110 003c 0320     		movs	r0, #3
 111 003e EBE7     		b	.L4
 112              	.L23:
2593:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F411xE */
 113              		.loc 1 2593 5 is_stmt 1 view .LVU28
 114 0040 6268     		ldr	r2, [r4, #4]
 115 0042 A368     		ldr	r3, [r4, #8]
 116 0044 1B07     		lsls	r3, r3, #28
 117 0046 43EA8213 		orr	r3, r3, r2, lsl #6
 118 004a 3F4A     		ldr	r2, .L27+4
 119 004c C2F88430 		str	r3, [r2, #132]
2597:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Get tick */
 120              		.loc 1 2597 5 view .LVU29
 121 0050 3C4B     		ldr	r3, .L27
 122 0052 0122     		movs	r2, #1
 123 0054 1A60     		str	r2, [r3]
2599:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Wait till PLLI2S is ready */
 124              		.loc 1 2599 5 view .LVU30
2599:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     /* Wait till PLLI2S is ready */
 125              		.loc 1 2599 17 is_stmt 0 view .LVU31
 126 0056 FFF7FEFF 		bl	HAL_GetTick
 127              	.LVL8:
 128 005a 0546     		mov	r5, r0
 129              	.LVL9:
2601:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 130              		.loc 1 2601 5 is_stmt 1 view .LVU32
 131              	.L6:
2601:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 132              		.loc 1 2601 11 view .LVU33
2601:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 133              		.loc 1 2601 12 is_stmt 0 view .LVU34
 134 005c 3A4B     		ldr	r3, .L27+4
 135 005e 1B68     		ldr	r3, [r3]
2601:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 136              		.loc 1 2601 11 view .LVU35
 137 0060 13F0006F 		tst	r3, #134217728
 138 0064 D3D1     		bne	.L2
2603:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
 139              		.loc 1 2603 7 is_stmt 1 view .LVU36
2603:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
 140              		.loc 1 2603 12 is_stmt 0 view .LVU37
 141 0066 FFF7FEFF 		bl	HAL_GetTick
 142              	.LVL10:
2603:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
 143              		.loc 1 2603 26 view .LVU38
 144 006a 431B     		subs	r3, r0, r5
2603:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
 145              		.loc 1 2603 10 view .LVU39
 146 006c 022B     		cmp	r3, #2
 147 006e F5D9     		bls	.L6
2606:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       }
 148              		.loc 1 2606 16 view .LVU40
 149 0070 0320     		movs	r0, #3
 150 0072 D1E7     		b	.L4
 151              	.LVL11:
 152              	.L22:
ARM GAS  /tmp/cci617lT.s 			page 51


2615:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 153              		.loc 1 2615 5 is_stmt 1 view .LVU41
2618:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 154              		.loc 1 2618 5 view .LVU42
 155              	.LBB2:
2618:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 156              		.loc 1 2618 5 view .LVU43
 157 0074 0023     		movs	r3, #0
 158 0076 0193     		str	r3, [sp, #4]
2618:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 159              		.loc 1 2618 5 view .LVU44
 160 0078 334B     		ldr	r3, .L27+4
 161 007a 1A6C     		ldr	r2, [r3, #64]
 162 007c 42F08052 		orr	r2, r2, #268435456
 163 0080 1A64     		str	r2, [r3, #64]
2618:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 164              		.loc 1 2618 5 view .LVU45
 165 0082 1B6C     		ldr	r3, [r3, #64]
 166 0084 03F08053 		and	r3, r3, #268435456
 167 0088 0193     		str	r3, [sp, #4]
2618:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 168              		.loc 1 2618 5 view .LVU46
 169 008a 019B     		ldr	r3, [sp, #4]
 170              	.LBE2:
2618:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 171              		.loc 1 2618 5 view .LVU47
2621:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 172              		.loc 1 2621 5 view .LVU48
2621:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 173              		.loc 1 2621 13 is_stmt 0 view .LVU49
 174 008c 2F4A     		ldr	r2, .L27+8
 175 008e 1368     		ldr	r3, [r2]
 176 0090 43F48073 		orr	r3, r3, #256
 177 0094 1360     		str	r3, [r2]
2624:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 178              		.loc 1 2624 5 is_stmt 1 view .LVU50
2624:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 179              		.loc 1 2624 17 is_stmt 0 view .LVU51
 180 0096 FFF7FEFF 		bl	HAL_GetTick
 181              	.LVL12:
 182 009a 0546     		mov	r5, r0
 183              	.LVL13:
2626:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 184              		.loc 1 2626 5 is_stmt 1 view .LVU52
 185              	.L8:
2626:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 186              		.loc 1 2626 11 view .LVU53
2626:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 187              		.loc 1 2626 16 is_stmt 0 view .LVU54
 188 009c 2B4B     		ldr	r3, .L27+8
 189 009e 1B68     		ldr	r3, [r3]
2626:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 190              		.loc 1 2626 11 view .LVU55
 191 00a0 13F4807F 		tst	r3, #256
 192 00a4 06D1     		bne	.L24
2628:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
 193              		.loc 1 2628 7 is_stmt 1 view .LVU56
ARM GAS  /tmp/cci617lT.s 			page 52


2628:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
 194              		.loc 1 2628 12 is_stmt 0 view .LVU57
 195 00a6 FFF7FEFF 		bl	HAL_GetTick
 196              	.LVL14:
2628:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
 197              		.loc 1 2628 26 view .LVU58
 198 00aa 431B     		subs	r3, r0, r5
2628:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
 199              		.loc 1 2628 10 view .LVU59
 200 00ac 022B     		cmp	r3, #2
 201 00ae F5D9     		bls	.L8
2630:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       }
 202              		.loc 1 2630 16 view .LVU60
 203 00b0 0320     		movs	r0, #3
 204 00b2 B1E7     		b	.L4
 205              	.L24:
2634:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCS
 206              		.loc 1 2634 5 is_stmt 1 view .LVU61
2634:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCS
 207              		.loc 1 2634 19 is_stmt 0 view .LVU62
 208 00b4 244B     		ldr	r3, .L27+4
 209 00b6 1B6F     		ldr	r3, [r3, #112]
 210              	.LVL15:
2635:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 211              		.loc 1 2635 5 is_stmt 1 view .LVU63
2635:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 212              		.loc 1 2635 8 is_stmt 0 view .LVU64
 213 00b8 13F44073 		ands	r3, r3, #768
 214              	.LVL16:
2635:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 215              		.loc 1 2635 8 view .LVU65
 216 00bc 12D0     		beq	.L10
2635:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 217              		.loc 1 2635 65 discriminator 1 view .LVU66
 218 00be E268     		ldr	r2, [r4, #12]
2635:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 219              		.loc 1 2635 85 discriminator 1 view .LVU67
 220 00c0 02F44072 		and	r2, r2, #768
2635:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 221              		.loc 1 2635 34 discriminator 1 view .LVU68
 222 00c4 9A42     		cmp	r2, r3
 223 00c6 0DD0     		beq	.L10
2638:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* RTC Clock selection can be changed only if the Backup Domain is reset */
 224              		.loc 1 2638 7 is_stmt 1 view .LVU69
2638:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* RTC Clock selection can be changed only if the Backup Domain is reset */
 225              		.loc 1 2638 21 is_stmt 0 view .LVU70
 226 00c8 1F4B     		ldr	r3, .L27+4
 227              	.LVL17:
2638:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* RTC Clock selection can be changed only if the Backup Domain is reset */
 228              		.loc 1 2638 21 view .LVU71
 229 00ca 1A6F     		ldr	r2, [r3, #112]
2638:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* RTC Clock selection can be changed only if the Backup Domain is reset */
 230              		.loc 1 2638 15 view .LVU72
 231 00cc 22F44072 		bic	r2, r2, #768
 232              	.LVL18:
2640:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       __HAL_RCC_BACKUPRESET_RELEASE();
 233              		.loc 1 2640 7 is_stmt 1 view .LVU73
ARM GAS  /tmp/cci617lT.s 			page 53


 234 00d0 1F49     		ldr	r1, .L27+12
 235 00d2 0120     		movs	r0, #1
 236 00d4 0860     		str	r0, [r1]
2641:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Restore the Content of BDCR register */
 237              		.loc 1 2641 7 view .LVU74
 238 00d6 0020     		movs	r0, #0
 239 00d8 0860     		str	r0, [r1]
2643:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 240              		.loc 1 2643 7 view .LVU75
2643:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 241              		.loc 1 2643 17 is_stmt 0 view .LVU76
 242 00da 1A67     		str	r2, [r3, #112]
2646:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
 243              		.loc 1 2646 7 is_stmt 1 view .LVU77
2646:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
 244              		.loc 1 2646 11 is_stmt 0 view .LVU78
 245 00dc 1B6F     		ldr	r3, [r3, #112]
2646:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
 246              		.loc 1 2646 10 view .LVU79
 247 00de 13F0010F 		tst	r3, #1
 248 00e2 13D1     		bne	.L25
 249              	.LVL19:
 250              	.L10:
2661:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
 251              		.loc 1 2661 5 is_stmt 1 view .LVU80
2661:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
 252              		.loc 1 2661 5 view .LVU81
 253 00e4 E368     		ldr	r3, [r4, #12]
 254 00e6 03F44072 		and	r2, r3, #768
 255 00ea B2F5407F 		cmp	r2, #768
 256 00ee 1ED0     		beq	.L26
2661:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
 257              		.loc 1 2661 5 is_stmt 0 discriminator 2 view .LVU82
 258 00f0 154A     		ldr	r2, .L27+4
 259 00f2 9368     		ldr	r3, [r2, #8]
 260 00f4 23F4F813 		bic	r3, r3, #2031616
 261 00f8 9360     		str	r3, [r2, #8]
 262              	.L14:
2661:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
 263              		.loc 1 2661 5 is_stmt 1 discriminator 4 view .LVU83
 264 00fa 1349     		ldr	r1, .L27+4
 265 00fc 0B6F     		ldr	r3, [r1, #112]
 266 00fe E268     		ldr	r2, [r4, #12]
 267 0100 C2F30B02 		ubfx	r2, r2, #0, #12
 268 0104 1343     		orrs	r3, r3, r2
 269 0106 0B67     		str	r3, [r1, #112]
2670:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** }
 270              		.loc 1 2670 10 is_stmt 0 discriminator 4 view .LVU84
 271 0108 0020     		movs	r0, #0
 272 010a 85E7     		b	.L4
 273              	.LVL20:
 274              	.L25:
2649:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 275              		.loc 1 2649 9 is_stmt 1 view .LVU85
2649:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 276              		.loc 1 2649 21 is_stmt 0 view .LVU86
 277 010c FFF7FEFF 		bl	HAL_GetTick
ARM GAS  /tmp/cci617lT.s 			page 54


 278              	.LVL21:
2649:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 279              		.loc 1 2649 21 view .LVU87
 280 0110 0546     		mov	r5, r0
 281              	.LVL22:
2652:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         {
 282              		.loc 1 2652 9 is_stmt 1 view .LVU88
 283              	.L11:
2652:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         {
 284              		.loc 1 2652 15 view .LVU89
2652:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         {
 285              		.loc 1 2652 16 is_stmt 0 view .LVU90
 286 0112 0D4B     		ldr	r3, .L27+4
 287 0114 1B6F     		ldr	r3, [r3, #112]
2652:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         {
 288              		.loc 1 2652 15 view .LVU91
 289 0116 13F0020F 		tst	r3, #2
 290 011a E3D1     		bne	.L10
2654:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           {
 291              		.loc 1 2654 11 is_stmt 1 view .LVU92
2654:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           {
 292              		.loc 1 2654 16 is_stmt 0 view .LVU93
 293 011c FFF7FEFF 		bl	HAL_GetTick
 294              	.LVL23:
2654:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           {
 295              		.loc 1 2654 30 view .LVU94
 296 0120 401B     		subs	r0, r0, r5
2654:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           {
 297              		.loc 1 2654 14 view .LVU95
 298 0122 41F28833 		movw	r3, #5000
 299 0126 9842     		cmp	r0, r3
 300 0128 F3D9     		bls	.L11
2656:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
 301              		.loc 1 2656 20 view .LVU96
 302 012a 0320     		movs	r0, #3
 303 012c 74E7     		b	.L4
 304              	.L26:
2661:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
 305              		.loc 1 2661 5 discriminator 1 view .LVU97
 306 012e 0649     		ldr	r1, .L27+4
 307 0130 8A68     		ldr	r2, [r1, #8]
 308 0132 22F4F812 		bic	r2, r2, #2031616
 309 0136 23F07043 		bic	r3, r3, #-268435456
 310 013a 23F44073 		bic	r3, r3, #768
 311 013e 1343     		orrs	r3, r3, r2
 312 0140 8B60     		str	r3, [r1, #8]
 313 0142 DAE7     		b	.L14
 314              	.L28:
 315              		.align	2
 316              	.L27:
 317 0144 68004742 		.word	1111949416
 318 0148 00380240 		.word	1073887232
 319 014c 00700040 		.word	1073770496
 320 0150 400E4742 		.word	1111952960
 321              		.cfi_endproc
 322              	.LFE239:
 324              		.section	.text.HAL_RCCEx_GetPeriphCLKConfig,"ax",%progbits
ARM GAS  /tmp/cci617lT.s 			page 55


 325              		.align	1
 326              		.global	HAL_RCCEx_GetPeriphCLKConfig
 327              		.syntax unified
 328              		.thumb
 329              		.thumb_func
 330              		.fpu fpv4-sp-d16
 332              	HAL_RCCEx_GetPeriphCLKConfig:
 333              	.LVL24:
 334              	.LFB240:
2672:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2673:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** /**
2674:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @brief  Configures the RCC_OscInitStruct according to the internal
2675:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * RCC configuration registers.
2676:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
2677:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * will be configured.
2678:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @retval None
2679:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   */
2680:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
2681:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** {
 335              		.loc 1 2681 1 is_stmt 1 view -0
 336              		.cfi_startproc
 337              		@ args = 0, pretend = 0, frame = 0
 338              		@ frame_needed = 0, uses_anonymous_args = 0
 339              		@ link register save eliminated.
2682:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t tempreg;
 340              		.loc 1 2682 3 view .LVU99
2683:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2684:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Set all possible values for the extended clock type parameter------------*/
2685:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 341              		.loc 1 2685 3 view .LVU100
 342              		.loc 1 2685 39 is_stmt 0 view .LVU101
 343 0000 0323     		movs	r3, #3
 344 0002 0360     		str	r3, [r0]
2686:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2687:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the PLLI2S Clock configuration --------------------------------------*/
2688:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI
 345              		.loc 1 2688 3 is_stmt 1 view .LVU102
 346              		.loc 1 2688 50 is_stmt 0 view .LVU103
 347 0004 094A     		ldr	r2, .L30
 348 0006 D2F88430 		ldr	r3, [r2, #132]
 349              		.loc 1 2688 35 view .LVU104
 350 000a C3F38813 		ubfx	r3, r3, #6, #9
 351              		.loc 1 2688 33 view .LVU105
 352 000e 4360     		str	r3, [r0, #4]
2689:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI
 353              		.loc 1 2689 3 is_stmt 1 view .LVU106
 354              		.loc 1 2689 50 is_stmt 0 view .LVU107
 355 0010 D2F88430 		ldr	r3, [r2, #132]
 356              		.loc 1 2689 35 view .LVU108
 357 0014 C3F30273 		ubfx	r3, r3, #28, #3
 358              		.loc 1 2689 33 view .LVU109
 359 0018 8360     		str	r3, [r0, #8]
2690:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(STM32F411xE)
2691:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
2692:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F411xE */
2693:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the RTC Clock configuration -----------------------------------------*/
2694:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
ARM GAS  /tmp/cci617lT.s 			page 56


 360              		.loc 1 2694 3 is_stmt 1 view .LVU110
 361              		.loc 1 2694 17 is_stmt 0 view .LVU111
 362 001a 9168     		ldr	r1, [r2, #8]
 363              		.loc 1 2694 11 view .LVU112
 364 001c 01F4F811 		and	r1, r1, #2031616
 365              	.LVL25:
2695:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 366              		.loc 1 2695 3 is_stmt 1 view .LVU113
 367              		.loc 1 2695 65 is_stmt 0 view .LVU114
 368 0020 136F     		ldr	r3, [r2, #112]
 369              		.loc 1 2695 72 view .LVU115
 370 0022 03F44073 		and	r3, r3, #768
 371              		.loc 1 2695 38 view .LVU116
 372 0026 0B43     		orrs	r3, r3, r1
 373              		.loc 1 2695 36 view .LVU117
 374 0028 C360     		str	r3, [r0, #12]
2696:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2697:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
2698:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get the TIM Prescaler configuration -------------------------------------*/
2699:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
2700:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
2701:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
2702:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
2703:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   else
2704:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
2705:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
2706:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
2707:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F401xC || STM32F401xE || STM32F411xE */
2708:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** }
 375              		.loc 1 2708 1 view .LVU118
 376 002a 7047     		bx	lr
 377              	.L31:
 378              		.align	2
 379              	.L30:
 380 002c 00380240 		.word	1073887232
 381              		.cfi_endproc
 382              	.LFE240:
 384              		.section	.text.HAL_RCCEx_GetPeriphCLKFreq,"ax",%progbits
 385              		.align	1
 386              		.global	HAL_RCCEx_GetPeriphCLKFreq
 387              		.syntax unified
 388              		.thumb
 389              		.thumb_func
 390              		.fpu fpv4-sp-d16
 392              	HAL_RCCEx_GetPeriphCLKFreq:
 393              	.LVL26:
 394              	.LFB241:
2709:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2710:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** /**
2711:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @brief  Return the peripheral clock frequency for a given peripheral(SAI..)
2712:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @note   Return 0 if peripheral clock identifier not managed by this API
2713:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @param  PeriphClk Peripheral clock identifier
2714:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *         This parameter can be one of the following values:
2715:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
2716:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @retval Frequency in KHz
2717:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   */
2718:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
ARM GAS  /tmp/cci617lT.s 			page 57


2719:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** {
 395              		.loc 1 2719 1 is_stmt 1 view -0
 396              		.cfi_startproc
 397              		@ args = 0, pretend = 0, frame = 0
 398              		@ frame_needed = 0, uses_anonymous_args = 0
 399              		@ link register save eliminated.
2720:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* This variable used to store the I2S clock frequency (value in Hz) */
2721:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t frequency = 0U;
 400              		.loc 1 2721 3 view .LVU120
2722:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* This variable used to store the VCO Input (value in Hz) */
2723:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t vcoinput = 0U;
 401              		.loc 1 2723 3 view .LVU121
2724:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t srcclk = 0U;
 402              		.loc 1 2724 3 view .LVU122
2725:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* This variable used to store the VCO Output (value in Hz) */
2726:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t vcooutput = 0U;
 403              		.loc 1 2726 3 view .LVU123
2727:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   switch (PeriphClk)
 404              		.loc 1 2727 3 view .LVU124
 405 0000 0128     		cmp	r0, #1
 406 0002 01D0     		beq	.L39
2721:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* This variable used to store the VCO Input (value in Hz) */
 407              		.loc 1 2721 12 is_stmt 0 view .LVU125
 408 0004 0020     		movs	r0, #0
 409              	.LVL27:
2721:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* This variable used to store the VCO Input (value in Hz) */
 410              		.loc 1 2721 12 view .LVU126
 411 0006 7047     		bx	lr
 412              	.LVL28:
 413              	.L39:
2728:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
2729:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     case RCC_PERIPHCLK_I2S:
2730:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
2731:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* Get the current I2S source */
2732:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       srcclk = __HAL_RCC_GET_I2S_SOURCE();
 414              		.loc 1 2732 7 is_stmt 1 view .LVU127
 415              		.loc 1 2732 16 is_stmt 0 view .LVU128
 416 0008 154B     		ldr	r3, .L40
 417 000a 9B68     		ldr	r3, [r3, #8]
 418              	.LVL29:
2733:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       switch (srcclk)
 419              		.loc 1 2733 7 is_stmt 1 view .LVU129
 420 000c 13F40003 		ands	r3, r3, #8388608
 421              	.LVL30:
 422              		.loc 1 2733 7 is_stmt 0 view .LVU130
 423 0010 02D0     		beq	.L34
 424 0012 1BB3     		cbz	r3, .L38
 425 0014 1348     		ldr	r0, .L40+4
 426              	.LVL31:
 427              		.loc 1 2733 7 view .LVU131
 428 0016 7047     		bx	lr
 429              	.LVL32:
 430              	.L34:
2734:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
2735:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S cl
2736:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         case RCC_I2SCLKSOURCE_EXT:
2737:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         {
ARM GAS  /tmp/cci617lT.s 			page 58


2738:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* Set the I2S clock to the external clock  value */
2739:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = EXTERNAL_CLOCK_VALUE;
2740:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           break;
2741:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         }
2742:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S c
2743:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         case RCC_I2SCLKSOURCE_PLLI2S:
2744:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         {
2745:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(STM32F411xE)
2746:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* Configure the PLLI2S division factor */
2747:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
2748:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
2749:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           {
2750:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             /* Get the I2S source clock value */
2751:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM))
2752:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
2753:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           else
2754:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           {
2755:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             /* Get the I2S source clock value */
2756:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM))
2757:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
2758:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #else
2759:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* Configure the PLLI2S division factor */
2760:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
2761:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 431              		.loc 1 2761 11 is_stmt 1 view .LVU132
 432              		.loc 1 2761 19 is_stmt 0 view .LVU133
 433 0018 114B     		ldr	r3, .L40
 434              	.LVL33:
 435              		.loc 1 2761 19 view .LVU134
 436 001a 5B68     		ldr	r3, [r3, #4]
 437              		.loc 1 2761 14 view .LVU135
 438 001c 13F4800F 		tst	r3, #4194304
 439 0020 14D0     		beq	.L35
2762:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           {
2763:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             /* Get the I2S source clock value */
2764:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 440              		.loc 1 2764 13 is_stmt 1 view .LVU136
 441              		.loc 1 2764 61 is_stmt 0 view .LVU137
 442 0022 0F4B     		ldr	r3, .L40
 443 0024 5B68     		ldr	r3, [r3, #4]
 444              		.loc 1 2764 47 view .LVU138
 445 0026 03F03F03 		and	r3, r3, #63
 446              		.loc 1 2764 22 view .LVU139
 447 002a 0F48     		ldr	r0, .L40+8
 448              	.LVL34:
 449              		.loc 1 2764 22 view .LVU140
 450 002c B0FBF3F0 		udiv	r0, r0, r3
 451              	.LVL35:
 452              	.L36:
2765:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
2766:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           else
2767:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           {
2768:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             /* Get the I2S source clock value */
2769:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****             vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
2770:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
2771:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F411xE */
2772:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
ARM GAS  /tmp/cci617lT.s 			page 59


2773:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (
 453              		.loc 1 2773 11 is_stmt 1 view .LVU141
 454              		.loc 1 2773 51 is_stmt 0 view .LVU142
 455 0030 0B4A     		ldr	r2, .L40
 456 0032 D2F88430 		ldr	r3, [r2, #132]
 457              		.loc 1 2773 97 view .LVU143
 458 0036 C3F38813 		ubfx	r3, r3, #6, #9
 459              		.loc 1 2773 21 view .LVU144
 460 003a 00FB03F0 		mul	r0, r0, r3
 461              	.LVL36:
2774:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
2775:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) &
 462              		.loc 1 2775 11 is_stmt 1 view .LVU145
 463              		.loc 1 2775 52 is_stmt 0 view .LVU146
 464 003e D2F88430 		ldr	r3, [r2, #132]
 465              		.loc 1 2775 99 view .LVU147
 466 0042 C3F30273 		ubfx	r3, r3, #28, #3
 467              		.loc 1 2775 21 view .LVU148
 468 0046 B0FBF3F0 		udiv	r0, r0, r3
 469              	.LVL37:
2776:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           break;
 470              		.loc 1 2776 11 is_stmt 1 view .LVU149
 471 004a 7047     		bx	lr
 472              	.LVL38:
 473              	.L35:
2769:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
 474              		.loc 1 2769 13 view .LVU150
2769:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
 475              		.loc 1 2769 61 is_stmt 0 view .LVU151
 476 004c 044B     		ldr	r3, .L40
 477 004e 5B68     		ldr	r3, [r3, #4]
2769:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
 478              		.loc 1 2769 47 view .LVU152
 479 0050 03F03F03 		and	r3, r3, #63
2769:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
 480              		.loc 1 2769 22 view .LVU153
 481 0054 0548     		ldr	r0, .L40+12
 482              	.LVL39:
2769:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
 483              		.loc 1 2769 22 view .LVU154
 484 0056 B0FBF3F0 		udiv	r0, r0, r3
 485              	.LVL40:
2769:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           }
 486              		.loc 1 2769 22 view .LVU155
 487 005a E9E7     		b	.L36
 488              	.LVL41:
 489              	.L38:
2777:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         }
2778:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* Clock not enabled for I2S*/
2779:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         default:
2780:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         {
2781:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           frequency = 0U;
 490              		.loc 1 2781 21 view .LVU156
 491 005c 0020     		movs	r0, #0
 492              	.LVL42:
2782:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           break;
2783:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         }
ARM GAS  /tmp/cci617lT.s 			page 60


2784:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       }
2785:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       break;
2786:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
2787:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     default:
2788:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
2789:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       break;
2790:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
2791:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
2792:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   return frequency;
 493              		.loc 1 2792 3 is_stmt 1 view .LVU157
2793:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** }
 494              		.loc 1 2793 1 is_stmt 0 view .LVU158
 495 005e 7047     		bx	lr
 496              	.L41:
 497              		.align	2
 498              	.L40:
 499 0060 00380240 		.word	1073887232
 500 0064 0080BB00 		.word	12288000
 501 0068 40787D01 		.word	25000000
 502 006c 0024F400 		.word	16000000
 503              		.cfi_endproc
 504              	.LFE241:
 506              		.section	.text.HAL_RCCEx_EnablePLLI2S,"ax",%progbits
 507              		.align	1
 508              		.global	HAL_RCCEx_EnablePLLI2S
 509              		.syntax unified
 510              		.thumb
 511              		.thumb_func
 512              		.fpu fpv4-sp-d16
 514              	HAL_RCCEx_EnablePLLI2S:
 515              	.LVL43:
 516              	.LFB242:
2794:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx || STM32F401xC || STM32F401xE  |
2795:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2796:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx) || defined(STM32F411xE) ||
2797:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
2798:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** /**
2799:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @brief  Select LSE mode
2800:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *
2801:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @note   This mode is only available for STM32F410xx/STM32F411xx/STM32F446xx/STM32F469xx/STM32F4
2802:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *
2803:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @param  Mode specifies the LSE mode.
2804:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *          This parameter can be one of the following values:
2805:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *            @arg RCC_LSE_LOWPOWER_MODE:  LSE oscillator in low power mode selection
2806:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *            @arg RCC_LSE_HIGHDRIVE_MODE: LSE oscillator in High Drive mode selection
2807:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @retval None
2808:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   */
2809:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** void HAL_RCCEx_SelectLSEMode(uint8_t Mode)
2810:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** {
2811:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Check the parameters */
2812:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   assert_param(IS_RCC_LSE_MODE(Mode));
2813:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   if (Mode == RCC_LSE_HIGHDRIVE_MODE)
2814:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
2815:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     SET_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
2816:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
2817:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   else
2818:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
ARM GAS  /tmp/cci617lT.s 			page 61


2819:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
2820:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
2821:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** }
2822:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2823:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F410xx || STM32F411xE || STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx ||
2824:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2825:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** /** @defgroup RCCEx_Exported_Functions_Group2 Extended Clock management functions
2826:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *  @brief  Extended Clock management functions
2827:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *
2828:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** @verbatim
2829:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****  ===============================================================================
2830:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****                 ##### Extended clock management functions  #####
2831:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****  ===============================================================================
2832:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     [..]
2833:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     This subsection provides a set of functions allowing to control the
2834:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     activation or deactivation of PLLI2S, PLLSAI.
2835:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** @endverbatim
2836:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @{
2837:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   */
2838:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2839:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(RCC_PLLI2S_SUPPORT)
2840:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** /**
2841:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @brief  Enable PLLI2S.
2842:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @param  PLLI2SInit  pointer to an RCC_PLLI2SInitTypeDef structure that
2843:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *         contains the configuration information for the PLLI2S
2844:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @retval HAL status
2845:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   */
2846:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** HAL_StatusTypeDef HAL_RCCEx_EnablePLLI2S(RCC_PLLI2SInitTypeDef  *PLLI2SInit)
2847:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** {
 517              		.loc 1 2847 1 is_stmt 1 view -0
 518              		.cfi_startproc
 519              		@ args = 0, pretend = 0, frame = 0
 520              		@ frame_needed = 0, uses_anonymous_args = 0
 521              		.loc 1 2847 1 is_stmt 0 view .LVU160
 522 0000 38B5     		push	{r3, r4, r5, lr}
 523              	.LCFI4:
 524              		.cfi_def_cfa_offset 16
 525              		.cfi_offset 3, -16
 526              		.cfi_offset 4, -12
 527              		.cfi_offset 5, -8
 528              		.cfi_offset 14, -4
 529 0002 0546     		mov	r5, r0
2848:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t tickstart;
 530              		.loc 1 2848 3 is_stmt 1 view .LVU161
2849:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2850:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Check for parameters */
2851:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SInit->PLLI2SN));
 531              		.loc 1 2851 3 view .LVU162
2852:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SInit->PLLI2SR));
 532              		.loc 1 2852 3 view .LVU163
2853:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(RCC_PLLI2SCFGR_PLLI2SM)
2854:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   assert_param(IS_RCC_PLLI2SM_VALUE(PLLI2SInit->PLLI2SM));
2855:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* RCC_PLLI2SCFGR_PLLI2SM */
2856:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(RCC_PLLI2SCFGR_PLLI2SP)
2857:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   assert_param(IS_RCC_PLLI2SP_VALUE(PLLI2SInit->PLLI2SP));
2858:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* RCC_PLLI2SCFGR_PLLI2SP */
2859:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(RCC_PLLI2SCFGR_PLLI2SQ)
ARM GAS  /tmp/cci617lT.s 			page 62


2860:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SInit->PLLI2SQ));
2861:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* RCC_PLLI2SCFGR_PLLI2SQ */
2862:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2863:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Disable the PLLI2S */
2864:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   __HAL_RCC_PLLI2S_DISABLE();
 533              		.loc 1 2864 3 view .LVU164
 534 0004 164B     		ldr	r3, .L53
 535 0006 0022     		movs	r2, #0
 536 0008 1A60     		str	r2, [r3]
2865:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2866:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Wait till PLLI2S is disabled */
2867:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   tickstart = HAL_GetTick();
 537              		.loc 1 2867 3 view .LVU165
 538              		.loc 1 2867 15 is_stmt 0 view .LVU166
 539 000a FFF7FEFF 		bl	HAL_GetTick
 540              	.LVL44:
 541              		.loc 1 2867 15 view .LVU167
 542 000e 0446     		mov	r4, r0
 543              	.LVL45:
2868:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET)
 544              		.loc 1 2868 3 is_stmt 1 view .LVU168
 545              	.L43:
 546              		.loc 1 2868 9 view .LVU169
 547              		.loc 1 2868 10 is_stmt 0 view .LVU170
 548 0010 144B     		ldr	r3, .L53+4
 549 0012 1B68     		ldr	r3, [r3]
 550              		.loc 1 2868 9 view .LVU171
 551 0014 13F0006F 		tst	r3, #134217728
 552 0018 06D0     		beq	.L51
2869:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
2870:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 553              		.loc 1 2870 5 is_stmt 1 view .LVU172
 554              		.loc 1 2870 10 is_stmt 0 view .LVU173
 555 001a FFF7FEFF 		bl	HAL_GetTick
 556              	.LVL46:
 557              		.loc 1 2870 24 view .LVU174
 558 001e 001B     		subs	r0, r0, r4
 559              		.loc 1 2870 8 view .LVU175
 560 0020 0228     		cmp	r0, #2
 561 0022 F5D9     		bls	.L43
2871:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
2872:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* return in case of Timeout detected */
2873:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       return HAL_TIMEOUT;
 562              		.loc 1 2873 14 view .LVU176
 563 0024 0320     		movs	r0, #3
 564              	.L44:
2874:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
2875:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
2876:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2877:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Configure the PLLI2S division factors */
2878:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(STM32F446xx)
2879:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
2880:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* I2SPCLK = PLLI2S_VCO / PLLI2SP */
2881:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* I2SQCLK = PLLI2S_VCO / PLLI2SQ */
2882:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
2883:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   __HAL_RCC_PLLI2S_CONFIG(PLLI2SInit->PLLI2SM, PLLI2SInit->PLLI2SN, \
2884:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****                           PLLI2SInit->PLLI2SP, PLLI2SInit->PLLI2SQ, PLLI2SInit->PLLI2SR);
ARM GAS  /tmp/cci617lT.s 			page 63


2885:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #elif defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) 
2886:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       defined(STM32F413xx) || defined(STM32F423xx)
2887:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
2888:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* I2SQCLK = PLLI2S_VCO / PLLI2SQ */
2889:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
2890:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   __HAL_RCC_PLLI2S_CONFIG(PLLI2SInit->PLLI2SM, PLLI2SInit->PLLI2SN, \
2891:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****                           PLLI2SInit->PLLI2SQ, PLLI2SInit->PLLI2SR);
2892:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) 
2893:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       defined(STM32F469xx) || defined(STM32F479xx)
2894:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * PLLI2SN */
2895:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* I2SQCLK = PLLI2S_VCO / PLLI2SQ */
2896:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
2897:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   __HAL_RCC_PLLI2S_SAICLK_CONFIG(PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SQ, PLLI2SInit->PLLI2SR);
2898:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #elif defined(STM32F411xE)
2899:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
2900:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
2901:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PLLI2SInit->PLLI2SM, PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SR);
2902:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #else
2903:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x PLLI2SN */
2904:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
2905:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   __HAL_RCC_PLLI2S_CONFIG(PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SR);
2906:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F446xx */
2907:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2908:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Enable the PLLI2S */
2909:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   __HAL_RCC_PLLI2S_ENABLE();
2910:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2911:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Wait till PLLI2S is ready */
2912:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   tickstart = HAL_GetTick();
2913:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
2914:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
2915:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
2916:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
2917:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* return in case of Timeout detected */
2918:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       return HAL_TIMEOUT;
2919:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
2920:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
2921:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2922:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   return HAL_OK;
2923:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** }
 565              		.loc 1 2923 1 view .LVU177
 566 0026 38BD     		pop	{r3, r4, r5, pc}
 567              	.LVL47:
 568              	.L51:
2905:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F446xx */
 569              		.loc 1 2905 3 is_stmt 1 view .LVU178
 570 0028 2A68     		ldr	r2, [r5]
 571 002a 6B68     		ldr	r3, [r5, #4]
 572 002c 1B07     		lsls	r3, r3, #28
 573 002e 43EA8213 		orr	r3, r3, r2, lsl #6
 574 0032 0C4A     		ldr	r2, .L53+4
 575 0034 C2F88430 		str	r3, [r2, #132]
2909:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 576              		.loc 1 2909 3 view .LVU179
 577 0038 094B     		ldr	r3, .L53
 578 003a 0122     		movs	r2, #1
 579 003c 1A60     		str	r2, [r3]
2912:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
ARM GAS  /tmp/cci617lT.s 			page 64


 580              		.loc 1 2912 3 view .LVU180
2912:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
 581              		.loc 1 2912 15 is_stmt 0 view .LVU181
 582 003e FFF7FEFF 		bl	HAL_GetTick
 583              	.LVL48:
 584 0042 0446     		mov	r4, r0
 585              	.LVL49:
2913:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
 586              		.loc 1 2913 3 is_stmt 1 view .LVU182
 587              	.L46:
2913:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
 588              		.loc 1 2913 9 view .LVU183
2913:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
 589              		.loc 1 2913 10 is_stmt 0 view .LVU184
 590 0044 074B     		ldr	r3, .L53+4
 591 0046 1B68     		ldr	r3, [r3]
2913:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
 592              		.loc 1 2913 9 view .LVU185
 593 0048 13F0006F 		tst	r3, #134217728
 594 004c 06D1     		bne	.L52
2915:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 595              		.loc 1 2915 5 is_stmt 1 view .LVU186
2915:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 596              		.loc 1 2915 10 is_stmt 0 view .LVU187
 597 004e FFF7FEFF 		bl	HAL_GetTick
 598              	.LVL50:
2915:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 599              		.loc 1 2915 24 view .LVU188
 600 0052 001B     		subs	r0, r0, r4
2915:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 601              		.loc 1 2915 8 view .LVU189
 602 0054 0228     		cmp	r0, #2
 603 0056 F5D9     		bls	.L46
2918:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
 604              		.loc 1 2918 14 view .LVU190
 605 0058 0320     		movs	r0, #3
 606 005a E4E7     		b	.L44
 607              	.L52:
2922:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** }
 608              		.loc 1 2922 10 view .LVU191
 609 005c 0020     		movs	r0, #0
 610 005e E2E7     		b	.L44
 611              	.L54:
 612              		.align	2
 613              	.L53:
 614 0060 68004742 		.word	1111949416
 615 0064 00380240 		.word	1073887232
 616              		.cfi_endproc
 617              	.LFE242:
 619              		.section	.text.HAL_RCCEx_DisablePLLI2S,"ax",%progbits
 620              		.align	1
 621              		.global	HAL_RCCEx_DisablePLLI2S
 622              		.syntax unified
 623              		.thumb
 624              		.thumb_func
 625              		.fpu fpv4-sp-d16
 627              	HAL_RCCEx_DisablePLLI2S:
ARM GAS  /tmp/cci617lT.s 			page 65


 628              	.LFB243:
2924:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2925:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** /**
2926:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @brief  Disable PLLI2S.
2927:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @retval HAL status
2928:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   */
2929:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** HAL_StatusTypeDef HAL_RCCEx_DisablePLLI2S(void)
2930:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** {
 629              		.loc 1 2930 1 is_stmt 1 view -0
 630              		.cfi_startproc
 631              		@ args = 0, pretend = 0, frame = 0
 632              		@ frame_needed = 0, uses_anonymous_args = 0
 633 0000 10B5     		push	{r4, lr}
 634              	.LCFI5:
 635              		.cfi_def_cfa_offset 8
 636              		.cfi_offset 4, -8
 637              		.cfi_offset 14, -4
2931:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t tickstart;
 638              		.loc 1 2931 3 view .LVU193
2932:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2933:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Disable the PLLI2S */
2934:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   __HAL_RCC_PLLI2S_DISABLE();
 639              		.loc 1 2934 3 view .LVU194
 640 0002 0A4B     		ldr	r3, .L62
 641 0004 0022     		movs	r2, #0
 642 0006 1A60     		str	r2, [r3]
2935:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2936:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Wait till PLLI2S is disabled */
2937:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   tickstart = HAL_GetTick();
 643              		.loc 1 2937 3 view .LVU195
 644              		.loc 1 2937 15 is_stmt 0 view .LVU196
 645 0008 FFF7FEFF 		bl	HAL_GetTick
 646              	.LVL51:
 647 000c 0446     		mov	r4, r0
 648              	.LVL52:
2938:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 649              		.loc 1 2938 3 is_stmt 1 view .LVU197
 650              	.L56:
 651              		.loc 1 2938 9 view .LVU198
 652              		.loc 1 2938 10 is_stmt 0 view .LVU199
 653 000e 084B     		ldr	r3, .L62+4
 654 0010 1B68     		ldr	r3, [r3]
 655              		.loc 1 2938 9 view .LVU200
 656 0012 13F0006F 		tst	r3, #134217728
 657 0016 06D0     		beq	.L61
2939:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
2940:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 658              		.loc 1 2940 5 is_stmt 1 view .LVU201
 659              		.loc 1 2940 10 is_stmt 0 view .LVU202
 660 0018 FFF7FEFF 		bl	HAL_GetTick
 661              	.LVL53:
 662              		.loc 1 2940 24 view .LVU203
 663 001c 001B     		subs	r0, r0, r4
 664              		.loc 1 2940 8 view .LVU204
 665 001e 0228     		cmp	r0, #2
 666 0020 F5D9     		bls	.L56
2941:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
ARM GAS  /tmp/cci617lT.s 			page 66


2942:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* return in case of Timeout detected */
2943:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       return HAL_TIMEOUT;
 667              		.loc 1 2943 14 view .LVU205
 668 0022 0320     		movs	r0, #3
 669 0024 00E0     		b	.L57
 670              	.L61:
2944:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
2945:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
2946:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2947:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   return HAL_OK;
 671              		.loc 1 2947 10 view .LVU206
 672 0026 0020     		movs	r0, #0
 673              	.L57:
2948:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** }
 674              		.loc 1 2948 1 view .LVU207
 675 0028 10BD     		pop	{r4, pc}
 676              	.LVL54:
 677              	.L63:
 678              		.loc 1 2948 1 view .LVU208
 679 002a 00BF     		.align	2
 680              	.L62:
 681 002c 68004742 		.word	1111949416
 682 0030 00380240 		.word	1073887232
 683              		.cfi_endproc
 684              	.LFE243:
 686              		.section	.text.HAL_RCC_DeInit,"ax",%progbits
 687              		.align	1
 688              		.global	HAL_RCC_DeInit
 689              		.syntax unified
 690              		.thumb
 691              		.thumb_func
 692              		.fpu fpv4-sp-d16
 694              	HAL_RCC_DeInit:
 695              	.LFB244:
2949:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2950:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* RCC_PLLI2S_SUPPORT */
2951:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2952:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(RCC_PLLSAI_SUPPORT)
2953:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** /**
2954:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @brief  Enable PLLSAI.
2955:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @param  PLLSAIInit  pointer to an RCC_PLLSAIInitTypeDef structure that
2956:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *         contains the configuration information for the PLLSAI
2957:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @retval HAL status
2958:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   */
2959:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** HAL_StatusTypeDef HAL_RCCEx_EnablePLLSAI(RCC_PLLSAIInitTypeDef  *PLLSAIInit)
2960:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** {
2961:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t tickstart;
2962:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2963:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Check for parameters */
2964:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIInit->PLLSAIN));
2965:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIInit->PLLSAIQ));
2966:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(RCC_PLLSAICFGR_PLLSAIM)
2967:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   assert_param(IS_RCC_PLLSAIM_VALUE(PLLSAIInit->PLLSAIM));
2968:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* RCC_PLLSAICFGR_PLLSAIM */
2969:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(RCC_PLLSAICFGR_PLLSAIP)
2970:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   assert_param(IS_RCC_PLLSAIP_VALUE(PLLSAIInit->PLLSAIP));
2971:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* RCC_PLLSAICFGR_PLLSAIP */
ARM GAS  /tmp/cci617lT.s 			page 67


2972:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(RCC_PLLSAICFGR_PLLSAIR)
2973:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIInit->PLLSAIR));
2974:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* RCC_PLLSAICFGR_PLLSAIR */
2975:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2976:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Disable the PLLSAI */
2977:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   __HAL_RCC_PLLSAI_DISABLE();
2978:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2979:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Wait till PLLSAI is disabled */
2980:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   tickstart = HAL_GetTick();
2981:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
2982:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
2983:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
2984:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
2985:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* return in case of Timeout detected */
2986:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       return HAL_TIMEOUT;
2987:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
2988:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
2989:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
2990:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Configure the PLLSAI division factors */
2991:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(STM32F446xx)
2992:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLSAIN/PLLSAIM) */
2993:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* SAIPCLK = PLLSAI_VCO / PLLSAIP */
2994:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* SAIQCLK = PLLSAI_VCO / PLLSAIQ */
2995:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* SAIRCLK = PLLSAI_VCO / PLLSAIR */
2996:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   __HAL_RCC_PLLSAI_CONFIG(PLLSAIInit->PLLSAIM, PLLSAIInit->PLLSAIN, \
2997:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****                           PLLSAIInit->PLLSAIP, PLLSAIInit->PLLSAIQ, 0U);
2998:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #elif defined(STM32F469xx) || defined(STM32F479xx)
2999:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * PLLSAIN */
3000:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* SAIPCLK = PLLSAI_VCO / PLLSAIP */
3001:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* SAIQCLK = PLLSAI_VCO / PLLSAIQ */
3002:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* SAIRCLK = PLLSAI_VCO / PLLSAIR */
3003:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   __HAL_RCC_PLLSAI_CONFIG(PLLSAIInit->PLLSAIN, PLLSAIInit->PLLSAIP, \
3004:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****                           PLLSAIInit->PLLSAIQ, PLLSAIInit->PLLSAIR);
3005:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #else
3006:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x PLLSAIN */
3007:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* SAIQCLK = PLLSAI_VCO / PLLSAIQ */
3008:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* SAIRCLK = PLLSAI_VCO / PLLSAIR */
3009:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   __HAL_RCC_PLLSAI_CONFIG(PLLSAIInit->PLLSAIN, PLLSAIInit->PLLSAIQ, PLLSAIInit->PLLSAIR);
3010:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F446xx */
3011:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
3012:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Enable the PLLSAI */
3013:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   __HAL_RCC_PLLSAI_ENABLE();
3014:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
3015:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Wait till PLLSAI is ready */
3016:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   tickstart = HAL_GetTick();
3017:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
3018:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
3019:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
3020:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
3021:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* return in case of Timeout detected */
3022:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       return HAL_TIMEOUT;
3023:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
3024:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
3025:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
3026:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   return HAL_OK;
3027:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** }
3028:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
ARM GAS  /tmp/cci617lT.s 			page 68


3029:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** /**
3030:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @brief  Disable PLLSAI.
3031:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @retval HAL status
3032:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   */
3033:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** HAL_StatusTypeDef HAL_RCCEx_DisablePLLSAI(void)
3034:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** {
3035:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t tickstart;
3036:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
3037:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Disable the PLLSAI */
3038:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   __HAL_RCC_PLLSAI_DISABLE();
3039:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
3040:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Wait till PLLSAI is disabled */
3041:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   tickstart = HAL_GetTick();
3042:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
3043:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
3044:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
3045:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
3046:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* return in case of Timeout detected */
3047:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       return HAL_TIMEOUT;
3048:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
3049:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
3050:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
3051:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   return HAL_OK;
3052:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** }
3053:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
3054:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* RCC_PLLSAI_SUPPORT */
3055:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
3056:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** /**
3057:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @}
3058:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   */
3059:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
3060:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(STM32F446xx)
3061:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** /**
3062:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @brief  Returns the SYSCLK frequency
3063:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *
3064:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @note   This function implementation is valid only for STM32F446xx devices.
3065:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @note   This function add the PLL/PLLR System clock source
3066:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *
3067:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @note   The system frequency computed by this function is not the real
3068:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *         frequency in the chip. It is calculated based on the predefined
3069:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *         constant and the selected clock source:
3070:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @note     If SYSCLK source is HSI, function returns values based on HSI_VALUE(*)
3071:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @note     If SYSCLK source is HSE, function returns values based on HSE_VALUE(**)
3072:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @note     If SYSCLK source is PLL or PLLR, function returns values based on HSE_VALUE(**)
3073:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *           or HSI_VALUE(*) multiplied/divided by the PLL factors.
3074:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @note     (*) HSI_VALUE is a constant defined in stm32f4xx_hal_conf.h file (default value
3075:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *               16 MHz) but the real value may vary depending on the variations
3076:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *               in voltage and temperature.
3077:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @note     (**) HSE_VALUE is a constant defined in stm32f4xx_hal_conf.h file (default value
3078:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *                25 MHz), user has to ensure that HSE_VALUE is same as the real
3079:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *                frequency of the crystal used. Otherwise, this function may
3080:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *                have wrong result.
3081:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *
3082:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @note   The result of this function could be not correct when using fractional
3083:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *         value for HSE crystal.
3084:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *
3085:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @note   This function can be used by the user application to compute the
ARM GAS  /tmp/cci617lT.s 			page 69


3086:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *         baudrate for the communication peripherals or configure other parameters.
3087:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *
3088:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @note   Each time SYSCLK changes, this function must be called to update the
3089:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *         right SYSCLK value. Otherwise, any configuration based on this function will be incorre
3090:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *
3091:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *
3092:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @retval SYSCLK frequency
3093:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   */
3094:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** uint32_t HAL_RCC_GetSysClockFreq(void)
3095:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** {
3096:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t pllm = 0U;
3097:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t pllvco = 0U;
3098:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t pllp = 0U;
3099:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t pllr = 0U;
3100:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t sysclockfreq = 0U;
3101:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
3102:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get SYSCLK source -------------------------------------------------------*/
3103:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   switch (RCC->CFGR & RCC_CFGR_SWS)
3104:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
3105:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
3106:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
3107:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       sysclockfreq = HSI_VALUE;
3108:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       break;
3109:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
3110:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
3111:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
3112:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       sysclockfreq = HSE_VALUE;
3113:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       break;
3114:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
3115:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
3116:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
3117:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
3118:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       SYSCLK = PLL_VCO / PLLP */
3119:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
3120:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
3121:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
3122:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* HSE used as PLL clock source */
3123:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) 
3124:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       }
3125:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       else
3126:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
3127:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* HSI used as PLL clock source */
3128:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) 
3129:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       }
3130:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
3131:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
3132:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       sysclockfreq = pllvco / pllp;
3133:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       break;
3134:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
3135:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
3136:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
3137:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
3138:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       SYSCLK = PLL_VCO / PLLR */
3139:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
3140:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
3141:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
3142:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* HSE used as PLL clock source */
ARM GAS  /tmp/cci617lT.s 			page 70


3143:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) 
3144:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       }
3145:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       else
3146:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       {
3147:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         /* HSI used as PLL clock source */
3148:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****         pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) 
3149:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       }
3150:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
3151:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
3152:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       sysclockfreq = pllvco / pllr;
3153:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       break;
3154:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
3155:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     default:
3156:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
3157:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       sysclockfreq = HSI_VALUE;
3158:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       break;
3159:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
3160:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
3161:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   return sysclockfreq;
3162:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** }
3163:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F446xx */
3164:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
3165:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** /**
3166:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @}
3167:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   */
3168:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
3169:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** /**
3170:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @}
3171:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   */
3172:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
3173:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** /**
3174:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
3175:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @note   The default reset state of the clock configuration is given below:
3176:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *            - HSI ON and used as system clock source
3177:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *            - HSE, PLL, PLLI2S and PLLSAI OFF
3178:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *            - AHB, APB1 and APB2 prescaler set to 1.
3179:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *            - CSS, MCO1 and MCO2 OFF
3180:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *            - All interrupts disabled
3181:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @note   This function doesn't modify the configuration of the
3182:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *            - Peripheral clocks
3183:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   *            - LSI, LSE and RTC clocks
3184:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   * @retval HAL status
3185:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   */
3186:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** HAL_StatusTypeDef HAL_RCC_DeInit(void)
3187:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** {
 696              		.loc 1 3187 1 is_stmt 1 view -0
 697              		.cfi_startproc
 698              		@ args = 0, pretend = 0, frame = 0
 699              		@ frame_needed = 0, uses_anonymous_args = 0
 700 0000 38B5     		push	{r3, r4, r5, lr}
 701              	.LCFI6:
 702              		.cfi_def_cfa_offset 16
 703              		.cfi_offset 3, -16
 704              		.cfi_offset 4, -12
 705              		.cfi_offset 5, -8
 706              		.cfi_offset 14, -4
3188:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   uint32_t tickstart;
ARM GAS  /tmp/cci617lT.s 			page 71


 707              		.loc 1 3188 3 view .LVU210
3189:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
3190:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get Start Tick */
3191:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   tickstart = HAL_GetTick();
 708              		.loc 1 3191 3 view .LVU211
 709              		.loc 1 3191 15 is_stmt 0 view .LVU212
 710 0002 FFF7FEFF 		bl	HAL_GetTick
 711              	.LVL55:
 712 0006 0446     		mov	r4, r0
 713              	.LVL56:
3192:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
3193:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Set HSION bit to the reset value */
3194:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   SET_BIT(RCC->CR, RCC_CR_HSION);
 714              		.loc 1 3194 3 is_stmt 1 view .LVU213
 715 0008 464A     		ldr	r2, .L87
 716 000a 1368     		ldr	r3, [r2]
 717 000c 43F00103 		orr	r3, r3, #1
 718 0010 1360     		str	r3, [r2]
3195:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
3196:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Wait till HSI is ready */
3197:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 719              		.loc 1 3197 3 view .LVU214
 720              	.LVL57:
 721              	.L65:
 722              		.loc 1 3197 9 view .LVU215
 723              		.loc 1 3197 10 is_stmt 0 view .LVU216
 724 0012 444B     		ldr	r3, .L87
 725 0014 1B68     		ldr	r3, [r3]
 726              		.loc 1 3197 9 view .LVU217
 727 0016 13F0020F 		tst	r3, #2
 728 001a 06D1     		bne	.L82
3198:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
3199:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 729              		.loc 1 3199 5 is_stmt 1 view .LVU218
 730              		.loc 1 3199 10 is_stmt 0 view .LVU219
 731 001c FFF7FEFF 		bl	HAL_GetTick
 732              	.LVL58:
 733              		.loc 1 3199 24 view .LVU220
 734 0020 001B     		subs	r0, r0, r4
 735              		.loc 1 3199 8 view .LVU221
 736 0022 0228     		cmp	r0, #2
 737 0024 F5D9     		bls	.L65
3200:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
3201:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       return HAL_TIMEOUT;
 738              		.loc 1 3201 14 view .LVU222
 739 0026 0320     		movs	r0, #3
 740              	.L66:
3202:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
3203:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
3204:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
3205:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Set HSITRIM[4:0] bits to the reset value */
3206:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
3207:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
3208:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get Start Tick */
3209:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   tickstart = HAL_GetTick();
3210:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
3211:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Reset CFGR register */
ARM GAS  /tmp/cci617lT.s 			page 72


3212:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   CLEAR_REG(RCC->CFGR);
3213:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
3214:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Wait till clock switch is ready */
3215:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
3216:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
3217:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
3218:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
3219:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       return HAL_TIMEOUT;
3220:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
3221:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
3222:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
3223:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get Start Tick */
3224:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   tickstart = HAL_GetTick();
3225:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
3226:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Clear HSEON, HSEBYP and CSSON bits */
3227:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
3228:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
3229:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Wait till HSE is disabled */
3230:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
3231:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
3232:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
3233:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
3234:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       return HAL_TIMEOUT;
3235:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
3236:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
3237:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
3238:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get Start Tick */
3239:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   tickstart = HAL_GetTick();
3240:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
3241:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Clear PLLON bit */
3242:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
3243:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
3244:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Wait till PLL is disabled */
3245:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
3246:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
3247:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
3248:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
3249:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       return HAL_TIMEOUT;
3250:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
3251:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
3252:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
3253:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(RCC_PLLI2S_SUPPORT)
3254:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get Start Tick */
3255:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   tickstart = HAL_GetTick();
3256:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
3257:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Reset PLLI2SON bit */
3258:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
3259:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
3260:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Wait till PLLI2S is disabled */
3261:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
3262:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
3263:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
3264:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
3265:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       return HAL_TIMEOUT;
3266:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
3267:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
3268:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* RCC_PLLI2S_SUPPORT */
ARM GAS  /tmp/cci617lT.s 			page 73


3269:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
3270:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(RCC_PLLSAI_SUPPORT)
3271:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Get Start Tick */
3272:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   tickstart = HAL_GetTick();
3273:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
3274:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Reset PLLSAI bit */
3275:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
3276:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
3277:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Wait till PLLSAI is disabled */
3278:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
3279:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
3280:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
3281:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
3282:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****       return HAL_TIMEOUT;
3283:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
3284:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
3285:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* RCC_PLLSAI_SUPPORT */
3286:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
3287:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
3288:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) ||
3289:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
3290:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 
3291:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
3292:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 
3293:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #else
3294:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
3295:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx ||
3296:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
3297:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Reset PLLI2SCFGR register to default value */
3298:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) ||
3299:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     defined(STM32F423xx) || defined(STM32F446xx)
3300:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 
3301:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) 
3302:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
3303:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) 
3304:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 
3305:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #elif defined(STM32F411xE)
3306:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 
3307:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx ||
3308:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
3309:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Reset PLLSAICFGR register */
3310:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) ||
3311:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 
3312:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #elif defined(STM32F446xx)
3313:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 
3314:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */
3315:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
3316:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Disable all interrupts */
3317:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | R
3318:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
3319:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(RCC_CIR_PLLI2SRDYIE)
3320:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
3321:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* RCC_CIR_PLLI2SRDYIE */
3322:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
3323:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(RCC_CIR_PLLSAIRDYIE)
3324:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
3325:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* RCC_CIR_PLLSAIRDYIE */
ARM GAS  /tmp/cci617lT.s 			page 74


3326:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
3327:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Clear all interrupt flags */
3328:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR
3329:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           RCC_CIR_CSSC);
3330:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
3331:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(RCC_CIR_PLLI2SRDYC)
3332:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
3333:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* RCC_CIR_PLLI2SRDYC */
3334:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
3335:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #if defined(RCC_CIR_PLLSAIRDYC)
3336:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
3337:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* RCC_CIR_PLLSAIRDYC */
3338:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
3339:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Clear LSION bit */
3340:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
3341:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
3342:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Reset all CSR flags */
3343:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   SET_BIT(RCC->CSR, RCC_CSR_RMVF);
3344:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
3345:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Update the SystemCoreClock global variable */
3346:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   SystemCoreClock = HSI_VALUE;
3347:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
3348:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   /* Adapt Systick interrupt period */
3349:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   if (HAL_InitTick(uwTickPrio) != HAL_OK)
3350:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
3351:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     return HAL_ERROR;
3352:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
3353:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   else
3354:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
3355:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     return HAL_OK;
3356:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
3357:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** }
 741              		.loc 1 3357 1 view .LVU223
 742 0028 38BD     		pop	{r3, r4, r5, pc}
 743              	.LVL59:
 744              	.L82:
3206:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 745              		.loc 1 3206 3 is_stmt 1 view .LVU224
 746 002a 3E4D     		ldr	r5, .L87
 747 002c 2B68     		ldr	r3, [r5]
 748 002e 43F08003 		orr	r3, r3, #128
 749 0032 2B60     		str	r3, [r5]
3209:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 750              		.loc 1 3209 3 view .LVU225
3209:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 751              		.loc 1 3209 15 is_stmt 0 view .LVU226
 752 0034 FFF7FEFF 		bl	HAL_GetTick
 753              	.LVL60:
 754 0038 0446     		mov	r4, r0
 755              	.LVL61:
3212:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 756              		.loc 1 3212 3 is_stmt 1 view .LVU227
 757 003a 0023     		movs	r3, #0
 758 003c AB60     		str	r3, [r5, #8]
3215:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
 759              		.loc 1 3215 3 view .LVU228
 760              	.LVL62:
ARM GAS  /tmp/cci617lT.s 			page 75


 761              	.L68:
3215:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
 762              		.loc 1 3215 9 view .LVU229
3215:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
 763              		.loc 1 3215 10 is_stmt 0 view .LVU230
 764 003e 394B     		ldr	r3, .L87
 765 0040 9B68     		ldr	r3, [r3, #8]
3215:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
 766              		.loc 1 3215 9 view .LVU231
 767 0042 13F00C0F 		tst	r3, #12
 768 0046 08D0     		beq	.L83
3217:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 769              		.loc 1 3217 5 is_stmt 1 view .LVU232
3217:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 770              		.loc 1 3217 10 is_stmt 0 view .LVU233
 771 0048 FFF7FEFF 		bl	HAL_GetTick
 772              	.LVL63:
3217:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 773              		.loc 1 3217 24 view .LVU234
 774 004c 001B     		subs	r0, r0, r4
3217:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 775              		.loc 1 3217 8 view .LVU235
 776 004e 41F28833 		movw	r3, #5000
 777 0052 9842     		cmp	r0, r3
 778 0054 F3D9     		bls	.L68
3219:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
 779              		.loc 1 3219 14 view .LVU236
 780 0056 0320     		movs	r0, #3
 781 0058 E6E7     		b	.L66
 782              	.L83:
3224:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 783              		.loc 1 3224 3 is_stmt 1 view .LVU237
3224:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 784              		.loc 1 3224 15 is_stmt 0 view .LVU238
 785 005a FFF7FEFF 		bl	HAL_GetTick
 786              	.LVL64:
 787 005e 0446     		mov	r4, r0
 788              	.LVL65:
3227:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 789              		.loc 1 3227 3 is_stmt 1 view .LVU239
 790 0060 304A     		ldr	r2, .L87
 791 0062 1368     		ldr	r3, [r2]
 792 0064 23F45023 		bic	r3, r3, #851968
 793 0068 1360     		str	r3, [r2]
3230:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
 794              		.loc 1 3230 3 view .LVU240
 795              	.LVL66:
 796              	.L70:
3230:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
 797              		.loc 1 3230 9 view .LVU241
3230:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
 798              		.loc 1 3230 10 is_stmt 0 view .LVU242
 799 006a 2E4B     		ldr	r3, .L87
 800 006c 1B68     		ldr	r3, [r3]
3230:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
 801              		.loc 1 3230 9 view .LVU243
 802 006e 13F4003F 		tst	r3, #131072
ARM GAS  /tmp/cci617lT.s 			page 76


 803 0072 06D0     		beq	.L84
3232:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 804              		.loc 1 3232 5 is_stmt 1 view .LVU244
3232:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 805              		.loc 1 3232 10 is_stmt 0 view .LVU245
 806 0074 FFF7FEFF 		bl	HAL_GetTick
 807              	.LVL67:
3232:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 808              		.loc 1 3232 24 view .LVU246
 809 0078 001B     		subs	r0, r0, r4
3232:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 810              		.loc 1 3232 8 view .LVU247
 811 007a 6428     		cmp	r0, #100
 812 007c F5D9     		bls	.L70
3234:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
 813              		.loc 1 3234 14 view .LVU248
 814 007e 0320     		movs	r0, #3
 815 0080 D2E7     		b	.L66
 816              	.L84:
3239:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 817              		.loc 1 3239 3 is_stmt 1 view .LVU249
3239:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 818              		.loc 1 3239 15 is_stmt 0 view .LVU250
 819 0082 FFF7FEFF 		bl	HAL_GetTick
 820              	.LVL68:
 821 0086 0446     		mov	r4, r0
 822              	.LVL69:
3242:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 823              		.loc 1 3242 3 is_stmt 1 view .LVU251
 824 0088 264A     		ldr	r2, .L87
 825 008a 1368     		ldr	r3, [r2]
 826 008c 23F08073 		bic	r3, r3, #16777216
 827 0090 1360     		str	r3, [r2]
3245:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
 828              		.loc 1 3245 3 view .LVU252
 829              	.LVL70:
 830              	.L72:
3245:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
 831              		.loc 1 3245 9 view .LVU253
3245:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
 832              		.loc 1 3245 10 is_stmt 0 view .LVU254
 833 0092 244B     		ldr	r3, .L87
 834 0094 1B68     		ldr	r3, [r3]
3245:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
 835              		.loc 1 3245 9 view .LVU255
 836 0096 13F0007F 		tst	r3, #33554432
 837 009a 06D0     		beq	.L85
3247:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 838              		.loc 1 3247 5 is_stmt 1 view .LVU256
3247:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 839              		.loc 1 3247 10 is_stmt 0 view .LVU257
 840 009c FFF7FEFF 		bl	HAL_GetTick
 841              	.LVL71:
3247:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 842              		.loc 1 3247 24 view .LVU258
 843 00a0 001B     		subs	r0, r0, r4
3247:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
ARM GAS  /tmp/cci617lT.s 			page 77


 844              		.loc 1 3247 8 view .LVU259
 845 00a2 0228     		cmp	r0, #2
 846 00a4 F5D9     		bls	.L72
3249:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
 847              		.loc 1 3249 14 view .LVU260
 848 00a6 0320     		movs	r0, #3
 849 00a8 BEE7     		b	.L66
 850              	.L85:
3255:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 851              		.loc 1 3255 3 is_stmt 1 view .LVU261
3255:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 852              		.loc 1 3255 15 is_stmt 0 view .LVU262
 853 00aa FFF7FEFF 		bl	HAL_GetTick
 854              	.LVL72:
 855 00ae 0446     		mov	r4, r0
 856              	.LVL73:
3258:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 857              		.loc 1 3258 3 is_stmt 1 view .LVU263
 858 00b0 1C4A     		ldr	r2, .L87
 859 00b2 1368     		ldr	r3, [r2]
 860 00b4 23F08063 		bic	r3, r3, #67108864
 861 00b8 1360     		str	r3, [r2]
3261:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
 862              		.loc 1 3261 3 view .LVU264
 863              	.LVL74:
 864              	.L74:
3261:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
 865              		.loc 1 3261 9 view .LVU265
3261:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
 866              		.loc 1 3261 10 is_stmt 0 view .LVU266
 867 00ba 1A4B     		ldr	r3, .L87
 868 00bc 1B68     		ldr	r3, [r3]
3261:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
 869              		.loc 1 3261 9 view .LVU267
 870 00be 13F0006F 		tst	r3, #134217728
 871 00c2 06D0     		beq	.L86
3263:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 872              		.loc 1 3263 5 is_stmt 1 view .LVU268
3263:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 873              		.loc 1 3263 10 is_stmt 0 view .LVU269
 874 00c4 FFF7FEFF 		bl	HAL_GetTick
 875              	.LVL75:
3263:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 876              		.loc 1 3263 24 view .LVU270
 877 00c8 001B     		subs	r0, r0, r4
3263:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     {
 878              		.loc 1 3263 8 view .LVU271
 879 00ca 0228     		cmp	r0, #2
 880 00cc F5D9     		bls	.L74
3265:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****     }
 881              		.loc 1 3265 14 view .LVU272
 882 00ce 0320     		movs	r0, #3
 883 00d0 AAE7     		b	.L66
 884              	.L86:
3294:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx ||
 885              		.loc 1 3294 3 is_stmt 1 view .LVU273
3294:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx ||
ARM GAS  /tmp/cci617lT.s 			page 78


 886              		.loc 1 3294 16 is_stmt 0 view .LVU274
 887 00d2 144B     		ldr	r3, .L87
 888 00d4 144A     		ldr	r2, .L87+4
 889 00d6 5A60     		str	r2, [r3, #4]
3302:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) 
 890              		.loc 1 3302 3 is_stmt 1 view .LVU275
3302:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) 
 891              		.loc 1 3302 19 is_stmt 0 view .LVU276
 892 00d8 144A     		ldr	r2, .L87+8
 893 00da C3F88420 		str	r2, [r3, #132]
3317:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 894              		.loc 1 3317 3 is_stmt 1 view .LVU277
 895 00de DA68     		ldr	r2, [r3, #12]
 896 00e0 22F4F852 		bic	r2, r2, #7936
 897 00e4 DA60     		str	r2, [r3, #12]
3320:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* RCC_CIR_PLLI2SRDYIE */
 898              		.loc 1 3320 3 view .LVU278
 899 00e6 DA68     		ldr	r2, [r3, #12]
 900 00e8 22F40052 		bic	r2, r2, #8192
 901 00ec DA60     		str	r2, [r3, #12]
3328:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****           RCC_CIR_CSSC);
 902              		.loc 1 3328 3 view .LVU279
 903 00ee DA68     		ldr	r2, [r3, #12]
 904 00f0 42F41F02 		orr	r2, r2, #10420224
 905 00f4 DA60     		str	r2, [r3, #12]
3332:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** #endif /* RCC_CIR_PLLI2SRDYC */
 906              		.loc 1 3332 3 view .LVU280
 907 00f6 DA68     		ldr	r2, [r3, #12]
 908 00f8 42F40012 		orr	r2, r2, #2097152
 909 00fc DA60     		str	r2, [r3, #12]
3340:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 910              		.loc 1 3340 3 view .LVU281
 911 00fe 5A6F     		ldr	r2, [r3, #116]
 912 0100 22F00102 		bic	r2, r2, #1
 913 0104 5A67     		str	r2, [r3, #116]
3343:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 914              		.loc 1 3343 3 view .LVU282
 915 0106 5A6F     		ldr	r2, [r3, #116]
 916 0108 42F08072 		orr	r2, r2, #16777216
 917 010c 5A67     		str	r2, [r3, #116]
3346:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 918              		.loc 1 3346 3 view .LVU283
3346:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c **** 
 919              		.loc 1 3346 19 is_stmt 0 view .LVU284
 920 010e 084B     		ldr	r3, .L87+12
 921 0110 084A     		ldr	r2, .L87+16
 922 0112 1A60     		str	r2, [r3]
3349:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
 923              		.loc 1 3349 3 is_stmt 1 view .LVU285
3349:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
 924              		.loc 1 3349 7 is_stmt 0 view .LVU286
 925 0114 084B     		ldr	r3, .L87+20
 926 0116 1868     		ldr	r0, [r3]
 927 0118 FFF7FEFF 		bl	HAL_InitTick
 928              	.LVL76:
3349:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   {
 929              		.loc 1 3349 6 view .LVU287
ARM GAS  /tmp/cci617lT.s 			page 79


 930 011c 0028     		cmp	r0, #0
 931 011e 83D0     		beq	.L66
3351:stm32f4xx-hal-driver/Src/stm32f4xx_hal_rcc_ex.c ****   }
 932              		.loc 1 3351 12 view .LVU288
 933 0120 0120     		movs	r0, #1
 934 0122 81E7     		b	.L66
 935              	.L88:
 936              		.align	2
 937              	.L87:
 938 0124 00380240 		.word	1073887232
 939 0128 10300004 		.word	67121168
 940 012c 00300020 		.word	536883200
 941 0130 00000000 		.word	SystemCoreClock
 942 0134 0024F400 		.word	16000000
 943 0138 00000000 		.word	uwTickPrio
 944              		.cfi_endproc
 945              	.LFE244:
 947              		.text
 948              	.Letext0:
 949              		.file 2 "/opt/gcc_arm/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/machine/_default_typ
 950              		.file 3 "/opt/gcc_arm/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/_stdint.h"
 951              		.file 4 "CMSIS_5/CMSIS/Core/Include/core_cm4.h"
 952              		.file 5 "cmsis-device-f4/Include/system_stm32f4xx.h"
 953              		.file 6 "cmsis-device-f4/Include/stm32f407xx.h"
 954              		.file 7 "cmsis-device-f4/Include/stm32f4xx.h"
 955              		.file 8 "stm32f4xx-hal-driver/Inc/stm32f4xx_hal_def.h"
 956              		.file 9 "stm32f4xx-hal-driver/Inc/stm32f4xx_hal_rcc_ex.h"
 957              		.file 10 "stm32f4xx-hal-driver/Inc/stm32f4xx_hal.h"
ARM GAS  /tmp/cci617lT.s 			page 80


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_hal_rcc_ex.c
     /tmp/cci617lT.s:18     .text.HAL_RCCEx_PeriphCLKConfig:0000000000000000 $t
     /tmp/cci617lT.s:26     .text.HAL_RCCEx_PeriphCLKConfig:0000000000000000 HAL_RCCEx_PeriphCLKConfig
     /tmp/cci617lT.s:317    .text.HAL_RCCEx_PeriphCLKConfig:0000000000000144 $d
     /tmp/cci617lT.s:325    .text.HAL_RCCEx_GetPeriphCLKConfig:0000000000000000 $t
     /tmp/cci617lT.s:332    .text.HAL_RCCEx_GetPeriphCLKConfig:0000000000000000 HAL_RCCEx_GetPeriphCLKConfig
     /tmp/cci617lT.s:380    .text.HAL_RCCEx_GetPeriphCLKConfig:000000000000002c $d
     /tmp/cci617lT.s:385    .text.HAL_RCCEx_GetPeriphCLKFreq:0000000000000000 $t
     /tmp/cci617lT.s:392    .text.HAL_RCCEx_GetPeriphCLKFreq:0000000000000000 HAL_RCCEx_GetPeriphCLKFreq
     /tmp/cci617lT.s:499    .text.HAL_RCCEx_GetPeriphCLKFreq:0000000000000060 $d
     /tmp/cci617lT.s:507    .text.HAL_RCCEx_EnablePLLI2S:0000000000000000 $t
     /tmp/cci617lT.s:514    .text.HAL_RCCEx_EnablePLLI2S:0000000000000000 HAL_RCCEx_EnablePLLI2S
     /tmp/cci617lT.s:614    .text.HAL_RCCEx_EnablePLLI2S:0000000000000060 $d
     /tmp/cci617lT.s:620    .text.HAL_RCCEx_DisablePLLI2S:0000000000000000 $t
     /tmp/cci617lT.s:627    .text.HAL_RCCEx_DisablePLLI2S:0000000000000000 HAL_RCCEx_DisablePLLI2S
     /tmp/cci617lT.s:681    .text.HAL_RCCEx_DisablePLLI2S:000000000000002c $d
     /tmp/cci617lT.s:687    .text.HAL_RCC_DeInit:0000000000000000 $t
     /tmp/cci617lT.s:694    .text.HAL_RCC_DeInit:0000000000000000 HAL_RCC_DeInit
     /tmp/cci617lT.s:938    .text.HAL_RCC_DeInit:0000000000000124 $d

UNDEFINED SYMBOLS
HAL_GetTick
HAL_InitTick
SystemCoreClock
uwTickPrio
